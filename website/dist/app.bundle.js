!function(t){var n=window.webpackHotUpdate;window.webpackHotUpdate=function(t,e){!function(t,n){if(!x[t]||!m[t])return;for(var e in m[t]=!1,n)Object.prototype.hasOwnProperty.call(n,e)&&(v[e]=n[e]);0==--g&&0===_&&S()}(t,e),n&&n(t,e)};var e,r=!0,i="cc00fef8cecc52f9f707",o=1e4,u={},a=[],c=[];function f(t){var n=A[t];if(!n)return k;var r=function(r){return n.hot.active?(A[r]?-1===A[r].parents.indexOf(t)&&A[r].parents.push(t):(a=[t],e=r),-1===n.children.indexOf(r)&&n.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+t),a=[]),k(r)},i=function(t){return{configurable:!0,enumerable:!0,get:function(){return k[t]},set:function(n){k[t]=n}}};for(var o in k)Object.prototype.hasOwnProperty.call(k,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(t){return"ready"===h&&d("prepare"),_++,k.e(t).then(n,function(t){throw n(),t});function n(){_--,"prepare"===h&&(b[t]||E(t),0===_&&0===g&&S())}},r.t=function(t,n){return 1&n&&(t=r(t)),k.t(t,-2&n)},r}function s(t){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:e!==t,active:!0,accept:function(t,e){if(void 0===t)n._selfAccepted=!0;else if("function"==typeof t)n._selfAccepted=t;else if("object"==typeof t)for(var r=0;r<t.length;r++)n._acceptedDependencies[t[r]]=e||function(){};else n._acceptedDependencies[t]=e||function(){}},decline:function(t){if(void 0===t)n._selfDeclined=!0;else if("object"==typeof t)for(var e=0;e<t.length;e++)n._declinedDependencies[t[e]]=!0;else n._declinedDependencies[t]=!0},dispose:function(t){n._disposeHandlers.push(t)},addDisposeHandler:function(t){n._disposeHandlers.push(t)},removeDisposeHandler:function(t){var e=n._disposeHandlers.indexOf(t);e>=0&&n._disposeHandlers.splice(e,1)},check:M,apply:T,status:function(t){if(!t)return h;l.push(t)},addStatusHandler:function(t){l.push(t)},removeStatusHandler:function(t){var n=l.indexOf(t);n>=0&&l.splice(n,1)},data:u[t]};return e=void 0,n}var l=[],h="idle";function d(t){h=t;for(var n=0;n<l.length;n++)l[n].call(null,t)}var p,v,y,g=0,_=0,b={},m={},x={};function w(t){return+t+""===t?+t:t}function M(t){if("idle"!==h)throw new Error("check() is only allowed in idle status");return r=t,d("check"),(n=o,n=n||1e4,new Promise(function(t,e){if("undefined"==typeof XMLHttpRequest)return e(new Error("No browser support"));try{var r=new XMLHttpRequest,o=k.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=n,r.send(null)}catch(t){return e(t)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)e(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)e(new Error("Manifest request to "+o+" failed."));else{try{var n=JSON.parse(r.responseText)}catch(t){return void e(t)}t(n)}}})).then(function(t){if(!t)return d("idle"),null;m={},b={},x=t.c,y=t.h,d("prepare");var n=new Promise(function(t,n){p={resolve:t,reject:n}});v={};return E(0),"prepare"===h&&0===_&&0===g&&S(),n});var n}function E(t){x[t]?(m[t]=!0,g++,function(t){var n=document.createElement("script");n.charset="utf-8",n.src=k.p+""+t+"."+i+".hot-update.js",document.head.appendChild(n)}(t)):b[t]=!0}function S(){d("ready");var t=p;if(p=null,t)if(r)Promise.resolve().then(function(){return T(r)}).then(function(n){t.resolve(n)},function(n){t.reject(n)});else{var n=[];for(var e in v)Object.prototype.hasOwnProperty.call(v,e)&&n.push(w(e));t.resolve(n)}}function T(n){if("ready"!==h)throw new Error("apply() is only allowed in ready status");var e,r,o,c,f;function s(t){for(var n=[t],e={},r=n.slice().map(function(t){return{chain:[t],id:t}});r.length>0;){var i=r.pop(),o=i.id,u=i.chain;if((c=A[o])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:u,moduleId:o};if(c.hot._main)return{type:"unaccepted",chain:u,moduleId:o};for(var a=0;a<c.parents.length;a++){var f=c.parents[a],s=A[f];if(s){if(s.hot._declinedDependencies[o])return{type:"declined",chain:u.concat([f]),moduleId:o,parentId:f};-1===n.indexOf(f)&&(s.hot._acceptedDependencies[o]?(e[f]||(e[f]=[]),l(e[f],[o])):(delete e[f],n.push(f),r.push({chain:u.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:t,outdatedModules:n,outdatedDependencies:e}}function l(t,n){for(var e=0;e<n.length;e++){var r=n[e];-1===t.indexOf(r)&&t.push(r)}}n=n||{};var p={},g=[],_={},b=function(){console.warn("[HMR] unexpected require("+M.moduleId+") to disposed module")};for(var m in v)if(Object.prototype.hasOwnProperty.call(v,m)){var M;f=w(m);var E=!1,S=!1,T=!1,N="";switch((M=v[m]?s(f):{type:"disposed",moduleId:m}).chain&&(N="\nUpdate propagation: "+M.chain.join(" -> ")),M.type){case"self-declined":n.onDeclined&&n.onDeclined(M),n.ignoreDeclined||(E=new Error("Aborted because of self decline: "+M.moduleId+N));break;case"declined":n.onDeclined&&n.onDeclined(M),n.ignoreDeclined||(E=new Error("Aborted because of declined dependency: "+M.moduleId+" in "+M.parentId+N));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(M),n.ignoreUnaccepted||(E=new Error("Aborted because "+f+" is not accepted"+N));break;case"accepted":n.onAccepted&&n.onAccepted(M),S=!0;break;case"disposed":n.onDisposed&&n.onDisposed(M),T=!0;break;default:throw new Error("Unexception type "+M.type)}if(E)return d("abort"),Promise.reject(E);if(S)for(f in _[f]=v[f],l(g,M.outdatedModules),M.outdatedDependencies)Object.prototype.hasOwnProperty.call(M.outdatedDependencies,f)&&(p[f]||(p[f]=[]),l(p[f],M.outdatedDependencies[f]));T&&(l(g,[M.moduleId]),_[f]=b)}var C,P=[];for(r=0;r<g.length;r++)f=g[r],A[f]&&A[f].hot._selfAccepted&&P.push({module:f,errorHandler:A[f].hot._selfAccepted});d("dispose"),Object.keys(x).forEach(function(t){!1===x[t]&&function(t){delete installedChunks[t]}(t)});for(var L,O,R=g.slice();R.length>0;)if(f=R.pop(),c=A[f]){var D={},z=c.hot._disposeHandlers;for(o=0;o<z.length;o++)(e=z[o])(D);for(u[f]=D,c.hot.active=!1,delete A[f],delete p[f],o=0;o<c.children.length;o++){var j=A[c.children[o]];j&&((C=j.parents.indexOf(f))>=0&&j.parents.splice(C,1))}}for(f in p)if(Object.prototype.hasOwnProperty.call(p,f)&&(c=A[f]))for(O=p[f],o=0;o<O.length;o++)L=O[o],(C=c.children.indexOf(L))>=0&&c.children.splice(C,1);for(f in d("apply"),i=y,_)Object.prototype.hasOwnProperty.call(_,f)&&(t[f]=_[f]);var U=null;for(f in p)if(Object.prototype.hasOwnProperty.call(p,f)&&(c=A[f])){O=p[f];var q=[];for(r=0;r<O.length;r++)if(L=O[r],e=c.hot._acceptedDependencies[L]){if(-1!==q.indexOf(e))continue;q.push(e)}for(r=0;r<q.length;r++){e=q[r];try{e(O)}catch(t){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:f,dependencyId:O[r],error:t}),n.ignoreErrored||U||(U=t)}}}for(r=0;r<P.length;r++){var I=P[r];f=I.module,a=[f];try{k(f)}catch(t){if("function"==typeof I.errorHandler)try{I.errorHandler(t)}catch(e){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:f,error:e,originalError:t}),n.ignoreErrored||U||(U=e),U||(U=t)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:f,error:t}),n.ignoreErrored||U||(U=t)}}return U?(d("fail"),Promise.reject(U)):(d("idle"),new Promise(function(t){t(g)}))}var A={};function k(n){if(A[n])return A[n].exports;var e=A[n]={i:n,l:!1,exports:{},hot:s(n),parents:(c=a,a=[],c),children:[]};return t[n].call(e.exports,e,e.exports,f(n)),e.l=!0,e.exports}k.m=t,k.c=A,k.d=function(t,n,e){k.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},k.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},k.t=function(t,n){if(1&n&&(t=k(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(k.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)k.d(e,r,function(n){return t[n]}.bind(null,r));return e},k.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return k.d(n,"a",n),n},k.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},k.p="./",k.h=function(){return i},f(38)(k.s=38)}([function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n,e){var r=e(27)("wks"),i=e(28),o=e(0).Symbol,u="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=r},function(t,n){var e=t.exports={version:"2.6.3"};"number"==typeof __e&&(__e=e)},function(t,n,e){var r=e(6);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n,e){var r=e(0),i=e(2),o=e(9),u=e(5),a=e(12),c=function(t,n,e){var f,s,l,h=t&c.F,d=t&c.G,p=t&c.S,v=t&c.P,y=t&c.B,g=t&c.W,_=d?i:i[n]||(i[n]={}),b=_.prototype,m=d?r:p?r[n]:(r[n]||{}).prototype;for(f in d&&(e=n),e)(s=!h&&m&&void 0!==m[f])&&a(_,f)||(l=s?m[f]:e[f],_[f]=d&&"function"!=typeof m[f]?e[f]:y&&s?o(l,r):g&&m[f]==l?function(t){var n=function(n,e,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(n);case 2:return new t(n,e)}return new t(n,e,r)}return t.apply(this,arguments)};return n.prototype=t.prototype,n}(l):v&&"function"==typeof l?o(Function.call,l):l,v&&((_.virtual||(_.virtual={}))[f]=l,t&c.R&&b&&!b[f]&&u(b,f,l)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n,e){var r=e(11),i=e(25);t.exports=e(7)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){t.exports=!e(15)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n){t.exports={}},function(t,n,e){var r=e(10);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,i){return t.call(n,e,r,i)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(3),i=e(45),o=e(46),u=Object.defineProperty;n.f=e(7)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(49),i=e(18);t.exports=function(t){return r(i(t))}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){var r=e(6),i=e(0).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,e){var r=e(48),i=e(29);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){var r=e(27)("keys"),i=e(28);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n){t.exports=!0},function(t,n,e){var r=e(11).f,i=e(12),o=e(1)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n,e){"use strict";var r=e(10);function i(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new i(t)}},function(t,n,e){},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n,e){var r=e(19),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,n,e){var r=e(2),i=e(0),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(21)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){"use strict";var r=e(21),i=e(4),o=e(59),u=e(5),a=e(8),c=e(60),f=e(22),s=e(63),l=e(1)("iterator"),h=!([].keys&&"next"in[].keys()),d=function(){return this};t.exports=function(t,n,e,p,v,y,g){c(e,n,p);var _,b,m,x=function(t){if(!h&&t in S)return S[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},w=n+" Iterator",M="values"==v,E=!1,S=t.prototype,T=S[l]||S["@@iterator"]||v&&S[v],A=T||x(v),k=v?M?x("entries"):A:void 0,N="Array"==n&&S.entries||T;if(N&&(m=s(N.call(new t)))!==Object.prototype&&m.next&&(f(m,w,!0),r||"function"==typeof m[l]||u(m,l,d)),M&&T&&"values"!==T.name&&(E=!0,A=function(){return T.call(this)}),r&&!g||!h&&!E&&S[l]||u(S,l,A),a[n]=A,a[w]=d,v)if(_={values:M?A:x("values"),keys:y?A:x("keys"),entries:k},g)for(b in _)b in S||o(S,b,_[b]);else i(i.P+i.F*(h||E),n,_);return _}},function(t,n,e){var r=e(0).document;t.exports=r&&r.documentElement},function(t,n,e){var r=e(18);t.exports=function(t){return Object(r(t))}},function(t,n,e){var r=e(14),i=e(1)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?e:o?r(n):"Object"==(u=r(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,e){var r=e(3),i=e(10),o=e(1)("species");t.exports=function(t,n){var e,u=r(t).constructor;return void 0===u||null==(e=r(u)[o])?n:i(e)}},function(t,n,e){var r,i,o,u=e(9),a=e(74),c=e(31),f=e(16),s=e(0),l=s.process,h=s.setImmediate,d=s.clearImmediate,p=s.MessageChannel,v=s.Dispatch,y=0,g={},_=function(){var t=+this;if(g.hasOwnProperty(t)){var n=g[t];delete g[t],n()}},b=function(t){_.call(t.data)};h&&d||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return g[++y]=function(){a("function"==typeof t?t:Function(t),n)},r(y),y},d=function(t){delete g[t]},"process"==e(14)(l)?r=function(t){l.nextTick(u(_,t,1))}:v&&v.now?r=function(t){v.now(u(_,t,1))}:p?(o=(i=new p).port2,i.port1.onmessage=b,r=u(o.postMessage,o,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(t){s.postMessage(t+"","*")},s.addEventListener("message",b,!1)):r="onreadystatechange"in f("script")?function(t){c.appendChild(f("script")).onreadystatechange=function(){c.removeChild(this),_.call(t)}}:function(t){setTimeout(u(_,t,1),0)}),t.exports={set:h,clear:d}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){var r=e(3),i=e(6),o=e(23);t.exports=function(t,n){if(r(t),i(n)&&n.constructor===t)return n;var e=o.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=a(e(39)),i=a(e(42)),o=a(e(53)),u=(a(e(82)),function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(e(89)));function a(t){return t&&t.__esModule?t:{default:t}}e(86),u.selection.prototype.moveToFront=function(){return this.each(function(){this.parentNode.appendChild(this)})},(0,o.default)(r.default.mark(function t(){var n,e,o,a,c,f,s,l,h,d,p,v,y,g,_,b,m,x,w,M,E,S,T;return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return T=function(t){u.select("#tooltip-data").html("<span><b>Ward name</b> "+f[t]+"</span>\n<span><b>Life expectancy</b> "+c[t]+" years</span>")},S=function(t){var n=E(t),e=u.transition().duration(500),r=w.selectAll(".dot").data(n);r.exit().transition(e).style("fill-opacity",1e-6).remove(),r.transition(e).attr("cx",function(t){return x(t.value)}).attr("fill",function(n){return n.code==t?"red":"blue"}).attr("class",function(n){return n.code==t?"dot selected":"dot"}),r.enter().append("circle").attr("class",function(n){return n.code==t?"dot selected":"dot"}).attr("r",6).attr("cx",0).attr("cy",20).style("fill-opacity",1).attr("fill",function(n){return n.code==t?"red":"blue"}).on("mouseover",function(t){return T(t.code)}).on("mouseout",function(n){return T(t)}).transition(e).attr("cx",function(t){return x(t.value)}).style("fill-opacity",.7),w.select(".annotation-line").datum(n.filter(function(n){return n.code==t})[0]).enter().transition(e).attr("x1",function(t){return x(t.value)}).attr("x2",function(t){return x(t.value)}),w.select(".annotation-label").datum(n.filter(function(n){return n.code==t})[0]).enter().transition(e).attr("x",function(t){return x(t.value)}).text(function(t){return t.name}),w.select(".selected").moveToFront()},E=function(t){var n=o.filter(function(n){return n["2011 Census Ward code"]==t})[0];return o.filter(function(t){return t["Local authority name"]==n["Local authority name"]}).map(function(t){return{name:t["2011 Census Ward name"],code:t["2011 Census Ward code"],value:parseFloat(t["LE1,2 (years)"])}})},e=function(t){y[t].fire("click"),n(t)},n=function(t){document.getElementById("ward-dropdown").value=t,_.attr("fill",function(){var n=u.select(this).attr("id");return n==t?"rgba(255,255,255,0.7)":d(c[n])}),_.attr("fill-opacity",function(){return u.select(this).attr("id")==t?.9:.6}),T(t),S(t)},t.next=7,u.csv("./data/table2.csv");case 7:return o=t.sent,t.next=10,u.json("./data/census_wards_london.geojson");case 10:a=t.sent,c=o.reduce(function(t,n){return t[n["2011 Census Ward code"]]=parseFloat(n["LE1,2 (years)"]),t},{}),f=o.reduce(function(t,n){return t[n["2011 Census Ward code"]]=n["2011 Census Ward name"]+" ("+n["Local authority name"]+")",t},{}),s=o.reduce(function(t,n){return t[n["2011 Census Ward name"]]=n["2011 Census Ward code"],t},{}),l=o.filter(function(t){return"London"==t.Region}).map(function(t){return{code:t["2011 Census Ward code"],name:t["2011 Census Ward name"]+" ("+t["Local authority name"]+")"}}).sort(function(t,n){return t.name<n.name?-1:1}),(h=document.getElementById("postcode-input")).addEventListener("keydown",function(t){13===t.keyCode&&u.json("https://mapit.mysociety.org/postcode/"+h.value).then(function(t){var n=(0,i.default)(t.areas).map(function(t){return t[1]}).filter(function(t){return"LBW"==t.type})[0].name;e(s[n]),document.getElementById("ward-dropdown").value=s[n]})}),u.select("#ward-dropdown").selectAll("option").data(l).enter().append("option").attr("value",function(t){return t.code}).html(function(t){return t.name}),u.select("#ward-dropdown").on("change",function(){e(this.value)}),(d=u.scaleQuantile().range(["rgb(237, 248, 233)","rgb(186, 228, 179)","rgb(116,196,118)","rgb(49,163,84)","rgb(0,109,44)"])).domain([u.min(o,function(t){return parseFloat(t["LE1,2 (years)"])}),u.max(o,function(t){return parseFloat(t["LE1,2 (years)"])})]),p=L.map("map",{minZoom:10,maxZoom:15}).setView([51.5,-.11],10),L.tileLayer("http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png",{maxZoom:18,attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}).addTo(p),v=L.geoJSON(a,{style:function(t){return{color:"rgb(25,25,25)",weight:1,fillColor:d(c[t.properties.cmwd11cd]),fillOpacity:.7}},onEachFeature:function(t,e){t.properties.bounds_calculated=e.getBounds().getCenter(),e.on("click",function(t){n(e.feature.properties.cmwd11cd),p.flyTo(e.getBounds().getCenter(),12)})}}).addTo(p),y={},v.eachLayer(function(t){y[t.feature.properties.cmwd11cd]=t,void 0!==t._path?t._path.id=t.feature.properties.cmwd11cd:t.eachLayer(function(n){n._path.id=t.feature.properties.cmwd11cd})}),g=u.select("#map").select("div").select("div").select("svg"),g.select("g"),(_=u.selectAll("path.leaflet-interactive")).on("mouseover",function(){T(u.select(this).attr("id"))}),_.on("mouseout",function(){var t=document.getElementById("ward-dropdown").value;T(t)}),15,b=2*(u.select("#tooltip-scatter").node().offsetWidth-30)/3,m=u.select("#tooltip-scatter").node().offsetHeight-30,x=u.scaleLinear().domain(u.extent(o,function(t){return parseFloat(t["LE1,2 (years)"])})).range([0,b-30]),w=u.select("#tooltip-scatter").append("svg").attr("width",b).attr("height",m),M=u.axisBottom().scale(x).ticks(5),w.append("g").attr("class","x axis").attr("transform","translate(0,"+(m-30)+")").call(M),w.append("text").attr("class","annotation-label").attr("x",function(t){return 0}).attr("y",function(t){return 50}).text(""),w.append("line").attr("class","annotation-line").attr("x1",function(t){return 0}).attr("x2",function(t){return 0}).attr("y1",50).attr("y2",20);case 39:case"end":return t.stop()}},t,this)}))()},function(t,n,e){t.exports=e(40)},function(t,n,e){var r=function(){return this}()||Function("return this")(),i=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,o=i&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,t.exports=e(41),i)r.regeneratorRuntime=o;else try{delete r.regeneratorRuntime}catch(t){r.regeneratorRuntime=void 0}},function(t,n){!function(n){"use strict";var e,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},u=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag",f="object"==typeof t,s=n.regeneratorRuntime;if(s)f&&(t.exports=s);else{(s=n.regeneratorRuntime=f?t.exports:{}).wrap=m;var l="suspendedStart",h="suspendedYield",d="executing",p="completed",v={},y={};y[u]=function(){return this};var g=Object.getPrototypeOf,_=g&&g(g(P([])));_&&_!==r&&i.call(_,u)&&(y=_);var b=E.prototype=w.prototype=Object.create(y);M.prototype=b.constructor=E,E.constructor=M,E[c]=M.displayName="GeneratorFunction",s.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===M||"GeneratorFunction"===(n.displayName||n.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(b),t},s.awrap=function(t){return{__await:t}},S(T.prototype),T.prototype[a]=function(){return this},s.AsyncIterator=T,s.async=function(t,n,e,r){var i=new T(m(t,n,e,r));return s.isGeneratorFunction(n)?i:i.next().then(function(t){return t.done?t.value:i.next()})},S(b),b[c]="Generator",b[u]=function(){return this},b.toString=function(){return"[object Generator]"},s.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},s.values=P,C.prototype={constructor:C,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(N),!t)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(r,i){return a.type="throw",a.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var u=this.tryEntries[o],a=u.completion;if("root"===u.tryLoc)return r("end");if(u.tryLoc<=this.prev){var c=i.call(u,"catchLoc"),f=i.call(u,"finallyLoc");if(c&&f){if(this.prev<u.catchLoc)return r(u.catchLoc,!0);if(this.prev<u.finallyLoc)return r(u.finallyLoc)}else if(c){if(this.prev<u.catchLoc)return r(u.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return r(u.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=n,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),v},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),N(e),v}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;N(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}}}function m(t,n,e,r){var i=n&&n.prototype instanceof w?n:w,o=Object.create(i.prototype),u=new C(r||[]);return o._invoke=function(t,n,e){var r=l;return function(i,o){if(r===d)throw new Error("Generator is already running");if(r===p){if("throw"===i)throw o;return L()}for(e.method=i,e.arg=o;;){var u=e.delegate;if(u){var a=A(u,e);if(a){if(a===v)continue;return a}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=p,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=d;var c=x(t,n,e);if("normal"===c.type){if(r=e.done?p:h,c.arg===v)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r=p,e.method="throw",e.arg=c.arg)}}}(t,e,u),o}function x(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}function w(){}function M(){}function E(){}function S(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function T(t){var n;this._invoke=function(e,r){function o(){return new Promise(function(n,o){!function n(e,r,o,u){var a=x(t[e],t,r);if("throw"!==a.type){var c=a.arg,f=c.value;return f&&"object"==typeof f&&i.call(f,"__await")?Promise.resolve(f.__await).then(function(t){n("next",t,o,u)},function(t){n("throw",t,o,u)}):Promise.resolve(f).then(function(t){c.value=t,o(c)},u)}u(a.arg)}(e,r,n,o)})}return n=n?n.then(o,o):o()}}function A(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,A(t,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=x(r,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,v;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function k(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function N(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function P(t){if(t){var n=t[u];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function n(){for(;++r<t.length;)if(i.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}return{next:L}}function L(){return{value:e,done:!0}}}(function(){return this}()||Function("return this")())},function(t,n,e){t.exports={default:e(43),__esModule:!0}},function(t,n,e){e(44),t.exports=e(2).Object.entries},function(t,n,e){var r=e(4),i=e(47)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},function(t,n,e){t.exports=!e(7)&&!e(15)(function(){return 7!=Object.defineProperty(e(16)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(6);t.exports=function(t,n){if(!r(t))return t;var e,i;if(n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;if("function"==typeof(e=t.valueOf)&&!r(i=e.call(t)))return i;if(!n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n,e){var r=e(17),i=e(13),o=e(52).f;t.exports=function(t){return function(n){for(var e,u=i(n),a=r(u),c=a.length,f=0,s=[];c>f;)o.call(u,e=a[f++])&&s.push(t?[e,u[e]]:u[e]);return s}}},function(t,n,e){var r=e(12),i=e(13),o=e(50)(!1),u=e(20)("IE_PROTO");t.exports=function(t,n){var e,a=i(t),c=0,f=[];for(e in a)e!=u&&r(a,e)&&f.push(e);for(;n.length>c;)r(a,e=n[c++])&&(~o(f,e)||f.push(e));return f}},function(t,n,e){var r=e(14);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n,e){var r=e(13),i=e(26),o=e(51);t.exports=function(t){return function(n,e,u){var a,c=r(n),f=i(c.length),s=o(u,f);if(t&&e!=e){for(;f>s;)if((a=c[s++])!=a)return!0}else for(;f>s;s++)if((t||s in c)&&c[s]===e)return t||s||0;return!t&&-1}}},function(t,n,e){var r=e(19),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=r(t))<0?i(t+n,0):o(t,n)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){"use strict";n.__esModule=!0;var r,i=e(54),o=(r=i)&&r.__esModule?r:{default:r};n.default=function(t){return function(){var n=t.apply(this,arguments);return new o.default(function(t,e){return function r(i,u){try{var a=n[i](u),c=a.value}catch(t){return void e(t)}if(!a.done)return o.default.resolve(c).then(function(t){r("next",t)},function(t){r("throw",t)});t(c)}("next")})}}},function(t,n,e){t.exports={default:e(55),__esModule:!0}},function(t,n,e){e(56),e(57),e(64),e(68),e(80),e(81),t.exports=e(2).Promise},function(t,n){},function(t,n,e){"use strict";var r=e(58)(!0);e(30)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){var r=e(19),i=e(18);t.exports=function(t){return function(n,e){var o,u,a=String(i(n)),c=r(e),f=a.length;return c<0||c>=f?t?"":void 0:(o=a.charCodeAt(c))<55296||o>56319||c+1===f||(u=a.charCodeAt(c+1))<56320||u>57343?t?a.charAt(c):o:t?a.slice(c,c+2):u-56320+(o-55296<<10)+65536}}},function(t,n,e){t.exports=e(5)},function(t,n,e){"use strict";var r=e(61),i=e(25),o=e(22),u={};e(5)(u,e(1)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(u,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){var r=e(3),i=e(62),o=e(29),u=e(20)("IE_PROTO"),a=function(){},c=function(){var t,n=e(16)("iframe"),r=o.length;for(n.style.display="none",e(31).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[o[r]];return c()};t.exports=Object.create||function(t,n){var e;return null!==t?(a.prototype=r(t),e=new a,a.prototype=null,e[u]=t):e=c(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(11),i=e(3),o=e(17);t.exports=e(7)?Object.defineProperties:function(t,n){i(t);for(var e,u=o(n),a=u.length,c=0;a>c;)r.f(t,e=u[c++],n[e]);return t}},function(t,n,e){var r=e(12),i=e(32),o=e(20)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n,e){e(65);for(var r=e(0),i=e(5),o=e(8),u=e(1)("toStringTag"),a="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),c=0;c<a.length;c++){var f=a[c],s=r[f],l=s&&s.prototype;l&&!l[u]&&i(l,u,f),o[f]=o.Array}},function(t,n,e){"use strict";var r=e(66),i=e(67),o=e(8),u=e(13);t.exports=e(30)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,n){t.exports=function(){}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){"use strict";var r,i,o,u,a=e(21),c=e(0),f=e(9),s=e(33),l=e(4),h=e(6),d=e(10),p=e(69),v=e(70),y=e(34),g=e(35).set,_=e(75)(),b=e(23),m=e(36),x=e(76),w=e(37),M=c.TypeError,E=c.process,S=E&&E.versions,T=S&&S.v8||"",A=c.Promise,k="process"==s(E),N=function(){},C=i=b.f,P=!!function(){try{var t=A.resolve(1),n=(t.constructor={})[e(1)("species")]=function(t){t(N,N)};return(k||"function"==typeof PromiseRejectionEvent)&&t.then(N)instanceof n&&0!==T.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(t){}}(),L=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},O=function(t,n){if(!t._n){t._n=!0;var e=t._c;_(function(){for(var r=t._v,i=1==t._s,o=0,u=function(n){var e,o,u,a=i?n.ok:n.fail,c=n.resolve,f=n.reject,s=n.domain;try{a?(i||(2==t._h&&z(t),t._h=1),!0===a?e=r:(s&&s.enter(),e=a(r),s&&(s.exit(),u=!0)),e===n.promise?f(M("Promise-chain cycle")):(o=L(e))?o.call(e,c,f):c(e)):f(r)}catch(t){s&&!u&&s.exit(),f(t)}};e.length>o;)u(e[o++]);t._c=[],t._n=!1,n&&!t._h&&R(t)})}},R=function(t){g.call(c,function(){var n,e,r,i=t._v,o=D(t);if(o&&(n=m(function(){k?E.emit("unhandledRejection",i,t):(e=c.onunhandledrejection)?e({promise:t,reason:i}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=k||D(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},D=function(t){return 1!==t._h&&0===(t._a||t._c).length},z=function(t){g.call(c,function(){var n;k?E.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})})},j=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),O(n,!0))},U=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw M("Promise can't be resolved itself");(n=L(t))?_(function(){var r={_w:e,_d:!1};try{n.call(t,f(U,r,1),f(j,r,1))}catch(t){j.call(r,t)}}):(e._v=t,e._s=1,O(e,!1))}catch(t){j.call({_w:e,_d:!1},t)}}};P||(A=function(t){p(this,A,"Promise","_h"),d(t),r.call(this);try{t(f(U,this,1),f(j,this,1))}catch(t){j.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(77)(A.prototype,{then:function(t,n){var e=C(y(this,A));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=k?E.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&O(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=f(U,t,1),this.reject=f(j,t,1)},b.f=C=function(t){return t===A||t===u?new o(t):i(t)}),l(l.G+l.W+l.F*!P,{Promise:A}),e(22)(A,"Promise"),e(78)("Promise"),u=e(2).Promise,l(l.S+l.F*!P,"Promise",{reject:function(t){var n=C(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(a||!P),"Promise",{resolve:function(t){return w(a&&this===u?A:this,t)}}),l(l.S+l.F*!(P&&e(79)(function(t){A.all(t).catch(N)})),"Promise",{all:function(t){var n=this,e=C(n),r=e.resolve,i=e.reject,o=m(function(){var e=[],o=0,u=1;v(t,!1,function(t){var a=o++,c=!1;e.push(void 0),u++,n.resolve(t).then(function(t){c||(c=!0,e[a]=t,--u||r(e))},i)}),--u||r(e)});return o.e&&i(o.v),e.promise},race:function(t){var n=this,e=C(n),r=e.reject,i=m(function(){v(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return i.e&&r(i.v),e.promise}})},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(9),i=e(71),o=e(72),u=e(3),a=e(26),c=e(73),f={},s={};(n=t.exports=function(t,n,e,l,h){var d,p,v,y,g=h?function(){return t}:c(t),_=r(e,l,n?2:1),b=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(o(g)){for(d=a(t.length);d>b;b++)if((y=n?_(u(p=t[b])[0],p[1]):_(t[b]))===f||y===s)return y}else for(v=g.call(t);!(p=v.next()).done;)if((y=i(v,_,p.value,n))===f||y===s)return y}).BREAK=f,n.RETURN=s},function(t,n,e){var r=e(3);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&r(o.call(t)),n}}},function(t,n,e){var r=e(8),i=e(1)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){var r=e(33),i=e(1)("iterator"),o=e(8);t.exports=e(2).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(0),i=e(35).set,o=r.MutationObserver||r.WebKitMutationObserver,u=r.process,a=r.Promise,c="process"==e(14)(u);t.exports=function(){var t,n,e,f=function(){var r,i;for(c&&(r=u.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(c)e=function(){u.nextTick(f)};else if(!o||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var s=a.resolve(void 0);e=function(){s.then(f)}}else e=function(){i.call(r,f)};else{var l=!0,h=document.createTextNode("");new o(f).observe(h,{characterData:!0}),e=function(){h.data=l=!l}}return function(r){var i={fn:r,next:void 0};n&&(n.next=i),t||(t=i,e()),n=i}}},function(t,n,e){var r=e(0).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){var r=e(5);t.exports=function(t,n,e){for(var i in n)e&&t[i]?t[i]=n[i]:r(t,i,n[i]);return t}},function(t,n,e){"use strict";var r=e(0),i=e(2),o=e(11),u=e(7),a=e(1)("species");t.exports=function(t){var n="function"==typeof i[t]?i[t]:r[t];u&&n&&!n[a]&&o.f(n,a,{configurable:!0,get:function(){return this}})}},function(t,n,e){var r=e(1)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var o=[7],u=o[r]();u.next=function(){return{done:e=!0}},o[r]=function(){return u},t(o)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(4),i=e(2),o=e(0),u=e(34),a=e(37);r(r.P+r.R,"Promise",{finally:function(t){var n=u(this,i.Promise||o.Promise),e="function"==typeof t;return this.then(e?function(e){return a(n,t()).then(function(){return e})}:t,e?function(e){return a(n,t()).then(function(){throw e})}:t)}})},function(t,n,e){"use strict";var r=e(4),i=e(23),o=e(36);r(r.S,"Promise",{try:function(t){var n=i.f(this),e=o(t);return(e.e?n.reject:n.resolve)(e.v),n.promise}})},function(t,n,e){t.exports={default:e(83),__esModule:!0}},function(t,n,e){e(84),t.exports=e(2).Object.keys},function(t,n,e){var r=e(32),i=e(17);e(85)("keys",function(){return function(t){return i(r(t))}})},function(t,n,e){var r=e(4),i=e(2),o=e(15);t.exports=function(t,n){var e=(i.Object||{})[t]||Object[t],u={};u[t]=n(e),r(r.S+r.F*o(function(){e(1)}),"Object",u)}},function(t,n,e){var r=e(24);"string"==typeof r&&(r=[[t.i,r,""]]);var i={transform:void 0},o=e(87)(r,i);r.locals&&(t.exports=r.locals),r.locals||t.hot.accept(24,function(){var n=e(24);"string"==typeof n&&(n=[[t.i,n,""]]),o(n)}),t.hot.dispose(function(){o()})},function(t,n,e){var r,i,o={},u=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),a=function(t){var n={};return function(t){return void 0===n[t]&&(n[t]=function(t){return document.querySelector(t)}.call(this,t)),n[t]}}(),c=null,f=0,s=[],l=e(88);function h(t,n){for(var e=0;e<t.length;e++){var r=t[e],i=o[r.id];if(i){i.refs++;for(var u=0;u<i.parts.length;u++)i.parts[u](r.parts[u]);for(;u<r.parts.length;u++)i.parts.push(_(r.parts[u],n))}else{var a=[];for(u=0;u<r.parts.length;u++)a.push(_(r.parts[u],n));o[r.id]={id:r.id,refs:1,parts:a}}}}function d(t,n){for(var e=[],r={},i=0;i<t.length;i++){var o=t[i],u=n.base?o[0]+n.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};r[u]?r[u].parts.push(a):e.push(r[u]={id:u,parts:[a]})}return e}function p(t,n){var e=a(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),s.push(n);else{if("bottom"!==t.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");e.appendChild(n)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=s.indexOf(t);n>=0&&s.splice(n,1)}function y(t){var n=document.createElement("style");return t.attrs.type="text/css",g(n,t.attrs),p(t,n),n}function g(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function _(t,n){var e,r,i,o;if(n.transform&&t.css){if(!(o=n.transform(t.css)))return function(){};t.css=o}if(n.singleton){var u=f++;e=c||(c=y(n)),r=x.bind(null,e,u,!1),i=x.bind(null,e,u,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return t.attrs.type="text/css",t.attrs.rel="stylesheet",g(n,t.attrs),p(t,n),n}(n),r=function(t,n,e){var r=e.css,i=e.sourceMap,o=void 0===n.convertToAbsoluteUrls&&i;(n.convertToAbsoluteUrls||o)&&(r=l(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var u=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(u),a&&URL.revokeObjectURL(a)}.bind(null,e,n),i=function(){v(e),e.href&&URL.revokeObjectURL(e.href)}):(e=y(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),i=function(){v(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else i()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||(n.singleton=u()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=d(t,n);return h(e,n),function(t){for(var r=[],i=0;i<e.length;i++){var u=e[i];(a=o[u.id]).refs--,r.push(a)}t&&h(d(t,n),n);for(i=0;i<r.length;i++){var a;if(0===(a=r[i]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete o[a.id]}}}};var b,m=(b=[],function(t,n){return b[t]=n,b.filter(Boolean).join("\n")});function x(t,n,e,r){var i=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=m(n,i);else{var o=document.createTextNode(i),u=t.childNodes;u[n]&&t.removeChild(u[n]),u.length?t.insertBefore(o,u[n]):t.appendChild(o)}}},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var i,o=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?e+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,n,e){"use strict";e.r(n);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var o=i(r),u=o.right,a=o.left,c=u,f=function(t,n){null==n&&(n=s);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o};function s(t,n){return[t,n]}var l=function(t,n,e){var r,i,o,u,a=t.length,c=n.length,f=new Array(a*c);for(null==e&&(e=s),r=o=0;r<a;++r)for(u=t[r],i=0;i<c;++i,++o)f[o]=e(u,n[i]);return f},h=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},d=function(t){return null===t?NaN:+t},p=function(t,n){var e,r,i=t.length,o=0,u=-1,a=0,c=0;if(null==n)for(;++u<i;)isNaN(e=d(t[u]))||(c+=(r=e-a)*(e-(a+=r/++o)));else for(;++u<i;)isNaN(e=d(n(t[u],u,t)))||(c+=(r=e-a)*(e-(a+=r/++o)));if(o>1)return c/(o-1)},v=function(t,n){var e=p(t,n);return e?Math.sqrt(e):e},y=function(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},g=Array.prototype,_=g.slice,b=g.map,m=function(t){return function(){return t}},x=function(t){return t},w=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o},M=Math.sqrt(50),E=Math.sqrt(10),S=Math.sqrt(2),T=function(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=A(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o};function A(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=M?10:o>=E?5:o>=S?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=M?10:o>=E?5:o>=S?2:1)}function k(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=M?i*=10:o>=E?i*=5:o>=S&&(i*=2),n<t?-i:i}var N=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},C=function(){var t=x,n=y,e=N;function r(r){var i,o,u=r.length,a=new Array(u);for(i=0;i<u;++i)a[i]=t(r[i],i,r);var f=n(a),s=f[0],l=f[1],h=e(a,s,l);Array.isArray(h)||(h=k(s,l,h),h=w(Math.ceil(s/h)*h,l,h));for(var d=h.length;h[0]<=s;)h.shift(),--d;for(;h[d-1]>l;)h.pop(),--d;var p,v=new Array(d+1);for(i=0;i<=d;++i)(p=v[i]=[]).x0=i>0?h[i-1]:s,p.x1=i<d?h[i]:l;for(i=0;i<u;++i)s<=(o=a[i])&&o<=l&&v[c(h,o,0,d)].push(r[i]);return v}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:m(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:m([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?m(_.call(t)):m(t),r):e},r},P=function(t,n,e){if(null==e&&(e=d),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}},L=function(t,n,e){return t=b.call(t,d).sort(r),Math.ceil((e-n)/(2*(P(t,.75)-P(t,.25))*Math.pow(t.length,-1/3)))},O=function(t,n,e){return Math.ceil((e-n)/(3.5*v(t)*Math.pow(t.length,-1/3)))},R=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},D=function(t,n){var e,r=t.length,i=r,o=-1,u=0;if(null==n)for(;++o<r;)isNaN(e=d(t[o]))?--i:u+=e;else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))?--i:u+=e;if(i)return u/i},z=function(t,n){var e,i=t.length,o=-1,u=[];if(null==n)for(;++o<i;)isNaN(e=d(t[o]))||u.push(e);else for(;++o<i;)isNaN(e=d(n(t[o],o,t)))||u.push(e);return P(u.sort(r),.5)},j=function(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e},U=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r},q=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},I=function(t,n){if(e=t.length){var e,i,o=0,u=0,a=t[u];for(null==n&&(n=r);++o<e;)(n(i=t[o],a)<0||0!==n(a,a))&&(a=i,u=o);return 0===n(a,a)?u:void 0}},F=function(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t},B=function(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o},Y=function(t){if(!(i=t.length))return[];for(var n=-1,e=U(t,H),r=new Array(e);++n<e;)for(var i,o=-1,u=r[n]=new Array(i);++o<i;)u[o]=t[o][n];return r};function H(t){return t.length}var G=function(){return Y(arguments)},X=Array.prototype.slice,V=function(t){return t},W=1,$=2,Z=3,Q=4,J=1e-6;function K(t){return"translate("+(t+.5)+",0)"}function tt(t){return"translate(0,"+(t+.5)+")"}function nt(){return!this.__axis}function et(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,c=t===W||t===Q?-1:1,f=t===Q||t===$?"x":"y",s=t===W||t===Z?K:tt;function l(l){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):V:i,p=Math.max(o,0)+a,v=n.range(),y=+v[0]+.5,g=+v[v.length-1]+.5,_=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),b=l.selection?l.selection():l,m=b.selectAll(".domain").data([null]),x=b.selectAll(".tick").data(h,n).order(),w=x.exit(),M=x.enter().append("g").attr("class","tick"),E=x.select("line"),S=x.select("text");m=m.merge(m.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),E=E.merge(M.append("line").attr("stroke","currentColor").attr(f+"2",c*o)),S=S.merge(M.append("text").attr("fill","currentColor").attr(f,c*p).attr("dy",t===W?"0em":t===Z?"0.71em":"0.32em")),l!==b&&(m=m.transition(l),x=x.transition(l),E=E.transition(l),S=S.transition(l),w=w.transition(l).attr("opacity",J).attr("transform",function(t){return isFinite(t=_(t))?s(t):this.getAttribute("transform")}),M.attr("opacity",J).attr("transform",function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:_(t))})),w.remove(),m.attr("d",t===Q||t==$?u?"M"+c*u+","+y+"H0.5V"+g+"H"+c*u:"M0.5,"+y+"V"+g:u?"M"+y+","+c*u+"V0.5H"+g+"V"+c*u:"M"+y+",0.5H"+g),x.attr("opacity",1).attr("transform",function(t){return s(_(t))}),E.attr(f+"2",c*o),S.attr(f,c*p).text(d),b.filter(nt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===$?"start":t===Q?"end":"middle"),b.each(function(){this.__axis=_})}return l.scale=function(t){return arguments.length?(n=t,l):n},l.ticks=function(){return e=X.call(arguments),l},l.tickArguments=function(t){return arguments.length?(e=null==t?[]:X.call(t),l):e.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:X.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(o=u=+t,l):o},l.tickSizeInner=function(t){return arguments.length?(o=+t,l):o},l.tickSizeOuter=function(t){return arguments.length?(u=+t,l):u},l.tickPadding=function(t){return arguments.length?(a=+t,l):a},l}function rt(t){return et(W,t)}function it(t){return et($,t)}function ot(t){return et(Z,t)}function ut(t){return et(Q,t)}var at={value:function(){}};function ct(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new ft(r)}function ft(t){this._=t}function st(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function lt(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=at,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}ft.prototype=ct.prototype={constructor:ft,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),u=-1,a=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++u<a;)if(e=(t=o[u]).type)i[e]=lt(i[e],t.name,n);else if(null==n)for(e in i)i[e]=lt(i[e],t.name,null);return this}for(;++u<a;)if((e=(t=o[u]).type)&&(e=st(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new ft(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var ht=ct,dt="http://www.w3.org/1999/xhtml",pt={svg:"http://www.w3.org/2000/svg",xhtml:dt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},vt=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),pt.hasOwnProperty(n)?{space:pt[n],local:t}:t};var yt=function(t){var n=vt(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===dt&&n.documentElement.namespaceURI===dt?n.createElement(t):n.createElementNS(e,t)}})(n)};function gt(){}var _t=function(t){return null==t?gt:function(){return this.querySelector(t)}};function bt(){return[]}var mt=function(t){return null==t?bt:function(){return this.querySelectorAll(t)}},xt=function(t){return function(){return this.matches(t)}},wt=function(t){return new Array(t.length)};function Mt(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}Mt.prototype={constructor:Mt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Et="$";function St(t,n,e,r,i,o){for(var u,a=0,c=n.length,f=o.length;a<f;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new Mt(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function Tt(t,n,e,r,i,o,u){var a,c,f,s={},l=n.length,h=o.length,d=new Array(l);for(a=0;a<l;++a)(c=n[a])&&(d[a]=f=Et+u.call(c,c.__data__,a,n),f in s?i[a]=c:s[f]=c);for(a=0;a<h;++a)(c=s[f=Et+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],s[f]=null):e[a]=new Mt(t,o[a]);for(a=0;a<l;++a)(c=n[a])&&s[d[a]]===c&&(i[a]=c)}function At(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var kt=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Nt(t,n){return t.style.getPropertyValue(n)||kt(t).getComputedStyle(t,null).getPropertyValue(n)}function Ct(t){return t.trim().split(/^|\s+/)}function Pt(t){return t.classList||new Lt(t)}function Lt(t){this._node=t,this._names=Ct(t.getAttribute("class")||"")}function Ot(t,n){for(var e=Pt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function Rt(t,n){for(var e=Pt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}Lt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Dt(){this.textContent=""}function zt(){this.innerHTML=""}function jt(){this.nextSibling&&this.parentNode.appendChild(this)}function Ut(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function qt(){return null}function It(){var t=this.parentNode;t&&t.removeChild(this)}function Ft(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Bt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Yt={},Ht=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Yt={mouseenter:"mouseover",mouseleave:"mouseout"}));function Gt(t,n,e){return t=Xt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Xt(t,n,e){return function(r){var i=Ht;Ht=r;try{t.call(this,this.__data__,n,e)}finally{Ht=i}}}function Vt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Wt(t,n,e){var r=Yt.hasOwnProperty(t.type)?Gt:Xt;return function(i,o,u){var a,c=this.__on,f=r(n,o,u);if(c)for(var s=0,l=c.length;s<l;++s)if((a=c[s]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=f,a.capture=e),void(a.value=n);this.addEventListener(t.type,f,e),a={type:t.type,name:t.name,value:n,listener:f,capture:e},c?c.push(a):this.__on=[a]}}function $t(t,n,e,r){var i=Ht;t.sourceEvent=Ht,Ht=t;try{return n.apply(e,r)}finally{Ht=i}}function Zt(t,n,e){var r=kt(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var Qt=[null];function Jt(t,n){this._groups=t,this._parents=n}function Kt(){return new Jt([[document.documentElement]],Qt)}Jt.prototype=Kt.prototype={constructor:Jt,select:function(t){"function"!=typeof t&&(t=_t(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],c=a.length,f=r[i]=new Array(c),s=0;s<c;++s)(o=a[s])&&(u=t.call(o,o.__data__,s,a))&&("__data__"in o&&(u.__data__=o.__data__),f[s]=u);return new Jt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=mt(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,f=0;f<c;++f)(u=a[f])&&(r.push(t.call(u,u.__data__,f,a)),i.push(u));return new Jt(r,i)},filter:function(t){"function"!=typeof t&&(t=xt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],f=0;f<a;++f)(o=u[f])&&t.call(o,o.__data__,f,u)&&c.push(o);return new Jt(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each(function(t){p[++s]=t}),p;var e,r=n?Tt:St,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),c=new Array(u),f=new Array(u),s=0;s<u;++s){var l=i[s],h=o[s],d=h.length,p=t.call(l,l&&l.__data__,s,i),v=p.length,y=c[s]=new Array(v),g=a[s]=new Array(v);r(l,h,y,g,f[s]=new Array(d),p,n);for(var _,b,m=0,x=0;m<v;++m)if(_=y[m]){for(m>=x&&(x=m+1);!(b=g[x])&&++x<v;);_._next=b||null}}return(a=new Jt(a,i))._enter=c,a._exit=f,a},enter:function(){return new Jt(this._enter||this._groups.map(wt),this._parents)},exit:function(){return new Jt(this._exit||this._groups.map(wt),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],s=e[a],l=f.length,h=u[a]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;a<r;++a)u[a]=n[a];return new Jt(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=At);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,f=i[o]=new Array(c),s=0;s<c;++s)(u=a[s])&&(f[s]=u);f.sort(n)}return new Jt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=vt(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):Nt(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=Ct(t+"");if(arguments.length<2){for(var r=Pt(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?Ot:Rt)(this,t)}}:n?function(t){return function(){Ot(this,t)}}:function(t){return function(){Rt(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?Dt:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?zt:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(jt)},lower:function(){return this.each(Ut)},append:function(t){var n="function"==typeof t?t:yt(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:yt(t),r=null==n?qt:"function"==typeof n?n:_t(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(It)},clone:function(t){return this.select(t?Bt:Ft)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?Wt:Vt,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,f=0,s=a.length;f<s;++f)for(r=0,c=a[f];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return Zt(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return Zt(this,t,n)}})(t,n))}};var tn=Kt,nn=function(t){return"string"==typeof t?new Jt([[document.querySelector(t)]],[document.documentElement]):new Jt([[t]],Qt)},en=function(t){return nn(yt(t).call(document.documentElement))},rn=0;function on(){return new un}function un(){this._="@"+(++rn).toString(36)}un.prototype=on.prototype={constructor:un,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var an=function(){for(var t,n=Ht;t=n.sourceEvent;)n=t;return n},cn=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},fn=function(t){var n=an();return n.changedTouches&&(n=n.changedTouches[0]),cn(t,n)},sn=function(t){return"string"==typeof t?new Jt([document.querySelectorAll(t)],[document.documentElement]):new Jt([null==t?[]:t],Qt)},ln=function(t,n,e){arguments.length<3&&(e=n,n=an().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return cn(t,r);return null},hn=function(t,n){null==n&&(n=an().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=cn(t,n[e]);return i};function dn(){Ht.stopImmediatePropagation()}var pn=function(){Ht.preventDefault(),Ht.stopImmediatePropagation()},vn=function(t){var n=t.document.documentElement,e=nn(t).on("dragstart.drag",pn,!0);"onselectstart"in n?e.on("selectstart.drag",pn,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function yn(t,n){var e=t.document.documentElement,r=nn(t).on("dragstart.drag",null);n&&(r.on("click.drag",pn,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}var gn=function(t){return function(){return t}};function _n(t,n,e,r,i,o,u,a,c,f){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=c,this._=f}function bn(){return!Ht.button}function mn(){return this.parentNode}function xn(t){return null==t?{x:Ht.x,y:Ht.y}:t}function wn(){return"ontouchstart"in this}_n.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Mn=function(){var t,n,e,r,i=bn,o=mn,u=xn,a=wn,c={},f=ht("start","drag","end"),s=0,l=0;function h(t){t.on("mousedown.drag",d).filter(a).on("touchstart.drag",y).on("touchmove.drag",g).on("touchend.drag touchcancel.drag",_).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){if(!r&&i.apply(this,arguments)){var u=b("mouse",o.apply(this,arguments),fn,this,arguments);u&&(nn(Ht.view).on("mousemove.drag",p,!0).on("mouseup.drag",v,!0),vn(Ht.view),dn(),e=!1,t=Ht.clientX,n=Ht.clientY,u("start"))}}function p(){if(pn(),!e){var r=Ht.clientX-t,i=Ht.clientY-n;e=r*r+i*i>l}c.mouse("drag")}function v(){nn(Ht.view).on("mousemove.drag mouseup.drag",null),yn(Ht.view,e),pn(),c.mouse("end")}function y(){if(i.apply(this,arguments)){var t,n,e=Ht.changedTouches,r=o.apply(this,arguments),u=e.length;for(t=0;t<u;++t)(n=b(e[t].identifier,r,ln,this,arguments))&&(dn(),n("start"))}}function g(){var t,n,e=Ht.changedTouches,r=e.length;for(t=0;t<r;++t)(n=c[e[t].identifier])&&(pn(),n("drag"))}function _(){var t,n,e=Ht.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout(function(){r=null},500),t=0;t<i;++t)(n=c[e[t].identifier])&&(dn(),n("end"))}function b(t,n,e,r,i){var o,a,l,d=e(n,t),p=f.copy();if($t(new _n(h,"beforestart",o,t,s,d[0],d[1],0,0,p),function(){return null!=(Ht.subject=o=u.apply(r,i))&&(a=o.x-d[0]||0,l=o.y-d[1]||0,!0)}))return function u(f){var v,y=d;switch(f){case"start":c[t]=u,v=s++;break;case"end":delete c[t],--s;case"drag":d=e(n,t),v=s}$t(new _n(h,f,o,t,v,d[0]+a,d[1]+l,d[0]-y[0],d[1]-y[1],p),p.apply,p,[f,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:gn(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:gn(t),h):o},h.subject=function(t){return arguments.length?(u="function"==typeof t?t:gn(t),h):u},h.touchable=function(t){return arguments.length?(a="function"==typeof t?t:gn(!!t),h):a},h.on=function(){var t=f.on.apply(f,arguments);return t===f?h:t},h.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,h):Math.sqrt(l)},h},En=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Sn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Tn(){}var An="\\s*([+-]?\\d+)\\s*",kn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Nn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Cn=/^#([0-9a-f]{3})$/,Pn=/^#([0-9a-f]{6})$/,Ln=new RegExp("^rgb\\("+[An,An,An]+"\\)$"),On=new RegExp("^rgb\\("+[Nn,Nn,Nn]+"\\)$"),Rn=new RegExp("^rgba\\("+[An,An,An,kn]+"\\)$"),Dn=new RegExp("^rgba\\("+[Nn,Nn,Nn,kn]+"\\)$"),zn=new RegExp("^hsl\\("+[kn,Nn,Nn]+"\\)$"),jn=new RegExp("^hsla\\("+[kn,Nn,Nn,kn]+"\\)$"),Un={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function qn(t){var n;return t=(t+"").trim().toLowerCase(),(n=Cn.exec(t))?new Hn((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=Pn.exec(t))?In(parseInt(n[1],16)):(n=Ln.exec(t))?new Hn(n[1],n[2],n[3],1):(n=On.exec(t))?new Hn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Rn.exec(t))?Fn(n[1],n[2],n[3],n[4]):(n=Dn.exec(t))?Fn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=zn.exec(t))?Xn(n[1],n[2]/100,n[3]/100,1):(n=jn.exec(t))?Xn(n[1],n[2]/100,n[3]/100,n[4]):Un.hasOwnProperty(t)?In(Un[t]):"transparent"===t?new Hn(NaN,NaN,NaN,0):null}function In(t){return new Hn(t>>16&255,t>>8&255,255&t,1)}function Fn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Hn(t,n,e,r)}function Bn(t){return t instanceof Tn||(t=qn(t)),t?new Hn((t=t.rgb()).r,t.g,t.b,t.opacity):new Hn}function Yn(t,n,e,r){return 1===arguments.length?Bn(t):new Hn(t,n,e,null==r?1:r)}function Hn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Gn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Xn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Wn(t,n,e,r)}function Vn(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Wn)return new Wn(t.h,t.s,t.l,t.opacity);if(t instanceof Tn||(t=qn(t)),!t)return new Wn;if(t instanceof Wn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new Wn(u,a,c,t.opacity)}(t):new Wn(t,n,e,null==r?1:r)}function Wn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function $n(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}En(Tn,qn,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),En(Hn,Yn,Sn(Tn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Hn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Hn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Gn(this.r)+Gn(this.g)+Gn(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),En(Wn,Vn,Sn(Tn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Wn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Wn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Hn($n(t>=240?t-240:t+120,i,r),$n(t,i,r),$n(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Zn=Math.PI/180,Qn=180/Math.PI,Jn=.96422,Kn=1,te=.82521,ne=4/29,ee=6/29,re=3*ee*ee,ie=ee*ee*ee;function oe(t){if(t instanceof ce)return new ce(t.l,t.a,t.b,t.opacity);if(t instanceof ye){if(isNaN(t.h))return new ce(t.l,0,0,t.opacity);var n=t.h*Zn;return new ce(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Hn||(t=Bn(t));var e,r,i=he(t.r),o=he(t.g),u=he(t.b),a=fe((.2225045*i+.7168786*o+.0606169*u)/Kn);return i===o&&o===u?e=r=a:(e=fe((.4360747*i+.3850649*o+.1430804*u)/Jn),r=fe((.0139322*i+.0971045*o+.7141733*u)/te)),new ce(116*a-16,500*(e-a),200*(a-r),t.opacity)}function ue(t,n){return new ce(t,0,0,null==n?1:n)}function ae(t,n,e,r){return 1===arguments.length?oe(t):new ce(t,n,e,null==r?1:r)}function ce(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function fe(t){return t>ie?Math.pow(t,1/3):t/re+ne}function se(t){return t>ee?t*t*t:re*(t-ne)}function le(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function he(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function de(t){if(t instanceof ye)return new ye(t.h,t.c,t.l,t.opacity);if(t instanceof ce||(t=oe(t)),0===t.a&&0===t.b)return new ye(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Qn;return new ye(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function pe(t,n,e,r){return 1===arguments.length?de(t):new ye(e,n,t,null==r?1:r)}function ve(t,n,e,r){return 1===arguments.length?de(t):new ye(t,n,e,null==r?1:r)}function ye(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}En(ce,ae,Sn(Tn,{brighter:function(t){return new ce(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new ce(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Hn(le(3.1338561*(n=Jn*se(n))-1.6168667*(t=Kn*se(t))-.4906146*(e=te*se(e))),le(-.9787684*n+1.9161415*t+.033454*e),le(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),En(ye,ve,Sn(Tn,{brighter:function(t){return new ye(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new ye(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return oe(this).rgb()}}));var ge=-.29227,_e=-.90649,be=1.97294,me=be*_e,xe=1.78277*be,we=1.78277*ge- -.14861*_e;function Me(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Ee)return new Ee(t.h,t.s,t.l,t.opacity);t instanceof Hn||(t=Bn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(we*r+me*n-xe*e)/(we+me-xe),o=r-i,u=(be*(e-i)-ge*o)/_e,a=Math.sqrt(u*u+o*o)/(be*i*(1-i)),c=a?Math.atan2(u,o)*Qn-120:NaN;return new Ee(c<0?c+360:c,a,i,t.opacity)}(t):new Ee(t,n,e,null==r?1:r)}function Ee(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Se(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}En(Ee,Me,Sn(Tn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ee(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ee(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Zn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Hn(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(ge*r+_e*i)),255*(n+e*(be*r)),this.opacity)}}));var Te=function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return Se((e-r/n)*n,u,i,o,a)}},Ae=function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return Se((e-r/n)*n,i,o,u,a)}},ke=function(t){return function(){return t}};function Ne(t,n){return function(e){return t+e*n}}function Ce(t,n){var e=n-t;return e?Ne(t,e>180||e<-180?e-360*Math.round(e/360):e):ke(isNaN(t)?n:t)}function Pe(t){return 1==(t=+t)?Le:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):ke(isNaN(n)?e:n)}}function Le(t,n){var e=n-t;return e?Ne(t,e):ke(isNaN(t)?n:t)}var Oe=function t(n){var e=Pe(n);function r(t,n){var r=e((t=Yn(t)).r,(n=Yn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=Le(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function Re(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=Yn(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}var De=Re(Te),ze=Re(Ae),je=function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=We(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}},Ue=function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}},qe=function(t,n){return n-=t=+t,function(e){return t+n*e}},Ie=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=We(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},Fe=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Be=new RegExp(Fe.source,"g");var Ye,He,Ge,Xe,Ve=function(t,n){var e,r,i,o=Fe.lastIndex=Be.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=Fe.exec(t))&&(r=Be.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:qe(e,r)})),o=Be.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})},We=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?ke(n):("number"===r?qe:"string"===r?(e=qn(n))?(n=e,Oe):Ve:n instanceof qn?Oe:n instanceof Date?Ue:Array.isArray(n)?je:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Ie:qe)(t,n)},$e=function(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}},Ze=function(t,n){var e=Ce(+t,+n);return function(t){var n=e(t);return n-360*Math.floor(n/360)}},Qe=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},Je=180/Math.PI,Ke={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},tr=function(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Je,skewX:Math.atan(c)*Je,scaleX:u,scaleY:a}};function nr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:qe(t,i)},{i:c-2,x:qe(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:qe(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:qe(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,c),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:qe(t,e)},{i:a-2,x:qe(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var er=nr(function(t){return"none"===t?Ke:(Ye||(Ye=document.createElement("DIV"),He=document.documentElement,Ge=document.defaultView),Ye.style.transform=t,t=Ge.getComputedStyle(He.appendChild(Ye),null).getPropertyValue("transform"),He.removeChild(Ye),t=t.slice(7,-1).split(","),tr(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),rr=nr(function(t){return null==t?Ke:(Xe||(Xe=document.createElementNS("http://www.w3.org/2000/svg","g")),Xe.setAttribute("transform",t),(t=Xe.transform.baseVal.consolidate())?(t=t.matrix,tr(t.a,t.b,t.c,t.d,t.e,t.f)):Ke)},", ",")",")"),ir=Math.SQRT2;function or(t){return((t=Math.exp(t))+1/t)/2}var ur=function(t,n){var e,r,i=t[0],o=t[1],u=t[2],a=n[0],c=n[1],f=n[2],s=a-i,l=c-o,h=s*s+l*l;if(h<1e-12)r=Math.log(f/u)/ir,e=function(t){return[i+t*s,o+t*l,u*Math.exp(ir*t*r)]};else{var d=Math.sqrt(h),p=(f*f-u*u+4*h)/(2*u*2*d),v=(f*f-u*u-4*h)/(2*f*2*d),y=Math.log(Math.sqrt(p*p+1)-p),g=Math.log(Math.sqrt(v*v+1)-v);r=(g-y)/ir,e=function(t){var n,e=t*r,a=or(y),c=u/(2*d)*(a*(n=ir*e+y,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(y));return[i+c*s,o+c*l,u*a/or(ir*e+y)]}}return e.duration=1e3*r,e};function ar(t){return function(n,e){var r=t((n=Vn(n)).h,(e=Vn(e)).h),i=Le(n.s,e.s),o=Le(n.l,e.l),u=Le(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}var cr=ar(Ce),fr=ar(Le);function sr(t,n){var e=Le((t=ae(t)).l,(n=ae(n)).l),r=Le(t.a,n.a),i=Le(t.b,n.b),o=Le(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function lr(t){return function(n,e){var r=t((n=ve(n)).h,(e=ve(e)).h),i=Le(n.c,e.c),o=Le(n.l,e.l),u=Le(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}var hr=lr(Ce),dr=lr(Le);function pr(t){return function n(e){function r(n,r){var i=t((n=Me(n)).h,(r=Me(r)).h),o=Le(n.s,r.s),u=Le(n.l,r.l),a=Le(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}var vr=pr(Ce),yr=pr(Le);function gr(t,n){for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}}var _r,br,mr=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e},xr=0,wr=0,Mr=0,Er=1e3,Sr=0,Tr=0,Ar=0,kr="object"==typeof performance&&performance.now?performance:Date,Nr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Cr(){return Tr||(Nr(Pr),Tr=kr.now()+Ar)}function Pr(){Tr=0}function Lr(){this._call=this._time=this._next=null}function Or(t,n,e){var r=new Lr;return r.restart(t,n,e),r}function Rr(){Cr(),++xr;for(var t,n=_r;n;)(t=Tr-n._time)>=0&&n._call.call(null,t),n=n._next;--xr}function Dr(){Tr=(Sr=kr.now())+Ar,xr=wr=0;try{Rr()}finally{xr=0,function(){var t,n,e=_r,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:_r=n);br=t,jr(r)}(),Tr=0}}function zr(){var t=kr.now(),n=t-Sr;n>Er&&(Ar-=n,Sr=t)}function jr(t){xr||(wr&&(wr=clearTimeout(wr)),t-Tr>24?(t<1/0&&(wr=setTimeout(Dr,t-kr.now()-Ar)),Mr&&(Mr=clearInterval(Mr))):(Mr||(Sr=kr.now(),Mr=setInterval(zr,Er)),xr=1,Nr(Dr)))}Lr.prototype=Or.prototype={constructor:Lr,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Cr():+e)+(null==n?0:+n),this._next||br===this||(br?br._next=this:_r=this,br=this),this._call=t,this._time=e,jr()},stop:function(){this._call&&(this._call=null,this._time=1/0,jr())}};var Ur=function(t,n,e){var r=new Lr;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},qr=function(t,n,e){var r=new Lr,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?Cr():+e,r.restart(function o(u){u+=i,r.restart(o,i+=n,e),t(u)},n,e),r)},Ir=ht("start","end","cancel","interrupt"),Fr=[],Br=0,Yr=1,Hr=2,Gr=3,Xr=4,Vr=5,Wr=6,$r=function(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var f,s,l,h;if(e.state!==Yr)return a();for(f in i)if((h=i[f]).name===e.name){if(h.state===Gr)return Ur(o);h.state===Xr?(h.state=Wr,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[f]):+f<n&&(h.state=Wr,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[f])}if(Ur(function(){e.state===Gr&&(e.state=Xr,e.timer.restart(u,e.delay,e.time),u(c))}),e.state=Hr,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Hr){for(e.state=Gr,r=new Array(l=e.tween.length),f=0,s=-1;f<l;++f)(h=e.tween[f].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=h);r.length=s+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=Vr,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);e.state===Vr&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=Wr,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Or(function(t){e.state=Yr,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:Ir,tween:Fr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Br})};function Zr(t,n){var e=Jr(t,n);if(e.state>Br)throw new Error("too late; already scheduled");return e}function Qr(t,n){var e=Jr(t,n);if(e.state>Gr)throw new Error("too late; already running");return e}function Jr(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var Kr=function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>Hr&&e.state<Vr,e.state=Wr,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}};function ti(t,n,e){var r=t._id;return t.each(function(){var t=Qr(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return Jr(t,r).value[n]}}var ni=function(t,n){var e;return("number"==typeof n?qe:n instanceof qn?Oe:(e=qn(n))?(n=e,Oe):Ve)(t,n)};var ei=tn.prototype.constructor;function ri(t){return function(){this.style.removeProperty(t)}}var ii=0;function oi(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function ui(t){return tn().transition(t)}function ai(){return++ii}var ci=tn.prototype;function fi(t){return+t}function si(t){return t*t}function li(t){return t*(2-t)}function hi(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function di(t){return t*t*t}function pi(t){return--t*t*t+1}function vi(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}oi.prototype=ui.prototype={constructor:oi,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=_t(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,c,f=r[u],s=f.length,l=o[u]=new Array(s),h=0;h<s;++h)(a=f[h])&&(c=t.call(a,a.__data__,h,f))&&("__data__"in a&&(c.__data__=a.__data__),l[h]=c,$r(l[h],n,e,h,l,Jr(a,e)));return new oi(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=mt(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var c,f=r[a],s=f.length,l=0;l<s;++l)if(c=f[l]){for(var h,d=t.call(c,c.__data__,l,f),p=Jr(c,e),v=0,y=d.length;v<y;++v)(h=d[v])&&$r(h,n,e,v,d,p);o.push(d),u.push(c)}return new oi(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=xt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],f=0;f<a;++f)(o=u[f])&&t.call(o,o.__data__,f,u)&&c.push(o);return new oi(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],s=e[a],l=f.length,h=u[a]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;a<r;++a)u[a]=n[a];return new oi(u,this._parents,this._name,this._id)},selection:function(){return new ei(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=ai(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,f=0;f<c;++f)if(u=a[f]){var s=Jr(u,n);$r(u,t,e,f,a,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new oi(r,this._parents,t,e)},call:ci.call,nodes:ci.nodes,node:ci.node,size:ci.size,empty:ci.empty,each:ci.each,on:function(t,n){var e=this._id;return arguments.length<2?Jr(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?Zr:Qr;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}(e,t,n))},attr:function(t,n){var e=vt(t),r="transform"===e?rr:ni;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttributeNS(t.space,t.local))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttribute(t))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttribute(t)}})(e,r,ti(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}:function(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}})(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=vt(t);return this.tween(e,(r.local?function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,i)),e}return i._value=n,i}:function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,i)),e}return i._value=n,i})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?er:ni;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Nt(this,t),u=(this.style.removeProperty(t),Nt(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,ri(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=Nt(this,t),a=e(this),c=a+"";return null==a&&(this.style.removeProperty(t),c=a=Nt(this,t)),u===c?null:u===r&&c===i?o:(i=c,o=n(r=u,a))}}(t,r,ti(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,a="end."+u;return function(){var c=Qr(this,t),f=c.on,s=null==c.value[u]?o||(o=ri(n)):void 0;f===e&&i===s||(r=(e=f).copy()).on(a,i=s),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=Nt(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,n,e){return function(r){this.style.setProperty(t,n(r),e)}}(t,o,e)),r}return o._value=n,o}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(ti(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Jr(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=Qr(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Qr(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,f=i.length;c<f;++c)if(i[c].name===n){i[c]=a;break}c===f&&i.push(a)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Zr(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Zr(this,t).delay=n}})(n,t)):Jr(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Qr(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Qr(this,t).duration=n}})(n,t)):Jr(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){Qr(this,t).ease=n}}(n,t)):Jr(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise(function(o,u){var a={value:u},c={value:function(){0==--i&&o()}};e.each(function(){var e=Qr(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(c)),e.on=n})})}};var yi=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),gi=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),_i=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),bi=Math.PI,mi=bi/2;function xi(t){return 1-Math.cos(t*mi)}function wi(t){return Math.sin(t*mi)}function Mi(t){return(1-Math.cos(bi*t))/2}function Ei(t){return Math.pow(2,10*t-10)}function Si(t){return 1-Math.pow(2,-10*t)}function Ti(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function Ai(t){return 1-Math.sqrt(1-t*t)}function ki(t){return Math.sqrt(1- --t*t)}function Ni(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var Ci=4/11,Pi=6/11,Li=8/11,Oi=.75,Ri=9/11,Di=10/11,zi=.9375,ji=21/22,Ui=63/64,qi=1/Ci/Ci;function Ii(t){return 1-Fi(1-t)}function Fi(t){return(t=+t)<Ci?qi*t*t:t<Li?qi*(t-=Pi)*t+Oi:t<Di?qi*(t-=Ri)*t+zi:qi*(t-=ji)*t+Ui}function Bi(t){return((t*=2)<=1?1-Fi(1-t):Fi(t-1)+1)/2}var Yi=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(1.70158),Hi=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),Gi=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158),Xi=2*Math.PI,Vi=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Xi);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*Xi)},i.period=function(e){return t(n,e)},i}(1,.3),Wi=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Xi);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*Xi)},i.period=function(e){return t(n,e)},i}(1,.3),$i=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Xi);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*Xi)},i.period=function(e){return t(n,e)},i}(1,.3),Zi={time:null,delay:0,duration:250,ease:vi};function Qi(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Zi.time=Cr(),Zi;return e}tn.prototype.interrupt=function(t){return this.each(function(){Kr(this,t)})},tn.prototype.transition=function(t){var n,e;t instanceof oi?(n=t._id,t=t._name):(n=ai(),(e=Zi).time=Cr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,f=0;f<c;++f)(u=a[f])&&$r(u,t,n,f,a,e||Qi(u,n));return new oi(r,this._parents,t,n)};var Ji=[null],Ki=function(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>Yr&&e.name===n)return new oi([[t]],Ji,n,+r);return null},to=function(t){return function(){return t}},no=function(t,n,e){this.target=t,this.type=n,this.selection=e};function eo(){Ht.stopImmediatePropagation()}var ro=function(){Ht.preventDefault(),Ht.stopImmediatePropagation()},io={name:"drag"},oo={name:"space"},uo={name:"handle"},ao={name:"center"},co={name:"x",handles:["e","w"].map(go),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},fo={name:"y",handles:["n","s"].map(go),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},so={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(go),input:function(t){return t},output:function(t){return t}},lo={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},ho={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},po={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},vo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},yo={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function go(t){return{type:t}}function _o(){return!Ht.button}function bo(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function mo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function xo(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function wo(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Mo(){return To(co)}function Eo(){return To(fo)}var So=function(){return To(so)};function To(t){var n,e=bo,r=_o,i=ht(u,"start","brush","end"),o=6;function u(n){var e=n.property("__brush",l).selectAll(".overlay").data([go("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",lo.overlay).merge(e).each(function(){var t=mo(this).extent;nn(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),n.selectAll(".selection").data([go("selection")]).enter().append("rect").attr("class","selection").attr("cursor",lo.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return lo[t.type]}),n.each(a).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",s)}function a(){var t=nn(this),n=mo(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-o/2:n[0][0]-o/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-o/2:n[0][1]-o/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+o:o}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+o:o})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,n){return t.__brush.emitter||new f(t,n)}function f(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function s(){if(Ht.touches){if(Ht.changedTouches.length<Ht.touches.length)return ro()}else if(n)return;if(r.apply(this,arguments)){var e,i,o,u,f,s,l,h,d,p,v,y,g,_=this,b=Ht.target.__data__.type,m="selection"===(Ht.metaKey?b="overlay":b)?io:Ht.altKey?ao:uo,x=t===fo?null:vo[b],w=t===co?null:yo[b],M=mo(_),E=M.extent,S=M.selection,T=E[0][0],A=E[0][1],k=E[1][0],N=E[1][1],C=x&&w&&Ht.shiftKey,P=fn(_),L=P,O=c(_,arguments).beforestart();"overlay"===b?M.selection=S=[[e=t===fo?T:P[0],o=t===co?A:P[1]],[f=t===fo?k:e,l=t===co?N:o]]:(e=S[0][0],o=S[0][1],f=S[1][0],l=S[1][1]),i=e,u=o,s=f,h=l;var R=nn(_).attr("pointer-events","none"),D=R.selectAll(".overlay").attr("cursor",lo[b]);if(Ht.touches)R.on("touchmove.brush",j,!0).on("touchend.brush touchcancel.brush",q,!0);else{var z=nn(Ht.view).on("keydown.brush",function(){switch(Ht.keyCode){case 16:C=x&&w;break;case 18:m===uo&&(x&&(f=s-d*x,e=i+d*x),w&&(l=h-p*w,o=u+p*w),m=ao,U());break;case 32:m!==uo&&m!==ao||(x<0?f=s-d:x>0&&(e=i-d),w<0?l=h-p:w>0&&(o=u-p),m=oo,D.attr("cursor",lo.selection),U());break;default:return}ro()},!0).on("keyup.brush",function(){switch(Ht.keyCode){case 16:C&&(y=g=C=!1,U());break;case 18:m===ao&&(x<0?f=s:x>0&&(e=i),w<0?l=h:w>0&&(o=u),m=uo,U());break;case 32:m===oo&&(Ht.altKey?(x&&(f=s-d*x,e=i+d*x),w&&(l=h-p*w,o=u+p*w),m=ao):(x<0?f=s:x>0&&(e=i),w<0?l=h:w>0&&(o=u),m=uo),D.attr("cursor",lo[b]),U());break;default:return}ro()},!0).on("mousemove.brush",j,!0).on("mouseup.brush",q,!0);vn(Ht.view)}eo(),Kr(_),a.call(_),O.start()}function j(){var t=fn(_);!C||y||g||(Math.abs(t[0]-L[0])>Math.abs(t[1]-L[1])?g=!0:y=!0),L=t,v=!0,ro(),U()}function U(){var t;switch(d=L[0]-P[0],p=L[1]-P[1],m){case oo:case io:x&&(d=Math.max(T-e,Math.min(k-f,d)),i=e+d,s=f+d),w&&(p=Math.max(A-o,Math.min(N-l,p)),u=o+p,h=l+p);break;case uo:x<0?(d=Math.max(T-e,Math.min(k-e,d)),i=e+d,s=f):x>0&&(d=Math.max(T-f,Math.min(k-f,d)),i=e,s=f+d),w<0?(p=Math.max(A-o,Math.min(N-o,p)),u=o+p,h=l):w>0&&(p=Math.max(A-l,Math.min(N-l,p)),u=o,h=l+p);break;case ao:x&&(i=Math.max(T,Math.min(k,e-d*x)),s=Math.max(T,Math.min(k,f+d*x))),w&&(u=Math.max(A,Math.min(N,o-p*w)),h=Math.max(A,Math.min(N,l+p*w)))}s<i&&(x*=-1,t=e,e=f,f=t,t=i,i=s,s=t,b in ho&&D.attr("cursor",lo[b=ho[b]])),h<u&&(w*=-1,t=o,o=l,l=t,t=u,u=h,h=t,b in po&&D.attr("cursor",lo[b=po[b]])),M.selection&&(S=M.selection),y&&(i=S[0][0],s=S[1][0]),g&&(u=S[0][1],h=S[1][1]),S[0][0]===i&&S[0][1]===u&&S[1][0]===s&&S[1][1]===h||(M.selection=[[i,u],[s,h]],a.call(_),O.brush())}function q(){if(eo(),Ht.touches){if(Ht.touches.length)return;n&&clearTimeout(n),n=setTimeout(function(){n=null},500),R.on("touchmove.brush touchend.brush touchcancel.brush",null)}else yn(Ht.view,v),z.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);R.attr("pointer-events","all"),D.attr("cursor",lo.overlay),M.selection&&(S=M.selection),xo(S)&&(M.selection=null,a.call(_)),O.end()}}function l(){var n=this.__brush||{selection:null};return n.extent=e.apply(this,arguments),n.dim=t,n}return u.move=function(n,e){n.selection?n.on("start.brush",function(){c(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){c(this,arguments).end()}).tween("brush",function(){var n=this,r=n.__brush,i=c(n,arguments),o=r.selection,u=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),f=We(o,u);function s(t){r.selection=1===t&&xo(u)?null:f(t),a.call(n),i.brush()}return o&&u?s:s(1)}):n.each(function(){var n=arguments,r=this.__brush,i=t.input("function"==typeof e?e.apply(this,n):e,r.extent),o=c(this,n).beforestart();Kr(this),r.selection=null==i||xo(i)?null:i,a.call(this),o.start().brush().end()})},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){$t(new no(u,n,t.output(this.state.selection)),i.apply,i,[n,this.that,this.args])}},u.extent=function(t){return arguments.length?(e="function"==typeof t?t:to([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),u):e},u.filter=function(t){return arguments.length?(r="function"==typeof t?t:to(!!t),u):r},u.handleSize=function(t){return arguments.length?(o=+t,u):o},u.on=function(){var t=i.on.apply(i,arguments);return t===i?u:t},u}var Ao=Math.cos,ko=Math.sin,No=Math.PI,Co=No/2,Po=2*No,Lo=Math.max;var Oo=function(){var t=0,n=null,e=null,r=null;function i(i){var o,u,a,c,f,s,l=i.length,h=[],d=w(l),p=[],v=[],y=v.groups=new Array(l),g=new Array(l*l);for(o=0,f=-1;++f<l;){for(u=0,s=-1;++s<l;)u+=i[f][s];h.push(u),p.push(w(l)),o+=u}for(n&&d.sort(function(t,e){return n(h[t],h[e])}),e&&p.forEach(function(t,n){t.sort(function(t,r){return e(i[n][t],i[n][r])})}),c=(o=Lo(0,Po-t*l)/o)?t:Po/l,u=0,f=-1;++f<l;){for(a=u,s=-1;++s<l;){var _=d[f],b=p[_][s],m=i[_][b],x=u,M=u+=m*o;g[b*l+_]={index:_,subindex:b,startAngle:x,endAngle:M,value:m}}y[_]={index:_,startAngle:a,endAngle:u,value:h[_]},u+=c}for(f=-1;++f<l;)for(s=f-1;++s<l;){var E=g[s*l+f],S=g[f*l+s];(E.value||S.value)&&v.push(E.value<S.value?{source:S,target:E}:{source:E,target:S})}return r?v.sort(r):v}return i.padAngle=function(n){return arguments.length?(t=Lo(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(n=t,r=function(t,e){return n(t.source.value+t.target.value,e.source.value+e.target.value)})._=t,i):r&&r._;var n},i},Ro=Array.prototype.slice,Do=function(t){return function(){return t}},zo=Math.PI,jo=2*zo,Uo=jo-1e-6;function qo(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Io(){return new qo}qo.prototype=Io.prototype={constructor:qo,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,c=r-n,f=o-t,s=u-n,l=f*f+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(s*a-c*f)>1e-6&&i){var h=e-o,d=r-u,p=a*a+c*c,v=h*h+d*d,y=Math.sqrt(p),g=Math.sqrt(l),_=i*Math.tan((zo-Math.acos((p+l-v)/(2*y*g)))/2),b=_/g,m=_/y;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*f)+","+(n+b*s)),this._+="A"+i+","+i+",0,0,"+ +(s*h>f*d)+","+(this._x1=t+m*a)+","+(this._y1=n+m*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),c=t+u,f=n+a,s=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+f:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+c+","+f),e&&(l<0&&(l=l%jo+jo),l>Uo?this._+="A"+e+","+e+",0,1,"+s+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=f):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=zo)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Fo=Io;function Bo(t){return t.source}function Yo(t){return t.target}function Ho(t){return t.radius}function Go(t){return t.startAngle}function Xo(t){return t.endAngle}var Vo=function(){var t=Bo,n=Yo,e=Ho,r=Go,i=Xo,o=null;function u(){var u,a=Ro.call(arguments),c=t.apply(this,a),f=n.apply(this,a),s=+e.apply(this,(a[0]=c,a)),l=r.apply(this,a)-Co,h=i.apply(this,a)-Co,d=s*Ao(l),p=s*ko(l),v=+e.apply(this,(a[0]=f,a)),y=r.apply(this,a)-Co,g=i.apply(this,a)-Co;if(o||(o=u=Fo()),o.moveTo(d,p),o.arc(0,0,s,l,h),l===y&&h===g||(o.quadraticCurveTo(0,0,v*Ao(y),v*ko(y)),o.arc(0,0,v,y,g)),o.quadraticCurveTo(0,0,d,p),o.closePath(),u)return o=null,u+""||null}return u.radius=function(t){return arguments.length?(e="function"==typeof t?t:Do(+t),u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Do(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Do(+t),u):i},u.source=function(n){return arguments.length?(t=n,u):t},u.target=function(t){return arguments.length?(n=t,u):n},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u};function Wo(){}function $o(t,n){var e=new Wo;if(t instanceof Wo)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}Wo.prototype=$o.prototype={constructor:Wo,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Zo=$o,Qo=function(){var t,n,e,r=[],i=[];function o(e,i,u,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,f,s,l=-1,h=e.length,d=r[i++],p=Zo(),v=u();++l<h;)(s=p.get(c=d(f=e[l])+""))?s.push(f):p.set(c,[f]);return p.each(function(t,n){a(v,n,o(t,i,u,a))}),v}return e={object:function(t){return o(t,0,Jo,Ko)},map:function(t){return o(t,0,tu,nu)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var u,a=i[o-1];return null!=n&&o>=r.length?u=e.entries():(u=[],e.each(function(n,e){u.push({key:e,values:t(n,o)})})),null!=a?u.sort(function(t,n){return a(t.key,n.key)}):u}(o(t,0,tu,nu),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}};function Jo(){return{}}function Ko(t,n,e){t[n]=e}function tu(){return Zo()}function nu(t,n,e){t.set(n,e)}function eu(){}var ru=Zo.prototype;function iu(t,n){var e=new eu;if(t instanceof eu)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}eu.prototype=iu.prototype={constructor:eu,has:ru.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ru.remove,clear:ru.clear,values:ru.keys,size:ru.size,empty:ru.empty,each:ru.each};var ou=iu,uu=function(t){var n=[];for(var e in t)n.push(e);return n},au=function(t){var n=[];for(var e in t)n.push(t[e]);return n},cu=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},fu=Array.prototype.slice,su=function(t,n){return t-n},lu=function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r},hu=function(t){return function(){return t}},du=function(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=pu(t,n[r]))return e;return 0};function pu(t,n){for(var e=n[0],r=n[1],i=-1,o=0,u=t.length,a=u-1;o<u;a=o++){var c=t[o],f=c[0],s=c[1],l=t[a],h=l[0],d=l[1];if(vu(c,l,n))return 0;s>r!=d>r&&e<(h-f)*(r-s)/(d-s)+f&&(i=-i)}return i}function vu(t,n,e){var r,i,o,u;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&(i=t[r=+(t[0]===n[0])],o=e[r],u=n[r],i<=o&&o<=u||u<=o&&o<=i)}var yu=function(){},gu=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],_u=function(){var t=1,n=1,e=N,r=a;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(su);else{var r=y(t),i=r[0],u=r[1];n=k(i,u,n),n=w(Math.floor(i/n)*n,Math.floor(u/n)*n,n)}return n.map(function(n){return o(t,n)})}function o(e,i){var o=[],a=[];return function(e,r,i){var o,a,c,f,s,l,h=new Array,d=new Array;o=a=-1,f=e[0]>=r,gu[f<<1].forEach(p);for(;++o<t-1;)c=f,f=e[o+1]>=r,gu[c|f<<1].forEach(p);gu[f<<0].forEach(p);for(;++a<n-1;){for(o=-1,f=e[a*t+t]>=r,s=e[a*t]>=r,gu[f<<1|s<<2].forEach(p);++o<t-1;)c=f,f=e[a*t+t+o+1]>=r,l=s,s=e[a*t+o+1]>=r,gu[c|f<<1|s<<2|l<<3].forEach(p);gu[f|s<<3].forEach(p)}o=-1,s=e[a*t]>=r,gu[s<<2].forEach(p);for(;++o<t-1;)l=s,s=e[a*t+o+1]>=r,gu[s<<2|l<<3].forEach(p);function p(t){var n,e,r=[t[0][0]+o,t[0][1]+a],c=[t[1][0]+o,t[1][1]+a],f=u(r),s=u(c);(n=d[f])?(e=h[s])?(delete d[n.end],delete h[e.start],n===e?(n.ring.push(c),i(n.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[n.end],n.ring.push(c),d[n.end=s]=n):(n=h[s])?(e=d[f])?(delete h[n.start],delete d[e.end],n===e?(n.ring.push(c),i(n.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[n.start],n.ring.unshift(r),h[n.start=f]=n):h[f]=d[s]={start:f,end:s,ring:[r,c]}}gu[s<<3].forEach(p)}(e,i,function(t){r(t,e,i),lu(t)>0?o.push([t]):a.push(t)}),a.forEach(function(t){for(var n,e=0,r=o.length;e<r;++e)if(-1!==du((n=o[e])[0],t))return void n.push(t)}),{type:"MultiPolygon",value:i,coordinates:o}}function u(n){return 2*n[0]+n[1]*(t+1)*4}function a(e,r,i){e.forEach(function(e){var o,u=e[0],a=e[1],c=0|u,f=0|a,s=r[f*t+c];u>0&&u<t&&c===u&&(o=r[f*t+c-1],e[0]=u+(i-o)/(s-o)-.5),a>0&&a<n&&f===a&&(o=r[(f-1)*t+c],e[1]=a+(i-o)/(s-o)-.5)})}return i.contour=o,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.ceil(e[0]),o=Math.ceil(e[1]);if(!(r>0&&o>0))throw new Error("invalid size");return t=r,n=o,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?hu(fu.call(t)):hu(t),i):e},i.smooth=function(t){return arguments.length?(r=t?a:yu,i):r===a},i};function bu(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<i;++u)for(var a=0,c=0;a<r+e;++a)a<r&&(c+=t.data[a+u*r]),a>=e&&(a>=o&&(c-=t.data[a-o+u*r]),n.data[a-e+u*r]=c/Math.min(a+1,r-1+o-a,o))}function mu(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<r;++u)for(var a=0,c=0;a<i+e;++a)a<i&&(c+=t.data[u+a*r]),a>=e&&(a>=o&&(c-=t.data[u+(a-o)*r]),n.data[u+(a-e)*r]=c/Math.min(a+1,i-1+o-a,o))}function xu(t){return t[0]}function wu(t){return t[1]}function Mu(){return 1}var Eu=function(){var t=xu,n=wu,e=Mu,r=960,i=500,o=20,u=2,a=3*o,c=r+2*a>>u,f=i+2*a>>u,s=hu(20);function l(r){var i=new Float32Array(c*f),l=new Float32Array(c*f);r.forEach(function(r,o,s){var l=+t(r,o,s)+a>>u,h=+n(r,o,s)+a>>u,d=+e(r,o,s);l>=0&&l<c&&h>=0&&h<f&&(i[l+h*c]+=d)}),bu({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),mu({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u),bu({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),mu({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u),bu({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),mu({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u);var d=s(i);if(!Array.isArray(d)){var p=R(i);d=k(0,p,d),(d=w(0,Math.floor(p/d)*d,d)).shift()}return _u().thresholds(d).size([c,f])(i).map(h)}function h(t){return t.value*=Math.pow(2,-2*u),t.coordinates.forEach(d),t}function d(t){t.forEach(p)}function p(t){t.forEach(v)}function v(t){t[0]=t[0]*Math.pow(2,u)-a,t[1]=t[1]*Math.pow(2,u)-a}function y(){return c=r+2*(a=3*o)>>u,f=i+2*a>>u,l}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:hu(+n),l):t},l.y=function(t){return arguments.length?(n="function"==typeof t?t:hu(+t),l):n},l.weight=function(t){return arguments.length?(e="function"==typeof t?t:hu(+t),l):e},l.size=function(t){if(!arguments.length)return[r,i];var n=Math.ceil(t[0]),e=Math.ceil(t[1]);if(!(n>=0||n>=0))throw new Error("invalid size");return r=n,i=e,y()},l.cellSize=function(t){if(!arguments.length)return 1<<u;if(!((t=+t)>=1))throw new Error("invalid cell size");return u=Math.floor(Math.log(t)/Math.LN2),y()},l.thresholds=function(t){return arguments.length?(s="function"==typeof t?t:Array.isArray(t)?hu(fu.call(t)):hu(t),l):s},l.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=Math.round((Math.sqrt(4*t*t+1)-1)/2),y()},l},Su={},Tu={},Au=34,ku=10,Nu=13;function Cu(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function Pu(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}function Lu(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function Ou(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+Lu(-n,6):n>9999?"+"+Lu(n,6):Lu(n,4))+"-"+Lu(t.getUTCMonth()+1,2)+"-"+Lu(t.getUTCDate(),2)+(o?"T"+Lu(e,2)+":"+Lu(r,2)+":"+Lu(i,2)+"."+Lu(o,3)+"Z":i?"T"+Lu(e,2)+":"+Lu(r,2)+":"+Lu(i,2)+"Z":r||e?"T"+Lu(e,2)+":"+Lu(r,2)+"Z":"")}var Ru=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,c=o<=0,f=!1;function s(){if(c)return Tu;if(f)return f=!1,Su;var n,r,i=u;if(t.charCodeAt(i)===Au){for(;u++<o&&t.charCodeAt(u)!==Au||t.charCodeAt(++u)===Au;);return(n=u)>=o?c=!0:(r=t.charCodeAt(u++))===ku?f=!0:r===Nu&&(f=!0,t.charCodeAt(u)===ku&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if((r=t.charCodeAt(n=u++))===ku)f=!0;else if(r===Nu)f=!0,t.charCodeAt(u)===ku&&++u;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===ku&&--o,t.charCodeAt(o-1)===Nu&&--o;(r=s())!==Tu;){for(var l=[];r!==Su&&r!==Tu;)l.push(r),r=s();n&&null==(l=n(l,a++))||i.push(l)}return i}function i(n,e){return n.map(function(n){return e.map(function(t){return u(n[t])}).join(t)})}function o(n){return n.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?Ou(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=Cu(t);return function(r,i){return n(e(r),i,t)}}(t,n):Cu(t)});return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=Pu(n)),[e.map(u).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=Pu(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},Du=Ru(","),zu=Du.parse,ju=Du.parseRows,Uu=Du.format,qu=Du.formatBody,Iu=Du.formatRows,Fu=Ru("\t"),Bu=Fu.parse,Yu=Fu.parseRows,Hu=Fu.format,Gu=Fu.formatBody,Xu=Fu.formatRows;function Vu(t){for(var n in t){var e,r=t[n].trim();if(r)if("true"===r)r=!0;else if("false"===r)r=!1;else if("NaN"===r)r=NaN;else if(isNaN(e=+r)){if(!/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/.test(r))continue;r=new Date(r)}else r=e;else r=null;t[n]=r}return t}function Wu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}var $u=function(t,n){return fetch(t,n).then(Wu)};function Zu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}var Qu=function(t,n){return fetch(t,n).then(Zu)};function Ju(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Ku=function(t,n){return fetch(t,n).then(Ju)};function ta(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Ku(n,e).then(function(n){return t(n,r)})}}function na(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=Ru(t);return Ku(n,e).then(function(t){return i.parse(t,r)})}var ea=ta(zu),ra=ta(Bu),ia=function(t,n){return new Promise(function(e,r){var i=new Image;for(var o in n)i[o]=n[o];i.onerror=r,i.onload=function(){e(i)},i.src=t})};function oa(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var ua=function(t,n){return fetch(t,n).then(oa)};function aa(t){return function(n,e){return Ku(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}var ca=aa("application/xml"),fa=aa("text/html"),sa=aa("image/svg+xml"),la=function(t,n){var e;function r(){var r,i,o=e.length,u=0,a=0;for(r=0;r<o;++r)u+=(i=e[r]).x,a+=i.y;for(u=u/o-t,a=a/o-n,r=0;r<o;++r)(i=e[r]).x-=u,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r},ha=function(t){return function(){return t}},da=function(){return 1e-6*(Math.random()-.5)};function pa(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,c,f,s,l,h,d=t._root,p={data:r},v=t._x0,y=t._y0,g=t._x1,_=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((f=n>=(o=(v+g)/2))?v=o:g=o,(s=e>=(u=(y+_)/2))?y=u:_=u,i=d,!(d=d[l=s<<1|f]))return i[l]=p,t;if(a=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===a&&e===c)return p.next=d,i?i[l]=p:t._root=p,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(f=n>=(o=(v+g)/2))?v=o:g=o,(s=e>=(u=(y+_)/2))?y=u:_=u}while((l=s<<1|f)==(h=(c>=u)<<1|a>=o));return i[h]=d,i[l]=p,t}var va=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function ya(t){return t[0]}function ga(t){return t[1]}function _a(t,n,e){var r=new ba(null==n?ya:n,null==e?ga:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function ba(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function ma(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var xa=_a.prototype=ba.prototype;function wa(t){return t.x+t.vx}function Ma(t){return t.y+t.vy}xa.copy=function(){var t,n,e=new ba(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=ma(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=ma(n));return e},xa.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return pa(this.cover(n,e),n,e,t)},xa.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),c=1/0,f=1/0,s=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<c&&(c=r),r>s&&(s=r),i<f&&(f=i),i>l&&(l=i));if(c>s||f>l)return this;for(this.cover(c,f).cover(s,l),e=0;e<o;++e)pa(this,u[e],a[e],t[e]);return this},xa.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var u,a,c=i-e,f=this._root;e>t||t>=i||r>n||n>=o;)switch(a=(n<r)<<1|t<e,(u=new Array(4))[a]=f,f=u,c*=2,a){case 0:i=e+c,o=r+c;break;case 1:e=i-c,o=r+c;break;case 2:i=e+c,r=o-c;break;case 3:e=i-c,r=o-c}this._root&&this._root.length&&(this._root=f)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},xa.data=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},xa.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},xa.find=function(t,n,e){var r,i,o,u,a,c,f,s=this._x0,l=this._y0,h=this._x1,d=this._y1,p=[],v=this._root;for(v&&p.push(new va(v,s,l,h,d)),null==e?e=1/0:(s=t-e,l=n-e,h=t+e,d=n+e,e*=e);c=p.pop();)if(!(!(v=c.node)||(i=c.x0)>h||(o=c.y0)>d||(u=c.x1)<s||(a=c.y1)<l))if(v.length){var y=(i+u)/2,g=(o+a)/2;p.push(new va(v[3],y,g,u,a),new va(v[2],i,g,y,a),new va(v[1],y,o,u,g),new va(v[0],i,o,y,g)),(f=(n>=g)<<1|t>=y)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-f],p[p.length-1-f]=c)}else{var _=t-+this._x.call(null,v.data),b=n-+this._y.call(null,v.data),m=_*_+b*b;if(m<e){var x=Math.sqrt(e=m);s=t-x,l=n-x,h=t+x,d=n+x,r=v.data}}return r},xa.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,c,f,s,l,h,d=this._root,p=this._x0,v=this._y0,y=this._x1,g=this._y1;if(!d)return this;if(d.length)for(;;){if((f=o>=(a=(p+y)/2))?p=a:y=a,(s=u>=(c=(v+g)/2))?v=c:g=c,n=d,!(d=d[l=s<<1|f]))return this;if(!d.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},xa.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},xa.root=function(){return this._root},xa.size=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},xa.visit=function(t){var n,e,r,i,o,u,a=[],c=this._root;for(c&&a.push(new va(c,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&c.length){var f=(r+o)/2,s=(i+u)/2;(e=c[3])&&a.push(new va(e,f,s,o,u)),(e=c[2])&&a.push(new va(e,r,s,f,u)),(e=c[1])&&a.push(new va(e,f,i,o,s)),(e=c[0])&&a.push(new va(e,r,i,f,s))}return this},xa.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new va(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,c=n.x1,f=n.y1,s=(u+c)/2,l=(a+f)/2;(o=i[0])&&e.push(new va(o,u,a,s,l)),(o=i[1])&&e.push(new va(o,s,a,c,l)),(o=i[2])&&e.push(new va(o,u,l,s,f)),(o=i[3])&&e.push(new va(o,s,l,c,f))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},xa.x=function(t){return arguments.length?(this._x=t,this):this._x},xa.y=function(t){return arguments.length?(this._y=t,this):this._y};var Ea=function(t){var n,e,r=1,i=1;function o(){for(var t,o,a,c,f,s,l,h=n.length,d=0;d<i;++d)for(o=_a(n,wa,Ma).visitAfter(u),t=0;t<h;++t)a=n[t],s=e[a.index],l=s*s,c=a.x+a.vx,f=a.y+a.vy,o.visit(p);function p(t,n,e,i,o){var u=t.data,h=t.r,d=s+h;if(!u)return n>c+d||i<c-d||e>f+d||o<f-d;if(u.index>a.index){var p=c-u.x-u.vx,v=f-u.y-u.vy,y=p*p+v*v;y<d*d&&(0===p&&(y+=(p=da())*p),0===v&&(y+=(v=da())*v),y=(d-(y=Math.sqrt(y)))/y*r,a.vx+=(p*=y)*(d=(h*=h)/(l+h)),a.vy+=(v*=y)*d,u.vx-=p*(d=1-d),u.vy-=v*d)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=ha(null==t?1:+t)),o.initialize=function(t){n=t,a()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:ha(+n),a(),o):t},o};function Sa(t){return t.index}function Ta(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}var Aa=function(t){var n,e,r,i,o,u=Sa,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=ha(30),f=1;function s(r){for(var i=0,u=t.length;i<f;++i)for(var a,c,s,l,h,d,p,v=0;v<u;++v)c=(a=t[v]).source,l=(s=a.target).x+s.vx-c.x-c.vx||da(),h=s.y+s.vy-c.y-c.vy||da(),l*=d=((d=Math.sqrt(l*l+h*h))-e[v])/d*r*n[v],h*=d,s.vx-=l*(p=o[v]),s.vy-=h*p,c.vx+=l*(p=1-p),c.vy+=h*p}function l(){if(r){var a,c,f=r.length,s=t.length,l=Zo(r,u);for(a=0,i=new Array(f);a<s;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=Ta(l,c.source)),"object"!=typeof c.target&&(c.target=Ta(l,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,o=new Array(s);a<s;++a)c=t[a],o[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(s),h(),e=new Array(s),d()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function d(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),s.initialize=function(t){r=t,l()},s.links=function(n){return arguments.length?(t=n,l(),s):t},s.id=function(t){return arguments.length?(u=t,s):u},s.iterations=function(t){return arguments.length?(f=+t,s):f},s.strength=function(t){return arguments.length?(a="function"==typeof t?t:ha(+t),h(),s):a},s.distance=function(t){return arguments.length?(c="function"==typeof t?t:ha(+t),d(),s):c},s};function ka(t){return t.x}function Na(t){return t.y}var Ca=10,Pa=Math.PI*(3-Math.sqrt(5)),La=function(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,u=.6,a=Zo(),c=Or(s),f=ht("tick","end");function s(){l(),f.call("tick",n),e<r&&(c.stop(),f.call("end",n))}function l(r){var c,f,s=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(e+=(o-e)*i,a.each(function(t){t(e)}),c=0;c<s;++c)null==(f=t[c]).fx?f.x+=f.vx*=u:(f.x=f.fx,f.vx=0),null==f.fy?f.y+=f.vy*=u:(f.y=f.fy,f.vy=0);return n}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,null!=n.fx&&(n.x=n.fx),null!=n.fy&&(n.y=n.fy),isNaN(n.x)||isNaN(n.y)){var i=Ca*Math.sqrt(e),o=e*Pa;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function d(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:l,restart:function(){return c.restart(s),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),a.each(d),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(u=1-t,n):1-u},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,d(e)),n):a.get(t)},find:function(n,e,r){var i,o,u,a,c,f=0,s=t.length;for(null==r?r=1/0:r*=r,f=0;f<s;++f)(u=(i=n-(a=t[f]).x)*i+(o=e-a.y)*o)<r&&(c=a,r=u);return c},on:function(t,e){return arguments.length>1?(f.on(t,e),n):f.on(t)}}},Oa=function(){var t,n,e,r,i=ha(-30),o=1,u=1/0,a=.81;function c(r){var i,o=t.length,u=_a(t,ka,Na).visitAfter(s);for(e=r,i=0;i<o;++i)n=t[i],u.visit(l)}function f(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function s(t){var n,e,i,o,u,a=0,c=0;if(t.length){for(i=o=u=0;u<4;++u)(n=t[u])&&(e=Math.abs(n.value))&&(a+=n.value,c+=e,i+=e*n.x,o+=e*n.y);t.x=i/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function l(t,i,c,f){if(!t.value)return!0;var s=t.x-n.x,l=t.y-n.y,h=f-i,d=s*s+l*l;if(h*h/a<d)return d<u&&(0===s&&(d+=(s=da())*s),0===l&&(d+=(l=da())*l),d<o&&(d=Math.sqrt(o*d)),n.vx+=s*t.value*e/d,n.vy+=l*t.value*e/d),!0;if(!(t.length||d>=u)){(t.data!==n||t.next)&&(0===s&&(d+=(s=da())*s),0===l&&(d+=(l=da())*l),d<o&&(d=Math.sqrt(o*d)));do{t.data!==n&&(h=r[t.data.index]*e/d,n.vx+=s*h,n.vy+=l*h)}while(t=t.next)}}return c.initialize=function(n){t=n,f()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:ha(+t),f(),c):i},c.distanceMin=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.distanceMax=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c.theta=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c},Ra=function(t,n,e){var r,i,o,u=ha(.1);function a(t){for(var u=0,a=r.length;u<a;++u){var c=r[u],f=c.x-n||1e-6,s=c.y-e||1e-6,l=Math.sqrt(f*f+s*s),h=(o[u]-l)*i[u]*t/l;c.vx+=f*h,c.vy+=s*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+u(r[n],n,r)}}return"function"!=typeof t&&(t=ha(+t)),null==n&&(n=0),null==e&&(e=0),a.initialize=function(t){r=t,c()},a.strength=function(t){return arguments.length?(u="function"==typeof t?t:ha(+t),c(),a):u},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:ha(+n),c(),a):t},a.x=function(t){return arguments.length?(n=+t,a):n},a.y=function(t){return arguments.length?(e=+t,a):e},a},Da=function(t){var n,e,r,i=ha(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=ha(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:ha(+t),u(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:ha(+n),u(),o):t},o},za=function(t){var n,e,r,i=ha(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=ha(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:ha(+t),u(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:ha(+n),u(),o):t},o},ja=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},Ua=function(t){return(t=ja(Math.abs(t)))?t[1]:NaN},qa=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Ia(t){return new Fa(t)}function Fa(t){if(!(n=qa.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}Ia.prototype=Fa.prototype,Fa.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Ba,Ya,Ha,Ga,Xa=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},Va=function(t,n){var e=ja(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Wa={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Va(100*t,n)},r:Va,s:function(t,n){var e=ja(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(Ba=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+ja(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},$a=function(t){return t},Za=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Qa=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}):$a,i=t.currency,o=t.decimal,u=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):$a,a=t.percent||"%";function c(t){var n=(t=Ia(t)).fill,e=t.align,c=t.sign,f=t.symbol,s=t.zero,l=t.width,h=t.comma,d=t.precision,p=t.trim,v=t.type;"n"===v?(h=!0,v="g"):Wa[v]||(null==d&&(d=12),p=!0,v="g"),(s||"0"===n&&"="===e)&&(s=!0,n="0",e="=");var y="$"===f?i[0]:"#"===f&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",g="$"===f?i[1]:/[%p]/.test(v)?a:"",_=Wa[v],b=/[defgprs%]/.test(v);function m(t){var i,a,f,m=y,x=g;if("c"===v)x=_(t)+x,t="";else{var w=(t=+t)<0;if(t=_(Math.abs(t),d),p&&(t=Xa(t)),w&&0==+t&&(w=!1),m=(w?"("===c?c:"-":"-"===c||"("===c?"":c)+m,x=("s"===v?Za[8+Ba/3]:"")+x+(w&&"("===c?")":""),b)for(i=-1,a=t.length;++i<a;)if(48>(f=t.charCodeAt(i))||f>57){x=(46===f?o+t.slice(i+1):t.slice(i))+x,t=t.slice(0,i);break}}h&&!s&&(t=r(t,1/0));var M=m.length+t.length+x.length,E=M<l?new Array(l-M+1).join(n):"";switch(h&&s&&(t=r(E+t,E.length?l-x.length:1/0),E=""),e){case"<":t=m+t+x+E;break;case"=":t=m+E+t+x;break;case"^":t=E.slice(0,M=E.length>>1)+m+t+x+E.slice(M);break;default:t=E+m+t+x}return u(t)}return d=null==d?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),m.toString=function(){return t+""},m}return{format:c,formatPrefix:function(t,n){var e=c(((t=Ia(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Ua(n)/3))),i=Math.pow(10,-r),o=Za[8+r/3];return function(t){return e(i*t)+o}}}};function Ja(t){return Ya=Qa(t),Ha=Ya.format,Ga=Ya.formatPrefix,Ya}Ja({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Ka=function(t){return Math.max(0,-Ua(Math.abs(t)))},tc=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ua(n)/3)))-Ua(Math.abs(t)))},nc=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Ua(n)-Ua(t))+1},ec=function(){return new rc};function rc(){this.reset()}rc.prototype={constructor:rc,reset:function(){this.s=this.t=0},add:function(t){oc(ic,t,this.t),oc(this,ic.s,this.s),this.s?this.t+=ic.t:this.s=ic.t},valueOf:function(){return this.s}};var ic=new rc;function oc(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var uc=1e-6,ac=Math.PI,cc=ac/2,fc=ac/4,sc=2*ac,lc=180/ac,hc=ac/180,dc=Math.abs,pc=Math.atan,vc=Math.atan2,yc=Math.cos,gc=Math.ceil,_c=Math.exp,bc=(Math.floor,Math.log),mc=Math.pow,xc=Math.sin,wc=Math.sign||function(t){return t>0?1:t<0?-1:0},Mc=Math.sqrt,Ec=Math.tan;function Sc(t){return t>1?0:t<-1?ac:Math.acos(t)}function Tc(t){return t>1?cc:t<-1?-cc:Math.asin(t)}function Ac(t){return(t=xc(t/2))*t}function kc(){}function Nc(t,n){t&&Pc.hasOwnProperty(t.type)&&Pc[t.type](t,n)}var Cc={Feature:function(t,n){Nc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Nc(e[r].geometry,n)}},Pc={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){Lc(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Lc(e[r],n,0)},Polygon:function(t,n){Oc(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Oc(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Nc(e[r],n)}};function Lc(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function Oc(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)Lc(t[e],n,1);n.polygonEnd()}var Rc,Dc,zc,jc,Uc,qc=function(t,n){t&&Cc.hasOwnProperty(t.type)?Cc[t.type](t,n):Nc(t,n)},Ic=ec(),Fc=ec(),Bc={point:kc,lineStart:kc,lineEnd:kc,polygonStart:function(){Ic.reset(),Bc.lineStart=Yc,Bc.lineEnd=Hc},polygonEnd:function(){var t=+Ic;Fc.add(t<0?sc+t:t),this.lineStart=this.lineEnd=this.point=kc},sphere:function(){Fc.add(sc)}};function Yc(){Bc.point=Gc}function Hc(){Xc(Rc,Dc)}function Gc(t,n){Bc.point=Xc,Rc=t,Dc=n,zc=t*=hc,jc=yc(n=(n*=hc)/2+fc),Uc=xc(n)}function Xc(t,n){var e=(t*=hc)-zc,r=e>=0?1:-1,i=r*e,o=yc(n=(n*=hc)/2+fc),u=xc(n),a=Uc*u,c=jc*o+a*yc(i),f=a*r*xc(i);Ic.add(vc(f,c)),zc=t,jc=o,Uc=u}var Vc=function(t){return Fc.reset(),qc(t,Bc),2*Fc};function Wc(t){return[vc(t[1],t[0]),Tc(t[2])]}function $c(t){var n=t[0],e=t[1],r=yc(e);return[r*yc(n),r*xc(n),xc(e)]}function Zc(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Qc(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Jc(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Kc(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function tf(t){var n=Mc(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var nf,ef,rf,of,uf,af,cf,ff,sf,lf,hf=ec(),df={point:pf,lineStart:yf,lineEnd:gf,polygonStart:function(){df.point=_f,df.lineStart=bf,df.lineEnd=mf,hf.reset(),Bc.polygonStart()},polygonEnd:function(){Bc.polygonEnd(),df.point=pf,df.lineStart=yf,df.lineEnd=gf,Ic<0?(nf=-(rf=180),ef=-(of=90)):hf>uc?of=90:hf<-uc&&(ef=-90),lf[0]=nf,lf[1]=rf}};function pf(t,n){sf.push(lf=[nf=t,rf=t]),n<ef&&(ef=n),n>of&&(of=n)}function vf(t,n){var e=$c([t*hc,n*hc]);if(ff){var r=Qc(ff,e),i=Qc([r[1],-r[0],0],r);tf(i),i=Wc(i);var o,u=t-uf,a=u>0?1:-1,c=i[0]*lc*a,f=dc(u)>180;f^(a*uf<c&&c<a*t)?(o=i[1]*lc)>of&&(of=o):f^(a*uf<(c=(c+360)%360-180)&&c<a*t)?(o=-i[1]*lc)<ef&&(ef=o):(n<ef&&(ef=n),n>of&&(of=n)),f?t<uf?xf(nf,t)>xf(nf,rf)&&(rf=t):xf(t,rf)>xf(nf,rf)&&(nf=t):rf>=nf?(t<nf&&(nf=t),t>rf&&(rf=t)):t>uf?xf(nf,t)>xf(nf,rf)&&(rf=t):xf(t,rf)>xf(nf,rf)&&(nf=t)}else sf.push(lf=[nf=t,rf=t]);n<ef&&(ef=n),n>of&&(of=n),ff=e,uf=t}function yf(){df.point=vf}function gf(){lf[0]=nf,lf[1]=rf,df.point=pf,ff=null}function _f(t,n){if(ff){var e=t-uf;hf.add(dc(e)>180?e+(e>0?360:-360):e)}else af=t,cf=n;Bc.point(t,n),vf(t,n)}function bf(){Bc.lineStart()}function mf(){_f(af,cf),Bc.lineEnd(),dc(hf)>uc&&(nf=-(rf=180)),lf[0]=nf,lf[1]=rf,ff=null}function xf(t,n){return(n-=t)<0?n+360:n}function wf(t,n){return t[0]-n[0]}function Mf(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var Ef,Sf,Tf,Af,kf,Nf,Cf,Pf,Lf,Of,Rf,Df,zf,jf,Uf,qf,If=function(t){var n,e,r,i,o,u,a;if(of=rf=-(nf=ef=1/0),sf=[],qc(t,df),e=sf.length){for(sf.sort(wf),n=1,o=[r=sf[0]];n<e;++n)Mf(r,(i=sf[n])[0])||Mf(r,i[1])?(xf(r[0],i[1])>xf(r[0],r[1])&&(r[1]=i[1]),xf(i[0],r[1])>xf(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(a=xf(r[1],i[0]))>u&&(u=a,nf=i[0],rf=r[1])}return sf=lf=null,nf===1/0||ef===1/0?[[NaN,NaN],[NaN,NaN]]:[[nf,ef],[rf,of]]},Ff={sphere:kc,point:Bf,lineStart:Hf,lineEnd:Vf,polygonStart:function(){Ff.lineStart=Wf,Ff.lineEnd=$f},polygonEnd:function(){Ff.lineStart=Hf,Ff.lineEnd=Vf}};function Bf(t,n){t*=hc;var e=yc(n*=hc);Yf(e*yc(t),e*xc(t),xc(n))}function Yf(t,n,e){Tf+=(t-Tf)/++Ef,Af+=(n-Af)/Ef,kf+=(e-kf)/Ef}function Hf(){Ff.point=Gf}function Gf(t,n){t*=hc;var e=yc(n*=hc);jf=e*yc(t),Uf=e*xc(t),qf=xc(n),Ff.point=Xf,Yf(jf,Uf,qf)}function Xf(t,n){t*=hc;var e=yc(n*=hc),r=e*yc(t),i=e*xc(t),o=xc(n),u=vc(Mc((u=Uf*o-qf*i)*u+(u=qf*r-jf*o)*u+(u=jf*i-Uf*r)*u),jf*r+Uf*i+qf*o);Sf+=u,Nf+=u*(jf+(jf=r)),Cf+=u*(Uf+(Uf=i)),Pf+=u*(qf+(qf=o)),Yf(jf,Uf,qf)}function Vf(){Ff.point=Bf}function Wf(){Ff.point=Zf}function $f(){Qf(Df,zf),Ff.point=Bf}function Zf(t,n){Df=t,zf=n,t*=hc,n*=hc,Ff.point=Qf;var e=yc(n);jf=e*yc(t),Uf=e*xc(t),qf=xc(n),Yf(jf,Uf,qf)}function Qf(t,n){t*=hc;var e=yc(n*=hc),r=e*yc(t),i=e*xc(t),o=xc(n),u=Uf*o-qf*i,a=qf*r-jf*o,c=jf*i-Uf*r,f=Mc(u*u+a*a+c*c),s=Tc(f),l=f&&-s/f;Lf+=l*u,Of+=l*a,Rf+=l*c,Sf+=s,Nf+=s*(jf+(jf=r)),Cf+=s*(Uf+(Uf=i)),Pf+=s*(qf+(qf=o)),Yf(jf,Uf,qf)}var Jf=function(t){Ef=Sf=Tf=Af=kf=Nf=Cf=Pf=Lf=Of=Rf=0,qc(t,Ff);var n=Lf,e=Of,r=Rf,i=n*n+e*e+r*r;return i<1e-12&&(n=Nf,e=Cf,r=Pf,Sf<uc&&(n=Tf,e=Af,r=kf),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[vc(e,n)*lc,Tc(r/Mc(i))*lc]},Kf=function(t){return function(){return t}},ts=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function ns(t,n){return[dc(t)>ac?t+Math.round(-t/sc)*sc:t,n]}function es(t,n,e){return(t%=sc)?n||e?ts(is(t),os(n,e)):is(t):n||e?os(n,e):ns}function rs(t){return function(n,e){return[(n+=t)>ac?n-sc:n<-ac?n+sc:n,e]}}function is(t){var n=rs(t);return n.invert=rs(-t),n}function os(t,n){var e=yc(t),r=xc(t),i=yc(n),o=xc(n);function u(t,n){var u=yc(n),a=yc(t)*u,c=xc(t)*u,f=xc(n),s=f*e+a*r;return[vc(c*i-s*o,a*e-f*r),Tc(s*i+c*o)]}return u.invert=function(t,n){var u=yc(n),a=yc(t)*u,c=xc(t)*u,f=xc(n),s=f*i-c*o;return[vc(c*i+f*o,a*e+s*r),Tc(s*e-a*r)]},u}ns.invert=ns;var us=function(t){function n(n){return(n=t(n[0]*hc,n[1]*hc))[0]*=lc,n[1]*=lc,n}return t=es(t[0]*hc,t[1]*hc,t.length>2?t[2]*hc:0),n.invert=function(n){return(n=t.invert(n[0]*hc,n[1]*hc))[0]*=lc,n[1]*=lc,n},n};function as(t,n,e,r,i,o){if(e){var u=yc(n),a=xc(n),c=r*e;null==i?(i=n+r*sc,o=n-c/2):(i=cs(u,i),o=cs(u,o),(r>0?i<o:i>o)&&(i+=r*sc));for(var f,s=i;r>0?s>o:s<o;s-=c)f=Wc([u,-a*yc(s),-a*xc(s)]),t.point(f[0],f[1])}}function cs(t,n){(n=$c(n))[0]-=t,tf(n);var e=Sc(-n[1]);return((-n[2]<0?-e:e)+sc-uc)%sc}var fs=function(){var t,n,e=Kf([0,0]),r=Kf(90),i=Kf(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=lc,e[1]*=lc}};function u(){var u=e.apply(this,arguments),a=r.apply(this,arguments)*hc,c=i.apply(this,arguments)*hc;return t=[],n=es(-u[0]*hc,-u[1]*hc,0).invert,as(o,a,c,1),u={type:"Polygon",coordinates:[t]},t=n=null,u}return u.center=function(t){return arguments.length?(e="function"==typeof t?t:Kf([+t[0],+t[1]]),u):e},u.radius=function(t){return arguments.length?(r="function"==typeof t?t:Kf(+t),u):r},u.precision=function(t){return arguments.length?(i="function"==typeof t?t:Kf(+t),u):i},u},ss=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:kc,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},ls=function(t,n){return dc(t[0]-n[0])<uc&&dc(t[1]-n[1])<uc};function hs(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var ds=function(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(ls(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(e=new hs(r,t,null,!0)),c.push(e.o=new hs(r,null,e,!1)),a.push(e=new hs(u,t,null,!1)),c.push(e.o=new hs(u,null,e,!0))}}),a.length){for(c.sort(n),ps(a),ps(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var f,s,l=a[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;f=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,u=f.length;o<u;++o)i.point((s=f[o])[0],s[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(f=h.p.z,o=f.length-1;o>=0;--o)i.point((s=f[o])[0],s[1]);else r(h.x,h.p.x,-1,i);h=h.p}f=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}};function ps(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var vs=ec(),ys=function(t,n){var e=n[0],r=n[1],i=xc(r),o=[xc(e),-yc(e),0],u=0,a=0;vs.reset(),1===i?r=cc+uc:-1===i&&(r=-cc-uc);for(var c=0,f=t.length;c<f;++c)if(l=(s=t[c]).length)for(var s,l,h=s[l-1],d=h[0],p=h[1]/2+fc,v=xc(p),y=yc(p),g=0;g<l;++g,d=b,v=x,y=w,h=_){var _=s[g],b=_[0],m=_[1]/2+fc,x=xc(m),w=yc(m),M=b-d,E=M>=0?1:-1,S=E*M,T=S>ac,A=v*x;if(vs.add(vc(A*E*xc(S),y*w+A*yc(S))),u+=T?M+E*sc:M,T^d>=e^b>=e){var k=Qc($c(h),$c(_));tf(k);var N=Qc(o,k);tf(N);var C=(T^M>=0?-1:1)*Tc(N[2]);(r>C||r===C&&(k[0]||k[1]))&&(a+=T^M>=0?1:-1)}}return(u<-uc||u<uc&&vs<-uc)^1&a},gs=function(t,n,e,r){return function(i){var o,u,a,c=n(i),f=ss(),s=n(f),l=!1,h={point:d,lineStart:v,lineEnd:y,polygonStart:function(){h.point=g,h.lineStart=_,h.lineEnd=b,u=[],o=[]},polygonEnd:function(){h.point=d,h.lineStart=v,h.lineEnd=y,u=j(u);var t=ys(o,r);u.length?(l||(i.polygonStart(),l=!0),ds(u,bs,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){c.point(t,n)}function v(){h.point=p,c.lineStart()}function y(){h.point=d,c.lineEnd()}function g(t,n){a.push([t,n]),s.point(t,n)}function _(){s.lineStart(),a=[]}function b(){g(a[0][0],a[0][1]),s.lineEnd();var t,n,e,r,c=s.clean(),h=f.result(),d=h.length;if(a.pop(),o.push(a),a=null,d)if(1&c){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(_s))}return h}};function _s(t){return t.length>1}function bs(t,n){return((t=t.x)[0]<0?t[1]-cc-uc:cc-t[1])-((n=n.x)[0]<0?n[1]-cc-uc:cc-n[1])}var ms=gs(function(){return!0},function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?ac:-ac,c=dc(o-e);dc(c-ac)<uc?(t.point(e,r=(r+u)/2>0?cc:-cc),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&c>=ac&&(dc(e-i)<uc&&(e-=i*uc),dc(o-a)<uc&&(o-=a*uc),r=function(t,n,e,r){var i,o,u=xc(t-e);return dc(u)>uc?pc((xc(n)*(o=yc(r))*xc(e)-xc(r)*(i=yc(n))*xc(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var i;if(null==t)i=e*cc,r.point(-ac,i),r.point(0,i),r.point(ac,i),r.point(ac,0),r.point(ac,-i),r.point(0,-i),r.point(-ac,-i),r.point(-ac,0),r.point(-ac,i);else if(dc(t[0]-n[0])>uc){var o=t[0]<n[0]?ac:-ac;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])},[-ac,-cc]);var xs=function(t){var n=yc(t),e=6*hc,r=n>0,i=dc(n)>uc;function o(t,e){return yc(t)*yc(e)>n}function u(t,e,r){var i=[1,0,0],o=Qc($c(t),$c(e)),u=Zc(o,o),a=o[0],c=u-a*a;if(!c)return!r&&t;var f=n*u/c,s=-n*a/c,l=Qc(i,o),h=Kc(i,f);Jc(h,Kc(o,s));var d=l,p=Zc(h,d),v=Zc(d,d),y=p*p-v*(Zc(h,h)-1);if(!(y<0)){var g=Mc(y),_=Kc(d,(-p-g)/v);if(Jc(_,h),_=Wc(_),!r)return _;var b,m=t[0],x=e[0],w=t[1],M=e[1];x<m&&(b=m,m=x,x=b);var E=x-m,S=dc(E-ac)<uc;if(!S&&M<w&&(b=w,w=M,M=b),S||E<uc?S?w+M>0^_[1]<(dc(_[0]-m)<uc?w:M):w<=_[1]&&_[1]<=M:E>ac^(m<=_[0]&&_[0]<=x)){var T=Kc(d,(-p+g)/v);return Jc(T,h),[_,Wc(T)]}}}function a(n,e){var i=r?t:ac-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return gs(o,function(t){var n,e,c,f,s;return{lineStart:function(){f=c=!1,s=1},point:function(l,h){var d,p=[l,h],v=o(l,h),y=r?v?0:a(l,h):v?a(l+(l<0?ac:-ac),h):0;if(!n&&(f=c=v)&&t.lineStart(),v!==c&&(!(d=u(n,p))||ls(n,d)||ls(p,d))&&(p[0]+=uc,p[1]+=uc,v=o(p[0],p[1])),v!==c)s=0,v?(t.lineStart(),d=u(p,n),t.point(d[0],d[1])):(d=u(n,p),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(i&&n&&r^v){var g;y&e||!(g=u(p,n,!0))||(s=0,r?(t.lineStart(),t.point(g[0][0],g[0][1]),t.point(g[1][0],g[1][1]),t.lineEnd()):(t.point(g[1][0],g[1][1]),t.lineEnd(),t.lineStart(),t.point(g[0][0],g[0][1])))}!v||n&&ls(n,p)||t.point(p[0],p[1]),n=p,c=v,e=y},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return s|(f&&c)<<1}}},function(n,r,i,o){as(o,t,e,i,n,r)},r?[0,-t]:[-ac,t-ac])},ws=function(t,n,e,r,i,o){var u,a=t[0],c=t[1],f=0,s=1,l=n[0]-a,h=n[1]-c;if(u=e-a,l||!(u>0)){if(u/=l,l<0){if(u<f)return;u<s&&(s=u)}else if(l>0){if(u>s)return;u>f&&(f=u)}if(u=i-a,l||!(u<0)){if(u/=l,l<0){if(u>s)return;u>f&&(f=u)}else if(l>0){if(u<f)return;u<s&&(s=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<f)return;u<s&&(s=u)}else if(h>0){if(u>s)return;u>f&&(f=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>s)return;u>f&&(f=u)}else if(h>0){if(u<f)return;u<s&&(s=u)}return f>0&&(t[0]=a+f*l,t[1]=c+f*h),s<1&&(n[0]=a+s*l,n[1]=c+s*h),!0}}}}},Ms=1e9,Es=-Ms;function Ss(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,f){var s=0,l=0;if(null==i||(s=u(i,a))!==(l=u(o,a))||c(i,o)<0^a>0)do{f.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+a+4)%4)!==l);else f.point(o[0],o[1])}function u(r,i){return dc(r[0]-t)<uc?i>0?0:3:dc(r[0]-e)<uc?i>0?2:1:dc(r[1]-n)<uc?i>0?1:0:i>0?3:2}function a(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var c,f,s,l,h,d,p,v,y,g,_,b=u,m=ss(),x={point:w,lineStart:function(){x.point=M,f&&f.push(s=[]);g=!0,y=!1,p=v=NaN},lineEnd:function(){c&&(M(l,h),d&&y&&m.rejoin(),c.push(m.result()));x.point=w,y&&b.lineEnd()},polygonStart:function(){b=m,c=[],f=[],_=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=f.length;e<i;++e)for(var o,u,a=f[e],c=1,s=a.length,l=a[0],h=l[0],d=l[1];c<s;++c)o=h,u=d,l=a[c],h=l[0],d=l[1],u<=r?d>r&&(h-o)*(r-u)>(d-u)*(t-o)&&++n:d<=r&&(h-o)*(r-u)<(d-u)*(t-o)&&--n;return n}(),e=_&&n,i=(c=j(c)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&ds(c,a,n,o,u),u.polygonEnd());b=u,c=f=s=null}};function w(t,n){i(t,n)&&b.point(t,n)}function M(o,u){var a=i(o,u);if(f&&s.push([o,u]),g)l=o,h=u,d=a,g=!1,a&&(b.lineStart(),b.point(o,u));else if(a&&y)b.point(o,u);else{var c=[p=Math.max(Es,Math.min(Ms,p)),v=Math.max(Es,Math.min(Ms,v))],m=[o=Math.max(Es,Math.min(Ms,o)),u=Math.max(Es,Math.min(Ms,u))];ws(c,m,t,n,e,r)?(y||(b.lineStart(),b.point(c[0],c[1])),b.point(m[0],m[1]),a||b.lineEnd(),_=!1):a&&(b.lineStart(),b.point(o,u),_=!1)}p=o,v=u,y=a}return x}}var Ts,As,ks,Ns=function(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=Ss(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}},Cs=ec(),Ps={sphere:kc,point:kc,lineStart:function(){Ps.point=Os,Ps.lineEnd=Ls},lineEnd:kc,polygonStart:kc,polygonEnd:kc};function Ls(){Ps.point=Ps.lineEnd=kc}function Os(t,n){Ts=t*=hc,As=xc(n*=hc),ks=yc(n),Ps.point=Rs}function Rs(t,n){t*=hc;var e=xc(n*=hc),r=yc(n),i=dc(t-Ts),o=yc(i),u=r*xc(i),a=ks*e-As*r*o,c=As*e+ks*r*o;Cs.add(vc(Mc(u*u+a*a),c)),Ts=t,As=e,ks=r}var Ds=function(t){return Cs.reset(),qc(t,Ps),+Cs},zs=[null,null],js={type:"LineString",coordinates:zs},Us=function(t,n){return zs[0]=t,zs[1]=n,Ds(js)},qs={Feature:function(t,n){return Fs(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(Fs(e[r].geometry,n))return!0;return!1}},Is={Sphere:function(){return!0},Point:function(t,n){return Bs(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Bs(e[r],n))return!0;return!1},LineString:function(t,n){return Ys(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Ys(e[r],n))return!0;return!1},Polygon:function(t,n){return Hs(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Hs(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(Fs(e[r],n))return!0;return!1}};function Fs(t,n){return!(!t||!Is.hasOwnProperty(t.type))&&Is[t.type](t,n)}function Bs(t,n){return 0===Us(t,n)}function Ys(t,n){var e=Us(t[0],t[1]);return Us(t[0],n)+Us(n,t[1])<=e+uc}function Hs(t,n){return!!ys(t.map(Gs),Xs(n))}function Gs(t){return(t=t.map(Xs)).pop(),t}function Xs(t){return[t[0]*hc,t[1]*hc]}var Vs=function(t,n){return(t&&qs.hasOwnProperty(t.type)?qs[t.type]:Fs)(t,n)};function Ws(t,n,e){var r=w(t,n-uc,e).concat(n);return function(t){return r.map(function(n){return[t,n]})}}function $s(t,n,e){var r=w(t,n-uc,e).concat(n);return function(t){return r.map(function(n){return[n,t]})}}function Zs(){var t,n,e,r,i,o,u,a,c,f,s,l,h=10,d=h,p=90,v=360,y=2.5;function g(){return{type:"MultiLineString",coordinates:_()}}function _(){return w(gc(r/p)*p,e,p).map(s).concat(w(gc(a/v)*v,u,v).map(l)).concat(w(gc(n/h)*h,t,h).filter(function(t){return dc(t%p)>uc}).map(c)).concat(w(gc(o/d)*d,i,d).filter(function(t){return dc(t%v)>uc}).map(f))}return g.lines=function(){return _().map(function(t){return{type:"LineString",coordinates:t}})},g.outline=function(){return{type:"Polygon",coordinates:[s(r).concat(l(u).slice(1),s(e).reverse().slice(1),l(a).reverse().slice(1))]}},g.extent=function(t){return arguments.length?g.extentMajor(t).extentMinor(t):g.extentMinor()},g.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),a>u&&(t=a,a=u,u=t),g.precision(y)):[[r,a],[e,u]]},g.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),g.precision(y)):[[n,o],[t,i]]},g.step=function(t){return arguments.length?g.stepMajor(t).stepMinor(t):g.stepMinor()},g.stepMajor=function(t){return arguments.length?(p=+t[0],v=+t[1],g):[p,v]},g.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],g):[h,d]},g.precision=function(h){return arguments.length?(y=+h,c=Ws(o,i,90),f=$s(n,t,y),s=Ws(a,u,90),l=$s(r,e,y),g):y},g.extentMajor([[-180,-90+uc],[180,90-uc]]).extentMinor([[-180,-80-uc],[180,80+uc]])}function Qs(){return Zs()()}var Js,Ks,tl,nl,el=function(t,n){var e=t[0]*hc,r=t[1]*hc,i=n[0]*hc,o=n[1]*hc,u=yc(r),a=xc(r),c=yc(o),f=xc(o),s=u*yc(e),l=u*xc(e),h=c*yc(i),d=c*xc(i),p=2*Tc(Mc(Ac(o-r)+u*c*Ac(i-e))),v=xc(p),y=p?function(t){var n=xc(t*=p)/v,e=xc(p-t)/v,r=e*s+n*h,i=e*l+n*d,o=e*a+n*f;return[vc(i,r)*lc,vc(o,Mc(r*r+i*i))*lc]}:function(){return[e*lc,r*lc]};return y.distance=p,y},rl=function(t){return t},il=ec(),ol=ec(),ul={point:kc,lineStart:kc,lineEnd:kc,polygonStart:function(){ul.lineStart=al,ul.lineEnd=sl},polygonEnd:function(){ul.lineStart=ul.lineEnd=ul.point=kc,il.add(dc(ol)),ol.reset()},result:function(){var t=il/2;return il.reset(),t}};function al(){ul.point=cl}function cl(t,n){ul.point=fl,Js=tl=t,Ks=nl=n}function fl(t,n){ol.add(nl*t-tl*n),tl=t,nl=n}function sl(){fl(Js,Ks)}var ll=ul,hl=1/0,dl=hl,pl=-hl,vl=pl;var yl,gl,_l,bl,ml={point:function(t,n){t<hl&&(hl=t);t>pl&&(pl=t);n<dl&&(dl=n);n>vl&&(vl=n)},lineStart:kc,lineEnd:kc,polygonStart:kc,polygonEnd:kc,result:function(){var t=[[hl,dl],[pl,vl]];return pl=vl=-(dl=hl=1/0),t}},xl=0,wl=0,Ml=0,El=0,Sl=0,Tl=0,Al=0,kl=0,Nl=0,Cl={point:Pl,lineStart:Ll,lineEnd:Dl,polygonStart:function(){Cl.lineStart=zl,Cl.lineEnd=jl},polygonEnd:function(){Cl.point=Pl,Cl.lineStart=Ll,Cl.lineEnd=Dl},result:function(){var t=Nl?[Al/Nl,kl/Nl]:Tl?[El/Tl,Sl/Tl]:Ml?[xl/Ml,wl/Ml]:[NaN,NaN];return xl=wl=Ml=El=Sl=Tl=Al=kl=Nl=0,t}};function Pl(t,n){xl+=t,wl+=n,++Ml}function Ll(){Cl.point=Ol}function Ol(t,n){Cl.point=Rl,Pl(_l=t,bl=n)}function Rl(t,n){var e=t-_l,r=n-bl,i=Mc(e*e+r*r);El+=i*(_l+t)/2,Sl+=i*(bl+n)/2,Tl+=i,Pl(_l=t,bl=n)}function Dl(){Cl.point=Pl}function zl(){Cl.point=Ul}function jl(){ql(yl,gl)}function Ul(t,n){Cl.point=ql,Pl(yl=_l=t,gl=bl=n)}function ql(t,n){var e=t-_l,r=n-bl,i=Mc(e*e+r*r);El+=i*(_l+t)/2,Sl+=i*(bl+n)/2,Tl+=i,Al+=(i=bl*t-_l*n)*(_l+t),kl+=i*(bl+n),Nl+=3*i,Pl(_l=t,bl=n)}var Il=Cl;function Fl(t){this._context=t}Fl.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,sc)}},result:kc};var Bl,Yl,Hl,Gl,Xl,Vl=ec(),Wl={point:kc,lineStart:function(){Wl.point=$l},lineEnd:function(){Bl&&Zl(Yl,Hl),Wl.point=kc},polygonStart:function(){Bl=!0},polygonEnd:function(){Bl=null},result:function(){var t=+Vl;return Vl.reset(),t}};function $l(t,n){Wl.point=Zl,Yl=Gl=t,Hl=Xl=n}function Zl(t,n){Gl-=t,Xl-=n,Vl.add(Mc(Gl*Gl+Xl*Xl)),Gl=t,Xl=n}var Ql=Wl;function Jl(){this._string=[]}function Kl(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Jl.prototype={_radius:4.5,_circle:Kl(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Kl(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var th=function(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),qc(t,e(r))),r.result()}return o.area=function(t){return qc(t,e(ll)),ll.result()},o.measure=function(t){return qc(t,e(Ql)),Ql.result()},o.bounds=function(t){return qc(t,e(ml)),ml.result()},o.centroid=function(t){return qc(t,e(Il)),Il.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,rl):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new Jl):new Fl(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)},nh=function(t){return{stream:eh(t)}};function eh(t){return function(n){var e=new rh;for(var r in t)e[r]=t[r];return e.stream=n,e}}function rh(){}function ih(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),qc(e,t.stream(ml)),n(ml.result()),null!=r&&t.clipExtent(r),t}function oh(t,n,e){return ih(t,function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),u=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,a=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([u,a])},e)}function uh(t,n,e){return oh(t,[[0,0],n],e)}function ah(t,n,e){return ih(t,function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,u=-i*e[0][1];t.scale(150*i).translate([o,u])},e)}function ch(t,n,e){return ih(t,function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],u=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,u])},e)}rh.prototype={constructor:rh,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var fh=16,sh=yc(30*hc),lh=function(t,n){return+n?function(t,n){function e(r,i,o,u,a,c,f,s,l,h,d,p,v,y){var g=f-r,_=s-i,b=g*g+_*_;if(b>4*n&&v--){var m=u+h,x=a+d,w=c+p,M=Mc(m*m+x*x+w*w),E=Tc(w/=M),S=dc(dc(w)-1)<uc||dc(o-l)<uc?(o+l)/2:vc(x,m),T=t(S,E),A=T[0],k=T[1],N=A-r,C=k-i,P=_*N-g*C;(P*P/b>n||dc((g*N+_*C)/b-.5)>.3||u*h+a*d+c*p<sh)&&(e(r,i,o,u,a,c,A,k,S,m/=M,x/=M,w,v,y),y.point(A,k),e(A,k,S,m,x,w,f,s,l,h,d,p,v,y))}}return function(n){var r,i,o,u,a,c,f,s,l,h,d,p,v={point:y,lineStart:g,lineEnd:b,polygonStart:function(){n.polygonStart(),v.lineStart=m},polygonEnd:function(){n.polygonEnd(),v.lineStart=g}};function y(e,r){e=t(e,r),n.point(e[0],e[1])}function g(){s=NaN,v.point=_,n.lineStart()}function _(r,i){var o=$c([r,i]),u=t(r,i);e(s,l,f,h,d,p,s=u[0],l=u[1],f=r,h=o[0],d=o[1],p=o[2],fh,n),n.point(s,l)}function b(){v.point=y,n.lineEnd()}function m(){g(),v.point=x,v.lineEnd=w}function x(t,n){_(r=t,n),i=s,o=l,u=h,a=d,c=p,v.point=_}function w(){e(s,l,f,h,d,p,i,o,r,u,a,c,fh,n),v.lineEnd=b,b()}return v}}(t,n):function(t){return eh({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var hh=eh({point:function(t,n){this.stream.point(t*hc,n*hc)}});function dh(t,n,e,r){var i=yc(r),o=xc(r),u=i*t,a=o*t,c=i/t,f=o/t,s=(o*e-i*n)/t,l=(o*n+i*e)/t;function h(t,r){return[u*t-a*r+n,e-a*t-u*r]}return h.invert=function(t,n){return[c*t-f*n+s,l-f*t-c*n]},h}function ph(t){return vh(function(){return t})()}function vh(t){var n,e,r,i,o,u,a,c,f,s,l=150,h=480,d=250,p=0,v=0,y=0,g=0,_=0,b=0,m=null,x=ms,w=null,M=rl,E=.5;function S(t){return c(t[0]*hc,t[1]*hc)}function T(t){return(t=c.invert(t[0],t[1]))&&[t[0]*lc,t[1]*lc]}function A(){var t=dh(l,0,0,b).apply(null,n(p,v)),r=(b?dh:function(t,n,e){function r(r,i){return[n+t*r,e-t*i]}return r.invert=function(r,i){return[(r-n)/t,(e-i)/t]},r})(l,h-t[0],d-t[1],b);return e=es(y,g,_),a=ts(n,r),c=ts(e,a),u=lh(a,E),k()}function k(){return f=s=null,S}return S.stream=function(t){return f&&s===t?f:f=hh(function(t){return eh({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(x(u(M(s=t)))))},S.preclip=function(t){return arguments.length?(x=t,m=void 0,k()):x},S.postclip=function(t){return arguments.length?(M=t,w=r=i=o=null,k()):M},S.clipAngle=function(t){return arguments.length?(x=+t?xs(m=t*hc):(m=null,ms),k()):m*lc},S.clipExtent=function(t){return arguments.length?(M=null==t?(w=r=i=o=null,rl):Ss(w=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),k()):null==w?null:[[w,r],[i,o]]},S.scale=function(t){return arguments.length?(l=+t,A()):l},S.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],A()):[h,d]},S.center=function(t){return arguments.length?(p=t[0]%360*hc,v=t[1]%360*hc,A()):[p*lc,v*lc]},S.rotate=function(t){return arguments.length?(y=t[0]%360*hc,g=t[1]%360*hc,_=t.length>2?t[2]%360*hc:0,A()):[y*lc,g*lc,_*lc]},S.angle=function(t){return arguments.length?(b=t%360*hc,A()):b*lc},S.precision=function(t){return arguments.length?(u=lh(a,E=t*t),k()):Mc(E)},S.fitExtent=function(t,n){return oh(S,t,n)},S.fitSize=function(t,n){return uh(S,t,n)},S.fitWidth=function(t,n){return ah(S,t,n)},S.fitHeight=function(t,n){return ch(S,t,n)},function(){return n=t.apply(this,arguments),S.invert=n.invert&&T,A()}}function yh(t){var n=0,e=ac/3,r=vh(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*hc,e=t[1]*hc):[n*lc,e*lc]},i}function gh(t,n){var e=xc(t),r=(e+xc(n))/2;if(dc(r)<uc)return function(t){var n=yc(t);function e(t,e){return[t*n,xc(e)/n]}return e.invert=function(t,e){return[t/n,Tc(e*n)]},e}(t);var i=1+e*(2*r-e),o=Mc(i)/r;function u(t,n){var e=Mc(i-2*r*xc(n))/r;return[e*xc(t*=r),o-e*yc(t)]}return u.invert=function(t,n){var e=o-n;return[vc(t,dc(e))/r*wc(e),Tc((i-(t*t+e*e)*r*r)/(2*r))]},u}var _h=function(){return yh(gh).scale(155.424).center([0,33.6442])},bh=function(){return _h().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var mh=function(){var t,n,e,r,i,o,u=bh(),a=_h().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=_h().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,n){o=[t,n]}};function s(t){var n=t[0],u=t[1];return o=null,e.point(n,u),o||(r.point(n,u),o)||(i.point(n,u),o)}function l(){return t=n=null,s}return s.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:u).invert(t)},s.stream=function(e){return t&&n===e?t:(r=[u.stream(n=e),a.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},s.precision=function(t){return arguments.length?(u.precision(t),a.precision(t),c.precision(t),l()):u.precision()},s.scale=function(t){return arguments.length?(u.scale(t),a.scale(.35*t),c.scale(t),s.translate(u.translate())):u.scale()},s.translate=function(t){if(!arguments.length)return u.translate();var n=u.scale(),o=+t[0],s=+t[1];return e=u.translate(t).clipExtent([[o-.455*n,s-.238*n],[o+.455*n,s+.238*n]]).stream(f),r=a.translate([o-.307*n,s+.201*n]).clipExtent([[o-.425*n+uc,s+.12*n+uc],[o-.214*n-uc,s+.234*n-uc]]).stream(f),i=c.translate([o-.205*n,s+.212*n]).clipExtent([[o-.214*n+uc,s+.166*n+uc],[o-.115*n-uc,s+.234*n-uc]]).stream(f),l()},s.fitExtent=function(t,n){return oh(s,t,n)},s.fitSize=function(t,n){return uh(s,t,n)},s.fitWidth=function(t,n){return ah(s,t,n)},s.fitHeight=function(t,n){return ch(s,t,n)},s.scale(1070)};function xh(t){return function(n,e){var r=yc(n),i=yc(e),o=t(r*i);return[o*i*xc(n),o*xc(e)]}}function wh(t){return function(n,e){var r=Mc(n*n+e*e),i=t(r),o=xc(i),u=yc(i);return[vc(n*o,r*u),Tc(r&&e*o/r)]}}var Mh=xh(function(t){return Mc(2/(1+t))});Mh.invert=wh(function(t){return 2*Tc(t/2)});var Eh=function(){return ph(Mh).scale(124.75).clipAngle(179.999)},Sh=xh(function(t){return(t=Sc(t))&&t/xc(t)});Sh.invert=wh(function(t){return t});var Th=function(){return ph(Sh).scale(79.4188).clipAngle(179.999)};function Ah(t,n){return[t,bc(Ec((cc+n)/2))]}Ah.invert=function(t,n){return[t,2*pc(_c(n))-cc]};var kh=function(){return Nh(Ah).scale(961/sc)};function Nh(t){var n,e,r,i=ph(t),o=i.center,u=i.scale,a=i.translate,c=i.clipExtent,f=null;function s(){var o=ac*u(),a=i(us(i.rotate()).invert([0,0]));return c(null==f?[[a[0]-o,a[1]-o],[a[0]+o,a[1]+o]]:t===Ah?[[Math.max(a[0]-o,f),n],[Math.min(a[0]+o,e),r]]:[[f,Math.max(a[1]-o,n)],[e,Math.min(a[1]+o,r)]])}return i.scale=function(t){return arguments.length?(u(t),s()):u()},i.translate=function(t){return arguments.length?(a(t),s()):a()},i.center=function(t){return arguments.length?(o(t),s()):o()},i.clipExtent=function(t){return arguments.length?(null==t?f=n=e=r=null:(f=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),s()):null==f?null:[[f,n],[e,r]]},s()}function Ch(t){return Ec((cc+t)/2)}function Ph(t,n){var e=yc(t),r=t===n?xc(t):bc(e/yc(n))/bc(Ch(n)/Ch(t)),i=e*mc(Ch(t),r)/r;if(!r)return Ah;function o(t,n){i>0?n<-cc+uc&&(n=-cc+uc):n>cc-uc&&(n=cc-uc);var e=i/mc(Ch(n),r);return[e*xc(r*t),i-e*yc(r*t)]}return o.invert=function(t,n){var e=i-n,o=wc(r)*Mc(t*t+e*e);return[vc(t,dc(e))/r*wc(e),2*pc(mc(i/o,1/r))-cc]},o}var Lh=function(){return yh(Ph).scale(109.5).parallels([30,30])};function Oh(t,n){return[t,n]}Oh.invert=Oh;var Rh=function(){return ph(Oh).scale(152.63)};function Dh(t,n){var e=yc(t),r=t===n?xc(t):(e-yc(n))/(n-t),i=e/r+t;if(dc(r)<uc)return Oh;function o(t,n){var e=i-n,o=r*t;return[e*xc(o),i-e*yc(o)]}return o.invert=function(t,n){var e=i-n;return[vc(t,dc(e))/r*wc(e),i-wc(r)*Mc(t*t+e*e)]},o}var zh=function(){return yh(Dh).scale(131.154).center([0,13.9389])},jh=1.340264,Uh=-.081106,qh=893e-6,Ih=.003796,Fh=Mc(3)/2;function Bh(t,n){var e=Tc(Fh*xc(n)),r=e*e,i=r*r*r;return[t*yc(e)/(Fh*(jh+3*Uh*r+i*(7*qh+9*Ih*r))),e*(jh+Uh*r+i*(qh+Ih*r))]}Bh.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,u=0;u<12&&(o=(i=(r-=e=(r*(jh+Uh*i+o*(qh+Ih*i))-n)/(jh+3*Uh*i+o*(7*qh+9*Ih*i)))*r)*i*i,!(dc(e)<1e-12));++u);return[Fh*t*(jh+3*Uh*i+o*(7*qh+9*Ih*i))/yc(r),Tc(xc(r)/Fh)]};var Yh=function(){return ph(Bh).scale(177.158)};function Hh(t,n){var e=yc(n),r=yc(t)*e;return[e*xc(t)/r,xc(n)/r]}Hh.invert=wh(pc);var Gh=function(){return ph(Hh).scale(144.049).clipAngle(60)};function Xh(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?rl:eh({point:function(i,o){this.stream.point(i*t+e,o*n+r)}})}var Vh=function(){var t,n,e,r,i,o,u=1,a=0,c=0,f=1,s=1,l=rl,h=null,d=rl;function p(){return r=i=null,o}return o={stream:function(t){return r&&i===t?r:r=l(d(i=t))},postclip:function(r){return arguments.length?(d=r,h=t=n=e=null,p()):d},clipExtent:function(r){return arguments.length?(d=null==r?(h=t=n=e=null,rl):Ss(h=+r[0][0],t=+r[0][1],n=+r[1][0],e=+r[1][1]),p()):null==h?null:[[h,t],[n,e]]},scale:function(t){return arguments.length?(l=Xh((u=+t)*f,u*s,a,c),p()):u},translate:function(t){return arguments.length?(l=Xh(u*f,u*s,a=+t[0],c=+t[1]),p()):[a,c]},reflectX:function(t){return arguments.length?(l=Xh(u*(f=t?-1:1),u*s,a,c),p()):f<0},reflectY:function(t){return arguments.length?(l=Xh(u*f,u*(s=t?-1:1),a,c),p()):s<0},fitExtent:function(t,n){return oh(o,t,n)},fitSize:function(t,n){return uh(o,t,n)},fitWidth:function(t,n){return ah(o,t,n)},fitHeight:function(t,n){return ch(o,t,n)}}};function Wh(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}Wh.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(dc(e)>uc&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};var $h=function(){return ph(Wh).scale(175.295)};function Zh(t,n){return[yc(n)*xc(t),xc(n)]}Zh.invert=wh(Tc);var Qh=function(){return ph(Zh).scale(249.5).clipAngle(90+uc)};function Jh(t,n){var e=yc(n),r=1+yc(t)*e;return[e*xc(t)/r,xc(n)/r]}Jh.invert=wh(function(t){return 2*pc(t)});var Kh=function(){return ph(Jh).scale(250).clipAngle(142)};function td(t,n){return[bc(Ec((cc+n)/2)),-t]}td.invert=function(t,n){return[-n,2*pc(_c(t))-cc]};var nd=function(){var t=Nh(td),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)};function ed(t,n){return t.parent===n.parent?1:2}function rd(t,n){return t+n.x}function id(t,n){return Math.max(t,n.y)}var od=function(){var t=ed,n=1,e=1,r=!1;function i(i){var o,u=0;i.eachAfter(function(n){var e=n.children;e?(n.x=function(t){return t.reduce(rd,0)/t.length}(e),n.y=function(t){return 1+t.reduce(id,0)}(e)):(n.x=o?u+=t(n,o):0,n.y=0,o=n)});var a=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),f=a.x-t(a,c)/2,s=c.x+t(c,a)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-f)/(s-f)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i};function ud(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function ad(t,n){var e,r,i,o,u,a=new ld(t),c=+t.value&&(a.value=t.value),f=[a];for(null==n&&(n=cd);e=f.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)f.push(r=e.children[o]=new ld(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(sd)}function cd(t){return t.children}function fd(t){t.data=t.data.data}function sd(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function ld(t){this.data=t,this.depth=this.height=0,this.parent=null}ld.prototype=ad.prototype={constructor:ld,count:function(){return this.eachAfter(ud)},each:function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})},sort:function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each(function(n){t.push(n)}),t},leaves:function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},links:function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n},copy:function(){return ad(this).eachBefore(fd)}};var hd=Array.prototype.slice;var dd=function(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(hd.call(t))).length,o=[];r<i;)n=t[r],e&&yd(e,n)?++r:(e=_d(o=pd(o,n)),r=0);return e};function pd(t,n){var e,r;if(gd(n,t))return[n];for(e=0;e<t.length;++e)if(vd(n,t[e])&&gd(bd(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(vd(bd(t[e],t[r]),n)&&vd(bd(t[e],n),t[r])&&vd(bd(t[r],n),t[e])&&gd(md(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function vd(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function yd(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function gd(t,n){for(var e=0;e<n.length;++e)if(!yd(t,n[e]))return!1;return!0}function _d(t){switch(t.length){case 1:return{x:(n=t[0]).x,y:n.y,r:n.r};case 2:return bd(t[0],t[1]);case 3:return md(t[0],t[1],t[2])}var n}function bd(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,a=n.r,c=o-e,f=u-r,s=a-i,l=Math.sqrt(c*c+f*f);return{x:(e+o+c/l*s)/2,y:(r+u+f/l*s)/2,r:(l+i+a)/2}}function md(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,a=n.y,c=n.r,f=e.x,s=e.y,l=e.r,h=r-u,d=r-f,p=i-a,v=i-s,y=c-o,g=l-o,_=r*r+i*i-o*o,b=_-u*u-a*a+c*c,m=_-f*f-s*s+l*l,x=d*p-h*v,w=(p*m-v*b)/(2*x)-r,M=(v*y-p*g)/x,E=(d*b-h*m)/(2*x)-i,S=(h*g-d*y)/x,T=M*M+S*S-1,A=2*(o+w*M+E*S),k=w*w+E*E-o*o,N=-(T?(A+Math.sqrt(A*A-4*T*k))/(2*T):k/A);return{x:r+w+M*N,y:i+E+S*N,r:N}}function xd(t,n,e){var r,i,o,u,a=t.x-n.x,c=t.y-n.y,f=a*a+c*c;f?(i=n.r+e.r,i*=i,u=t.r+e.r,i>(u*=u)?(r=(f+u-i)/(2*f),o=Math.sqrt(Math.max(0,u/f-r*r)),e.x=t.x-r*a-o*c,e.y=t.y-r*c+o*a):(r=(f+i-u)/(2*f),o=Math.sqrt(Math.max(0,i/f-r*r)),e.x=n.x+r*a-o*c,e.y=n.y+r*c+o*a)):(e.x=n.x+e.r,e.y=n.y)}function wd(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Md(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Ed(t){this._=t,this.next=null,this.previous=null}function Sd(t){if(!(i=t.length))return 0;var n,e,r,i,o,u,a,c,f,s,l;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;xd(e,n,r=t[2]),n=new Ed(n),e=new Ed(e),r=new Ed(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;a<i;++a){xd(n._,e._,r=t[a]),r=new Ed(r),c=e.next,f=n.previous,s=e._.r,l=n._.r;do{if(s<=l){if(wd(c._,r._)){e=c,n.next=e,e.previous=n,--a;continue t}s+=c._.r,c=c.next}else{if(wd(f._,r._)){(n=f).next=e,e.previous=n,--a;continue t}l+=f._.r,f=f.previous}}while(c!==f.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=Md(n);(r=r.next)!==e;)(u=Md(r))<o&&(n=r,o=u);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=dd(n),a=0;a<i;++a)(n=t[a]).x-=r.x,n.y-=r.y;return r.r}var Td=function(t){return Sd(t),t};function Ad(t){if("function"!=typeof t)throw new Error;return t}function kd(){return 0}var Nd=function(t){return function(){return t}};function Cd(t){return Math.sqrt(t.value)}var Pd=function(){var t=null,n=1,e=1,r=kd;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(Ld(t)).eachAfter(Od(r,.5)).eachBefore(Rd(1)):i.eachBefore(Ld(Cd)).eachAfter(Od(kd,1)).eachAfter(Od(r,i.r/Math.min(n,e))).eachBefore(Rd(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=null==(e=n)?null:Ad(e),i):t;var e},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Nd(+t),i):r},i};function Ld(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function Od(t,n){return function(e){if(r=e.children){var r,i,o,u=r.length,a=t(e)*n||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=Sd(r),a)for(i=0;i<u;++i)r[i].r-=a;e.r=o+a}}}function Rd(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}var Dd=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},zd=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(r-n)/t.value;++a<c;)(o=u[a]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*f},jd=function(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&zd(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,u=r.x1-e,a=r.y1-e;u<i&&(i=u=(i+u)/2),a<o&&(o=a=(o+a)/2),r.x0=i,r.y0=o,r.x1=u,r.y1=a}}(n,o)),r&&i.eachBefore(Dd),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i},Ud="$",qd={depth:-1},Id={};function Fd(t){return t.id}function Bd(t){return t.parentId}var Yd=function(){var t=Fd,n=Bd;function e(e){var r,i,o,u,a,c,f,s=e.length,l=new Array(s),h={};for(i=0;i<s;++i)r=e[i],a=l[i]=new ld(r),null!=(c=t(r,i,e))&&(c+="")&&(h[f=Ud+(a.id=c)]=f in h?Id:a);for(i=0;i<s;++i)if(a=l[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(u=h[Ud+c]))throw new Error("missing: "+c);if(u===Id)throw new Error("ambiguous: "+c);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=qd,o.eachBefore(function(t){t.depth=t.parent.depth+1,--s}).eachBefore(sd),o.parent=null,s>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=Ad(n),e):t},e.parentId=function(t){return arguments.length?(n=Ad(t),e):n},e};function Hd(t,n){return t.parent===n.parent?1:2}function Gd(t){var n=t.children;return n?n[0]:t.t}function Xd(t){var n=t.children;return n?n[n.length-1]:t.t}function Vd(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function Wd(t,n,e){return t.a.parent===n.parent?t.a:e}function $d(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}$d.prototype=Object.create(ld.prototype);var Zd=function(){var t=Hd,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,u=new $d(t,0),a=[u];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(e=n.children[i]=new $d(r[i],i)),e.parent=n;return(u.parent=new $d(null,0)).children=[u],u}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(u),r)i.eachBefore(a);else{var f=i,s=i,l=i;i.eachBefore(function(t){t.x<f.x&&(f=t),t.x>s.x&&(s=t),t.depth>l.depth&&(l=t)});var h=f===s?1:t(f,s)/2,d=h-f.x,p=n/(s.x+h+d),v=e/(l.depth||1);i.eachBefore(function(t){t.x=(t.x+d)*p,t.y=t.depth*v})}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,u=n,a=e,c=o.parent.children[0],f=o.m,s=u.m,l=a.m,h=c.m;a=Xd(a),o=Gd(o),a&&o;)c=Gd(c),(u=Xd(u)).a=n,(i=a.z+l-o.z-f+t(a._,o._))>0&&(Vd(Wd(a,n,r),n,i),f+=i,s+=i),l+=a.m,f+=o.m,h+=c.m,s+=u.m;a&&!Xd(u)&&(u.t=a,u.m+=l-s),o&&!Gd(c)&&(c.t=o,c.m+=f-h,r=n)}return r}(n,i,n.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function a(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i},Qd=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(i-e)/t.value;++a<c;)(o=u[a]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*f},Jd=(1+Math.sqrt(5))/2;function Kd(t,n,e,r,i,o){for(var u,a,c,f,s,l,h,d,p,v,y,g=[],_=n.children,b=0,m=0,x=_.length,w=n.value;b<x;){c=i-e,f=o-r;do{s=_[m++].value}while(!s&&m<x);for(l=h=s,y=s*s*(v=Math.max(f/c,c/f)/(w*t)),p=Math.max(h/y,y/l);m<x;++m){if(s+=a=_[m].value,a<l&&(l=a),a>h&&(h=a),y=s*s*v,(d=Math.max(h/y,y/l))>p){s-=a;break}p=d}g.push(u={value:s,dice:c<f,children:_.slice(b,m)}),u.dice?zd(u,e,r,i,w?r+=f*s/w:o):Qd(u,e,r,w?e+=c*s/w:i,o),w-=s,b=m}return g}var tp=function t(n){function e(t,e,r,i,o){Kd(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(Jd),np=function(){var t=tp,n=!1,e=1,r=1,i=[0],o=kd,u=kd,a=kd,c=kd,f=kd;function s(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(Dd),t}function l(n){var e=i[n.depth],r=n.x0+e,s=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<s&&(s=h=(s+h)/2),n.x0=r,n.y0=s,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=f(n)-e,s+=u(n)-e,(l-=a(n)-e)<r&&(r=l=(r+l)/2),(h-=c(n)-e)<s&&(s=h=(s+h)/2),t(n,r,s,l,h))}return s.round=function(t){return arguments.length?(n=!!t,s):n},s.size=function(t){return arguments.length?(e=+t[0],r=+t[1],s):[e,r]},s.tile=function(n){return arguments.length?(t=Ad(n),s):t},s.padding=function(t){return arguments.length?s.paddingInner(t).paddingOuter(t):s.paddingInner()},s.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Nd(+t),s):o},s.paddingOuter=function(t){return arguments.length?s.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):s.paddingTop()},s.paddingTop=function(t){return arguments.length?(u="function"==typeof t?t:Nd(+t),s):u},s.paddingRight=function(t){return arguments.length?(a="function"==typeof t?t:Nd(+t),s):a},s.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Nd(+t),s):c},s.paddingLeft=function(t){return arguments.length?(f="function"==typeof t?t:Nd(+t),s):f},s},ep=function(t,n,e,r,i){var o,u,a=t.children,c=a.length,f=new Array(c+1);for(f[0]=u=o=0;o<c;++o)f[o+1]=u+=a[o].value;!function t(n,e,r,i,o,u,c){if(n>=e-1){var s=a[n];return s.x0=i,s.y0=o,s.x1=u,void(s.y1=c)}var l=f[n],h=r/2+l,d=n+1,p=e-1;for(;d<p;){var v=d+p>>>1;f[v]<h?d=v+1:p=v}h-f[d-1]<f[d]-h&&n+1<d&&--d;var y=f[d]-l,g=r-y;if(u-i>c-o){var _=(i*g+u*y)/r;t(n,d,y,i,o,_,c),t(d,e,g,_,o,u,c)}else{var b=(o*g+c*y)/r;t(n,d,y,i,o,u,b),t(d,e,g,i,b,u,c)}}(0,c,t.value,n,e,r,i)},rp=function(t,n,e,r,i){(1&t.depth?Qd:zd)(t,n,e,r,i)},ip=function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,a,c,f,s,l=-1,h=u.length,d=t.value;++l<h;){for(c=(a=u[l]).children,f=a.value=0,s=c.length;f<s;++f)a.value+=c[f].value;a.dice?zd(a,e,r,i,r+=(o-r)*a.value/d):Qd(a,e,r,e+=(i-e)*a.value/d,o),d-=a.value}else t._squarify=u=Kd(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(Jd),op=function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2},up=function(t){for(var n,e,r=-1,i=t.length,o=0,u=0,a=t[i-1],c=0;++r<i;)n=a,a=t[r],c+=e=n[0]*a[1]-a[0]*n[1],o+=(n[0]+a[0])*e,u+=(n[1]+a[1])*e;return[o/(c*=3),u/c]},ap=function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])};function cp(t,n){return t[0]-n[0]||t[1]-n[1]}function fp(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&ap(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}var sp=function(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(cp),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=fp(r),u=fp(i),a=u[0]===o[0],c=u[u.length-1]===o[o.length-1],f=[];for(n=o.length-1;n>=0;--n)f.push(t[r[o[n]][2]]);for(n=+a;n<u.length-c;++n)f.push(t[r[u[n]][2]]);return f},lp=function(t,n){for(var e,r,i=t.length,o=t[i-1],u=n[0],a=n[1],c=o[0],f=o[1],s=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>a!=f>a&&u<(c-e)*(a-r)/(f-r)+e&&(s=!s),c=e,f=r;return s},hp=function(t){for(var n,e,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],c=0;++r<i;)n=u,e=a,n-=u=(o=t[r])[0],e-=a=o[1],c+=Math.sqrt(n*n+e*e);return c},dp=function(){return Math.random()},pp=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(dp),vp=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(dp),yp=function t(n){function e(){var t=vp.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(dp),gp=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(dp),_p=function t(n){function e(t){var e=gp.source(n)(t);return function(){return e()/t}}return e.source=t,e}(dp),bp=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(dp);function mp(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function xp(t,n){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(n).domain(t)}return this}var wp=Array.prototype,Mp=wp.map,Ep=wp.slice,Sp={name:"implicit"};function Tp(){var t=Zo(),n=[],e=[],r=Sp;function i(i){var o=i+"",u=t.get(o);if(!u){if(r!==Sp)return r;t.set(o,u=n.push(i))}return e[(u-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=Zo();for(var r,o,u=-1,a=e.length;++u<a;)t.has(o=(r=e[u])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=Ep.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Tp(n,e).unknown(r)},mp.apply(i,arguments),i}function Ap(){var t,n,e=Tp().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,c=0,f=.5;function s(){var e=r().length,s=o[1]<o[0],l=o[s-0],h=o[1-s];t=(h-l)/Math.max(1,e-a+2*c),u&&(t=Math.floor(t)),l+=(h-l-t*(e-a))*f,n=t*(1-a),u&&(l=Math.round(l),n=Math.round(n));var d=w(e).map(function(n){return l+t*n});return i(s?d.reverse():d)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),s()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],s()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,s()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,s()):u},e.padding=function(t){return arguments.length?(a=Math.min(1,c=+t),s()):a},e.paddingInner=function(t){return arguments.length?(a=Math.min(1,t),s()):a},e.paddingOuter=function(t){return arguments.length?(c=+t,s()):c},e.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),s()):f},e.copy=function(){return Ap(r(),o).round(u).paddingInner(a).paddingOuter(c).align(f)},mp.apply(s(),arguments)}function kp(){return function t(n){var e=n.copy;return n.padding=n.paddingOuter,delete n.paddingInner,delete n.paddingOuter,n.copy=function(){return t(e())},n}(Ap.apply(null,arguments).paddingInner(1))}var Np=function(t){return function(){return t}},Cp=function(t){return+t},Pp=[0,1];function Lp(t){return t}function Op(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:Np(isNaN(n)?NaN:.5)}function Rp(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function Dp(t,n,e){var r=t[0],i=t[1],o=n[0],u=n[1];return i<r?(r=Op(i,r),o=e(u,o)):(r=Op(r,i),o=e(o,u)),function(t){return o(r(t))}}function zp(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<r;)i[u]=Op(t[u],t[u+1]),o[u]=e(n[u],n[u+1]);return function(n){var e=c(t,n,1,r)-1;return o[e](i[e](n))}}function jp(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Up(){var t,n,e,r,i,o,u=Pp,a=Pp,c=We,f=Lp;function s(){return r=Math.min(u.length,a.length)>2?zp:Dp,i=o=null,l}function l(n){return isNaN(n=+n)?e:(i||(i=r(u.map(t),a,c)))(t(f(n)))}return l.invert=function(e){return f(n((o||(o=r(a,u.map(t),qe)))(e)))},l.domain=function(t){return arguments.length?(u=Mp.call(t,Cp),f===Lp||(f=Rp(u)),s()):u.slice()},l.range=function(t){return arguments.length?(a=Ep.call(t),s()):a.slice()},l.rangeRound=function(t){return a=Ep.call(t),c=Qe,s()},l.clamp=function(t){return arguments.length?(f=t?Rp(u):Lp,l):f!==Lp},l.interpolate=function(t){return arguments.length?(c=t,s()):c},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,s()}}function qp(t,n){return Up()(t,n)}var Ip=function(t,n,e,r){var i,o=k(t,n,e);switch((r=Ia(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=tc(o,u))||(r.precision=i),Ga(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=nc(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=Ka(o))||(r.precision=i-2*("%"===r.type))}return Ha(r)};function Fp(t){var n=t.domain;return t.ticks=function(t){var e=n();return T(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return Ip(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(r=a,a=c,c=r,r=o,o=u,u=r),(r=A(a,c,e))>0?r=A(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=A(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(c*r)/r,n(i)),t},t}function Bp(){var t=qp(Lp,Lp);return t.copy=function(){return jp(t,Bp())},mp.apply(t,arguments),Fp(t)}function Yp(t){var n;function e(t){return isNaN(t=+t)?n:t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=Mp.call(n,Cp),e):t.slice()},e.unknown=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return Yp(t).unknown(n)},t=arguments.length?Mp.call(t,Cp):[0,1],Fp(e)}var Hp=function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],u=t[i];return u<o&&(e=r,r=i,i=e,e=o,o=u,u=e),t[r]=n.floor(o),t[i]=n.ceil(u),t};function Gp(t){return Math.log(t)}function Xp(t){return Math.exp(t)}function Vp(t){return-Math.log(-t)}function Wp(t){return-Math.exp(-t)}function $p(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Zp(t){return function(n){return-t(-n)}}function Qp(t){var n,e,r=t(Gp,Xp),i=r.domain,o=10;function u(){return n=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}(o),e=function(t){return 10===t?$p:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}(o),i()[0]<0?(n=Zp(n),e=Zp(e),t(Vp,Wp)):t(Gp,Xp),r}return r.base=function(t){return arguments.length?(o=+t,u()):o},r.domain=function(t){return arguments.length?(i(t),u()):i()},r.ticks=function(t){var r,u=i(),a=u[0],c=u[u.length-1];(r=c<a)&&(h=a,a=c,c=h);var f,s,l,h=n(a),d=n(c),p=null==t?10:+t,v=[];if(!(o%1)&&d-h<p){if(h=Math.round(h)-1,d=Math.round(d)+1,a>0){for(;h<d;++h)for(s=1,f=e(h);s<o;++s)if(!((l=f*s)<a)){if(l>c)break;v.push(l)}}else for(;h<d;++h)for(s=o-1,f=e(h);s>=1;--s)if(!((l=f*s)<a)){if(l>c)break;v.push(l)}}else v=T(h,d,Math.min(d-h,p)).map(e);return r?v.reverse():v},r.tickFormat=function(t,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=Ha(i)),t===1/0)return i;null==t&&(t=10);var u=Math.max(1,o*t/r.ticks().length);return function(t){var r=t/e(Math.round(n(t)));return r*o<o-.5&&(r*=o),r<=u?i(t):""}},r.nice=function(){return i(Hp(i(),{floor:function(t){return e(Math.floor(n(t)))},ceil:function(t){return e(Math.ceil(n(t)))}}))},r}function Jp(){var t=Qp(Up()).domain([1,10]);return t.copy=function(){return jp(t,Jp()).base(t.base())},mp.apply(t,arguments),t}function Kp(t){return function(n){return Math.sign(n)*Math.log1p(Math.abs(n/t))}}function tv(t){return function(n){return Math.sign(n)*Math.expm1(Math.abs(n))*t}}function nv(t){var n=1,e=t(Kp(n),tv(n));return e.constant=function(e){return arguments.length?t(Kp(n=+e),tv(n)):n},Fp(e)}function ev(){var t=nv(Up());return t.copy=function(){return jp(t,ev()).constant(t.constant())},mp.apply(t,arguments)}function rv(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function iv(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function ov(t){return t<0?-t*t:t*t}function uv(t){var n=t(Lp,Lp),e=1;return n.exponent=function(n){return arguments.length?1===(e=+n)?t(Lp,Lp):.5===e?t(iv,ov):t(rv(e),rv(1/e)):e},Fp(n)}function av(){var t=uv(Up());return t.copy=function(){return jp(t,av()).exponent(t.exponent())},mp.apply(t,arguments),t}function cv(){return av.apply(null,arguments).exponent(.5)}function fv(){var t,n=[],e=[],i=[];function o(){var t=0,r=Math.max(1,e.length);for(i=new Array(r-1);++t<r;)i[t-1]=P(n,t/r);return u}function u(n){return isNaN(n=+n)?t:e[c(i,n)]}return u.invertExtent=function(t){var r=e.indexOf(t);return r<0?[NaN,NaN]:[r>0?i[r-1]:n[0],r<i.length?i[r]:n[n.length-1]]},u.domain=function(t){if(!arguments.length)return n.slice();n=[];for(var e,i=0,u=t.length;i<u;++i)null==(e=t[i])||isNaN(e=+e)||n.push(e);return n.sort(r),o()},u.range=function(t){return arguments.length?(e=Ep.call(t),o()):e.slice()},u.unknown=function(n){return arguments.length?(t=n,u):t},u.quantiles=function(){return i.slice()},u.copy=function(){return fv().domain(n).range(e).unknown(t)},mp.apply(u,arguments)}function sv(){var t,n=0,e=1,r=1,i=[.5],o=[0,1];function u(n){return n<=n?o[c(i,n,0,r)]:t}function a(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*e-(t-r)*n)/(r+1);return u}return u.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],a()):[n,e]},u.range=function(t){return arguments.length?(r=(o=Ep.call(t)).length-1,a()):o.slice()},u.invertExtent=function(t){var u=o.indexOf(t);return u<0?[NaN,NaN]:u<1?[n,i[0]]:u>=r?[i[r-1],e]:[i[u-1],i[u]]},u.unknown=function(n){return arguments.length?(t=n,u):u},u.thresholds=function(){return i.slice()},u.copy=function(){return sv().domain([n,e]).range(o).unknown(t)},mp.apply(Fp(u),arguments)}function lv(){var t,n=[.5],e=[0,1],r=1;function i(i){return i<=i?e[c(n,i,0,r)]:t}return i.domain=function(t){return arguments.length?(n=Ep.call(t),r=Math.min(n.length,e.length-1),i):n.slice()},i.range=function(t){return arguments.length?(e=Ep.call(t),r=Math.min(n.length,e.length-1),i):e.slice()},i.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return lv().domain(n).range(e).unknown(t)},mp.apply(i,arguments)}var hv=new Date,dv=new Date;function pv(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return pv(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return hv.setTime(+n),dv.setTime(+r),t(hv),t(dv),Math.floor(e(hv,dv))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var vv=pv(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});vv.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?pv(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):vv:null};var yv=vv,gv=vv.range,_v=6e4,bv=6048e5,mv=pv(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),xv=mv,wv=mv.range,Mv=pv(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,n){t.setTime(+t+n*_v)},function(t,n){return(n-t)/_v},function(t){return t.getMinutes()}),Ev=Mv,Sv=Mv.range,Tv=pv(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*_v)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}),Av=Tv,kv=Tv.range,Nv=pv(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*_v)/864e5},function(t){return t.getDate()-1}),Cv=Nv,Pv=Nv.range;function Lv(t){return pv(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*_v)/bv})}var Ov=Lv(0),Rv=Lv(1),Dv=Lv(2),zv=Lv(3),jv=Lv(4),Uv=Lv(5),qv=Lv(6),Iv=Ov.range,Fv=Rv.range,Bv=Dv.range,Yv=zv.range,Hv=jv.range,Gv=Uv.range,Xv=qv.range,Vv=pv(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Wv=Vv,$v=Vv.range,Zv=pv(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});Zv.every=function(t){return isFinite(t=Math.floor(t))&&t>0?pv(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var Qv=Zv,Jv=Zv.range,Kv=pv(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*_v)},function(t,n){return(n-t)/_v},function(t){return t.getUTCMinutes()}),ty=Kv,ny=Kv.range,ey=pv(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()}),ry=ey,iy=ey.range,oy=pv(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1}),uy=oy,ay=oy.range;function cy(t){return pv(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/bv})}var fy=cy(0),sy=cy(1),ly=cy(2),hy=cy(3),dy=cy(4),py=cy(5),vy=cy(6),yy=fy.range,gy=sy.range,_y=ly.range,by=hy.range,my=dy.range,xy=py.range,wy=vy.range,My=pv(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Ey=My,Sy=My.range,Ty=pv(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()});Ty.every=function(t){return isFinite(t=Math.floor(t))&&t>0?pv(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var Ay=Ty,ky=Ty.range;function Ny(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Cy(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Py(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function Ly(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,f=Hy(i),s=Gy(i),l=Hy(o),h=Gy(o),d=Hy(u),p=Gy(u),v=Hy(a),y=Gy(a),g=Hy(c),_=Gy(c),b={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:lg,e:lg,f:yg,H:hg,I:dg,j:pg,L:vg,m:gg,M:_g,p:function(t){return i[+(t.getHours()>=12)]},Q:Xg,s:Vg,S:bg,u:mg,U:xg,V:wg,w:Mg,W:Eg,x:null,X:null,y:Sg,Y:Tg,Z:Ag,"%":Gg},m={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:kg,e:kg,f:Og,H:Ng,I:Cg,j:Pg,L:Lg,m:Rg,M:Dg,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Xg,s:Vg,S:zg,u:jg,U:Ug,V:qg,w:Ig,W:Fg,x:null,X:null,y:Bg,Y:Yg,Z:Hg,"%":Gg},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=_[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return E(t,n,e,r)},d:ng,e:ng,f:ag,H:rg,I:rg,j:eg,L:ug,m:tg,M:ig,p:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},Q:fg,s:sg,S:og,u:Vy,U:Wy,V:$y,w:Xy,W:Zy,x:function(t,n,r){return E(t,e,n,r)},X:function(t,n,e){return E(t,r,n,e)},y:Jy,Y:Qy,Z:Ky,"%":cg};function w(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++a<f;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=Uy[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function M(t,n){return function(e){var r,i,o=Py(1900);if(E(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Cy(Py(o.y))).getUTCDay(),r=i>4||0===i?sy.ceil(r):sy(r),r=uy.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=n(Py(o.y))).getDay(),r=i>4||0===i?Rv.ceil(r):Rv(r),r=Cv.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Cy(Py(o.y)).getUTCDay():n(Py(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Cy(o)):n(o)}}function E(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=x[i in Uy?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return b.x=w(e,b),b.X=w(r,b),b.c=w(n,b),m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),{format:function(t){var n=w(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",Ny);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,Cy);return n.toString=function(){return t},n}}}var Oy,Ry,Dy,zy,jy,Uy={"-":"",_:" ",0:"0"},qy=/^\s*\d+/,Iy=/^%/,Fy=/[\\^$*+?|[\]().{}]/g;function By(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Yy(t){return t.replace(Fy,"\\$&")}function Hy(t){return new RegExp("^(?:"+t.map(Yy).join("|")+")","i")}function Gy(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Xy(t,n,e){var r=qy.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Vy(t,n,e){var r=qy.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Wy(t,n,e){var r=qy.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function $y(t,n,e){var r=qy.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Zy(t,n,e){var r=qy.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Qy(t,n,e){var r=qy.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Jy(t,n,e){var r=qy.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Ky(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function tg(t,n,e){var r=qy.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function ng(t,n,e){var r=qy.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function eg(t,n,e){var r=qy.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function rg(t,n,e){var r=qy.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function ig(t,n,e){var r=qy.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function og(t,n,e){var r=qy.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function ug(t,n,e){var r=qy.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function ag(t,n,e){var r=qy.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function cg(t,n,e){var r=Iy.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function fg(t,n,e){var r=qy.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function sg(t,n,e){var r=qy.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function lg(t,n){return By(t.getDate(),n,2)}function hg(t,n){return By(t.getHours(),n,2)}function dg(t,n){return By(t.getHours()%12||12,n,2)}function pg(t,n){return By(1+Cv.count(Qv(t),t),n,3)}function vg(t,n){return By(t.getMilliseconds(),n,3)}function yg(t,n){return vg(t,n)+"000"}function gg(t,n){return By(t.getMonth()+1,n,2)}function _g(t,n){return By(t.getMinutes(),n,2)}function bg(t,n){return By(t.getSeconds(),n,2)}function mg(t){var n=t.getDay();return 0===n?7:n}function xg(t,n){return By(Ov.count(Qv(t),t),n,2)}function wg(t,n){var e=t.getDay();return t=e>=4||0===e?jv(t):jv.ceil(t),By(jv.count(Qv(t),t)+(4===Qv(t).getDay()),n,2)}function Mg(t){return t.getDay()}function Eg(t,n){return By(Rv.count(Qv(t),t),n,2)}function Sg(t,n){return By(t.getFullYear()%100,n,2)}function Tg(t,n){return By(t.getFullYear()%1e4,n,4)}function Ag(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+By(n/60|0,"0",2)+By(n%60,"0",2)}function kg(t,n){return By(t.getUTCDate(),n,2)}function Ng(t,n){return By(t.getUTCHours(),n,2)}function Cg(t,n){return By(t.getUTCHours()%12||12,n,2)}function Pg(t,n){return By(1+uy.count(Ay(t),t),n,3)}function Lg(t,n){return By(t.getUTCMilliseconds(),n,3)}function Og(t,n){return Lg(t,n)+"000"}function Rg(t,n){return By(t.getUTCMonth()+1,n,2)}function Dg(t,n){return By(t.getUTCMinutes(),n,2)}function zg(t,n){return By(t.getUTCSeconds(),n,2)}function jg(t){var n=t.getUTCDay();return 0===n?7:n}function Ug(t,n){return By(fy.count(Ay(t),t),n,2)}function qg(t,n){var e=t.getUTCDay();return t=e>=4||0===e?dy(t):dy.ceil(t),By(dy.count(Ay(t),t)+(4===Ay(t).getUTCDay()),n,2)}function Ig(t){return t.getUTCDay()}function Fg(t,n){return By(sy.count(Ay(t),t),n,2)}function Bg(t,n){return By(t.getUTCFullYear()%100,n,2)}function Yg(t,n){return By(t.getUTCFullYear()%1e4,n,4)}function Hg(){return"+0000"}function Gg(){return"%"}function Xg(t){return+t}function Vg(t){return Math.floor(+t/1e3)}function Wg(t){return Oy=Ly(t),Ry=Oy.format,Dy=Oy.parse,zy=Oy.utcFormat,jy=Oy.utcParse,Oy}Wg({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var $g=Date.prototype.toISOString?function(t){return t.toISOString()}:zy("%Y-%m-%dT%H:%M:%S.%LZ");var Zg=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:jy("%Y-%m-%dT%H:%M:%S.%LZ"),Qg=1e3,Jg=60*Qg,Kg=60*Jg,t_=24*Kg,n_=7*t_,e_=30*t_,r_=365*t_;function i_(t){return new Date(t)}function o_(t){return t instanceof Date?+t:+new Date(+t)}function u_(t,n,e,r,o,u,a,c,f){var s=qp(Lp,Lp),l=s.invert,h=s.domain,d=f(".%L"),p=f(":%S"),v=f("%I:%M"),y=f("%I %p"),g=f("%a %d"),_=f("%b %d"),b=f("%B"),m=f("%Y"),x=[[a,1,Qg],[a,5,5*Qg],[a,15,15*Qg],[a,30,30*Qg],[u,1,Jg],[u,5,5*Jg],[u,15,15*Jg],[u,30,30*Jg],[o,1,Kg],[o,3,3*Kg],[o,6,6*Kg],[o,12,12*Kg],[r,1,t_],[r,2,2*t_],[e,1,n_],[n,1,e_],[n,3,3*e_],[t,1,r_]];function w(i){return(a(i)<i?d:u(i)<i?p:o(i)<i?v:r(i)<i?y:n(i)<i?e(i)<i?g:_:t(i)<i?b:m)(i)}function M(n,e,r,o){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,a=i(function(t){return t[2]}).right(x,u);a===x.length?(o=k(e/r_,r/r_,n),n=t):a?(o=(a=x[u/x[a-1][2]<x[a][2]/u?a-1:a])[1],n=a[0]):(o=Math.max(k(e,r,n),1),n=c)}return null==o?n:n.every(o)}return s.invert=function(t){return new Date(l(t))},s.domain=function(t){return arguments.length?h(Mp.call(t,o_)):h().map(i_)},s.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],u=o<i;return u&&(e=i,i=o,o=e),e=(e=M(t,i,o,n))?e.range(i,o+1):[],u?e.reverse():e},s.tickFormat=function(t,n){return null==n?w:f(n)},s.nice=function(t,n){var e=h();return(t=M(t,e[0],e[e.length-1],n))?h(Hp(e,t)):s},s.copy=function(){return jp(s,u_(t,n,e,r,o,u,a,c,f))},s}var a_=function(){return mp.apply(u_(Qv,Wv,Ov,Cv,Av,Ev,xv,yv,Ry).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},c_=function(){return mp.apply(u_(Ay,Ey,fy,uy,ry,ty,xv,yv,zy).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)};function f_(){var t,n,e,r,i,o=0,u=1,a=Lp,c=!1;function f(n){return isNaN(n=+n)?i:a(0===e?.5:(n=(r(n)-t)*e,c?Math.max(0,Math.min(1,n)):n))}return f.domain=function(i){return arguments.length?(t=r(o=+i[0]),n=r(u=+i[1]),e=t===n?0:1/(n-t),f):[o,u]},f.clamp=function(t){return arguments.length?(c=!!t,f):c},f.interpolator=function(t){return arguments.length?(a=t,f):a},f.unknown=function(t){return arguments.length?(i=t,f):i},function(i){return r=i,t=i(o),n=i(u),e=t===n?0:1/(n-t),f}}function s_(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function l_(){var t=Fp(f_()(Lp));return t.copy=function(){return s_(t,l_())},xp.apply(t,arguments)}function h_(){var t=Qp(f_()).domain([1,10]);return t.copy=function(){return s_(t,h_()).base(t.base())},xp.apply(t,arguments)}function d_(){var t=nv(f_());return t.copy=function(){return s_(t,d_()).constant(t.constant())},xp.apply(t,arguments)}function p_(){var t=uv(f_());return t.copy=function(){return s_(t,p_()).exponent(t.exponent())},xp.apply(t,arguments)}function v_(){return p_.apply(null,arguments).exponent(.5)}function y_(){var t=[],n=Lp;function e(e){if(!isNaN(e=+e))return n((c(t,e)-1)/(t.length-1))}return e.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var i,o=0,u=n.length;o<u;++o)null==(i=n[o])||isNaN(i=+i)||t.push(i);return t.sort(r),e},e.interpolator=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return y_(n).domain(t)},xp.apply(e,arguments)}function g_(){var t,n,e,r,i,o,u,a=0,c=.5,f=1,s=Lp,l=!1;function h(t){return isNaN(t=+t)?u:(t=.5+((t=+o(t))-n)*(t<n?r:i),s(l?Math.max(0,Math.min(1,t)):t))}return h.domain=function(u){return arguments.length?(t=o(a=+u[0]),n=o(c=+u[1]),e=o(f=+u[2]),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h):[a,c,f]},h.clamp=function(t){return arguments.length?(l=!!t,h):l},h.interpolator=function(t){return arguments.length?(s=t,h):s},h.unknown=function(t){return arguments.length?(u=t,h):u},function(u){return o=u,t=u(a),n=u(c),e=u(f),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h}}function __(){var t=Fp(g_()(Lp));return t.copy=function(){return s_(t,__())},xp.apply(t,arguments)}function b_(){var t=Qp(g_()).domain([.1,1,10]);return t.copy=function(){return s_(t,b_()).base(t.base())},xp.apply(t,arguments)}function m_(){var t=nv(g_());return t.copy=function(){return s_(t,m_()).constant(t.constant())},xp.apply(t,arguments)}function x_(){var t=uv(g_());return t.copy=function(){return s_(t,x_()).exponent(t.exponent())},xp.apply(t,arguments)}function w_(){return x_.apply(null,arguments).exponent(.5)}var M_=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e},E_=M_("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),S_=M_("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),T_=M_("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),A_=M_("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),k_=M_("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),N_=M_("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),C_=M_("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),P_=M_("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),L_=M_("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),O_=function(t){return De(t[t.length-1])},R_=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(M_),D_=O_(R_),z_=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(M_),j_=O_(z_),U_=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(M_),q_=O_(U_),I_=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(M_),F_=O_(I_),B_=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(M_),Y_=O_(B_),H_=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(M_),G_=O_(H_),X_=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(M_),V_=O_(X_),W_=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(M_),$_=O_(W_),Z_=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(M_),Q_=O_(Z_),J_=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(M_),K_=O_(J_),tb=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(M_),nb=O_(tb),eb=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(M_),rb=O_(eb),ib=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(M_),ob=O_(ib),ub=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(M_),ab=O_(ub),cb=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(M_),fb=O_(cb),sb=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(M_),lb=O_(sb),hb=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(M_),db=O_(hb),pb=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(M_),vb=O_(pb),yb=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(M_),gb=O_(yb),_b=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(M_),bb=O_(_b),mb=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(M_),xb=O_(mb),wb=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(M_),Mb=O_(wb),Eb=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(M_),Sb=O_(Eb),Tb=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(M_),Ab=O_(Tb),kb=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(M_),Nb=O_(kb),Cb=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(M_),Pb=O_(Cb),Lb=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(M_),Ob=O_(Lb),Rb=yr(Me(300,.5,0),Me(-240,.5,1)),Db=yr(Me(-100,.75,.35),Me(80,1.5,.8)),zb=yr(Me(260,.75,.35),Me(80,1.5,.8)),jb=Me(),Ub=function(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return jb.h=360*t-100,jb.s=1.5-1.5*n,jb.l=.8-.9*n,jb+""},qb=Yn(),Ib=Math.PI/3,Fb=2*Math.PI/3,Bb=function(t){var n;return t=(.5-t)*Math.PI,qb.r=255*(n=Math.sin(t))*n,qb.g=255*(n=Math.sin(t+Ib))*n,qb.b=255*(n=Math.sin(t+Fb))*n,qb+""};function Yb(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}var Hb=Yb(M_("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Gb=Yb(M_("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Xb=Yb(M_("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Vb=Yb(M_("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Wb=function(t){return function(){return t}},$b=Math.abs,Zb=Math.atan2,Qb=Math.cos,Jb=Math.max,Kb=Math.min,tm=Math.sin,nm=Math.sqrt,em=1e-12,rm=Math.PI,im=rm/2,om=2*rm;function um(t){return t>=1?im:t<=-1?-im:Math.asin(t)}function am(t){return t.innerRadius}function cm(t){return t.outerRadius}function fm(t){return t.startAngle}function sm(t){return t.endAngle}function lm(t){return t&&t.padAngle}function hm(t,n,e,r,i,o,u){var a=t-e,c=n-r,f=(u?o:-o)/nm(a*a+c*c),s=f*c,l=-f*a,h=t+s,d=n+l,p=e+s,v=r+l,y=(h+p)/2,g=(d+v)/2,_=p-h,b=v-d,m=_*_+b*b,x=i-o,w=h*v-p*d,M=(b<0?-1:1)*nm(Jb(0,x*x*m-w*w)),E=(w*b-_*M)/m,S=(-w*_-b*M)/m,T=(w*b+_*M)/m,A=(-w*_+b*M)/m,k=E-y,N=S-g,C=T-y,P=A-g;return k*k+N*N>C*C+P*P&&(E=T,S=A),{cx:E,cy:S,x01:-s,y01:-l,x11:E*(i/x-1),y11:S*(i/x-1)}}var dm=function(){var t=am,n=cm,e=Wb(0),r=null,i=fm,o=sm,u=lm,a=null;function c(){var c,f,s,l=+t.apply(this,arguments),h=+n.apply(this,arguments),d=i.apply(this,arguments)-im,p=o.apply(this,arguments)-im,v=$b(p-d),y=p>d;if(a||(a=c=Fo()),h<l&&(f=h,h=l,l=f),h>em)if(v>om-em)a.moveTo(h*Qb(d),h*tm(d)),a.arc(0,0,h,d,p,!y),l>em&&(a.moveTo(l*Qb(p),l*tm(p)),a.arc(0,0,l,p,d,y));else{var g,_,b=d,m=p,x=d,w=p,M=v,E=v,S=u.apply(this,arguments)/2,T=S>em&&(r?+r.apply(this,arguments):nm(l*l+h*h)),A=Kb($b(h-l)/2,+e.apply(this,arguments)),k=A,N=A;if(T>em){var C=um(T/l*tm(S)),P=um(T/h*tm(S));(M-=2*C)>em?(x+=C*=y?1:-1,w-=C):(M=0,x=w=(d+p)/2),(E-=2*P)>em?(b+=P*=y?1:-1,m-=P):(E=0,b=m=(d+p)/2)}var L=h*Qb(b),O=h*tm(b),R=l*Qb(w),D=l*tm(w);if(A>em){var z,j=h*Qb(m),U=h*tm(m),q=l*Qb(x),I=l*tm(x);if(v<rm&&(z=function(t,n,e,r,i,o,u,a){var c=e-t,f=r-n,s=u-i,l=a-o,h=l*c-s*f;if(!(h*h<em))return[t+(h=(s*(n-o)-l*(t-i))/h)*c,n+h*f]}(L,O,q,I,j,U,R,D))){var F=L-z[0],B=O-z[1],Y=j-z[0],H=U-z[1],G=1/tm(((s=(F*Y+B*H)/(nm(F*F+B*B)*nm(Y*Y+H*H)))>1?0:s<-1?rm:Math.acos(s))/2),X=nm(z[0]*z[0]+z[1]*z[1]);k=Kb(A,(l-X)/(G-1)),N=Kb(A,(h-X)/(G+1))}}E>em?N>em?(g=hm(q,I,L,O,h,N,y),_=hm(j,U,R,D,h,N,y),a.moveTo(g.cx+g.x01,g.cy+g.y01),N<A?a.arc(g.cx,g.cy,N,Zb(g.y01,g.x01),Zb(_.y01,_.x01),!y):(a.arc(g.cx,g.cy,N,Zb(g.y01,g.x01),Zb(g.y11,g.x11),!y),a.arc(0,0,h,Zb(g.cy+g.y11,g.cx+g.x11),Zb(_.cy+_.y11,_.cx+_.x11),!y),a.arc(_.cx,_.cy,N,Zb(_.y11,_.x11),Zb(_.y01,_.x01),!y))):(a.moveTo(L,O),a.arc(0,0,h,b,m,!y)):a.moveTo(L,O),l>em&&M>em?k>em?(g=hm(R,D,j,U,l,-k,y),_=hm(L,O,q,I,l,-k,y),a.lineTo(g.cx+g.x01,g.cy+g.y01),k<A?a.arc(g.cx,g.cy,k,Zb(g.y01,g.x01),Zb(_.y01,_.x01),!y):(a.arc(g.cx,g.cy,k,Zb(g.y01,g.x01),Zb(g.y11,g.x11),!y),a.arc(0,0,l,Zb(g.cy+g.y11,g.cx+g.x11),Zb(_.cy+_.y11,_.cx+_.x11),y),a.arc(_.cx,_.cy,k,Zb(_.y11,_.x11),Zb(_.y01,_.x01),!y))):a.arc(0,0,l,w,x,y):a.lineTo(R,D)}else a.moveTo(0,0);if(a.closePath(),c)return a=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-rm/2;return[Qb(r)*e,tm(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:Wb(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Wb(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Wb(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Wb(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:Wb(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Wb(+t),c):o},c.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:Wb(+t),c):u},c.context=function(t){return arguments.length?(a=null==t?null:t,c):a},c};function pm(t){this._context=t}pm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var vm=function(t){return new pm(t)};function ym(t){return t[0]}function gm(t){return t[1]}var _m=function(){var t=ym,n=gm,e=Wb(!0),r=null,i=vm,o=null;function u(u){var a,c,f,s=u.length,l=!1;for(null==r&&(o=i(f=Fo())),a=0;a<=s;++a)!(a<s&&e(c=u[a],a,u))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(c,a,u),+n(c,a,u));if(f)return o=null,f+""||null}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:Wb(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:Wb(+t),u):n},u.defined=function(t){return arguments.length?(e="function"==typeof t?t:Wb(!!t),u):e},u.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),u):r},u},bm=function(){var t=ym,n=null,e=Wb(0),r=gm,i=Wb(!0),o=null,u=vm,a=null;function c(c){var f,s,l,h,d,p=c.length,v=!1,y=new Array(p),g=new Array(p);for(null==o&&(a=u(d=Fo())),f=0;f<=p;++f){if(!(f<p&&i(h=c[f],f,c))===v)if(v=!v)s=f,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),l=f-1;l>=s;--l)a.point(y[l],g[l]);a.lineEnd(),a.areaEnd()}v&&(y[f]=+t(h,f,c),g[f]=+e(h,f,c),a.point(n?+n(h,f,c):y[f],r?+r(h,f,c):g[f]))}if(d)return a=null,d+""||null}function f(){return _m().defined(i).curve(u).context(o)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:Wb(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:Wb(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:Wb(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:Wb(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:Wb(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Wb(+t),c):r},c.lineX0=c.lineY0=function(){return f().x(t).y(e)},c.lineY1=function(){return f().x(t).y(r)},c.lineX1=function(){return f().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:Wb(!!t),c):i},c.curve=function(t){return arguments.length?(u=t,null!=o&&(a=u(o)),c):u},c.context=function(t){return arguments.length?(null==t?o=a=null:a=u(o=t),c):o},c},mm=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},xm=function(t){return t},wm=function(){var t=xm,n=mm,e=null,r=Wb(0),i=Wb(om),o=Wb(0);function u(u){var a,c,f,s,l,h=u.length,d=0,p=new Array(h),v=new Array(h),y=+r.apply(this,arguments),g=Math.min(om,Math.max(-om,i.apply(this,arguments)-y)),_=Math.min(Math.abs(g)/h,o.apply(this,arguments)),b=_*(g<0?-1:1);for(a=0;a<h;++a)(l=v[p[a]=a]=+t(u[a],a,u))>0&&(d+=l);for(null!=n?p.sort(function(t,e){return n(v[t],v[e])}):null!=e&&p.sort(function(t,n){return e(u[t],u[n])}),a=0,f=d?(g-h*b)/d:0;a<h;++a,y=s)c=p[a],s=y+((l=v[c])>0?l*f:0)+b,v[c]={data:u[c],index:a,value:l,startAngle:y,endAngle:s,padAngle:_};return v}return u.value=function(n){return arguments.length?(t="function"==typeof n?n:Wb(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Wb(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Wb(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:Wb(+t),u):o},u},Mm=Sm(vm);function Em(t){this._curve=t}function Sm(t){function n(n){return new Em(t(n))}return n._curve=t,n}function Tm(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(Sm(t)):n()._curve},t}Em.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var Am=function(){return Tm(_m().curve(Mm))},km=function(){var t=bm().curve(Mm),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return Tm(e())},delete t.lineX0,t.lineEndAngle=function(){return Tm(r())},delete t.lineX1,t.lineInnerRadius=function(){return Tm(i())},delete t.lineY0,t.lineOuterRadius=function(){return Tm(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(Sm(t)):n()._curve},t},Nm=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]},Cm=Array.prototype.slice;function Pm(t){return t.source}function Lm(t){return t.target}function Om(t){var n=Pm,e=Lm,r=ym,i=gm,o=null;function u(){var u,a=Cm.call(arguments),c=n.apply(this,a),f=e.apply(this,a);if(o||(o=u=Fo()),t(o,+r.apply(this,(a[0]=c,a)),+i.apply(this,a),+r.apply(this,(a[0]=f,a)),+i.apply(this,a)),u)return o=null,u+""||null}return u.source=function(t){return arguments.length?(n=t,u):n},u.target=function(t){return arguments.length?(e=t,u):e},u.x=function(t){return arguments.length?(r="function"==typeof t?t:Wb(+t),u):r},u.y=function(t){return arguments.length?(i="function"==typeof t?t:Wb(+t),u):i},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}function Rm(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function Dm(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function zm(t,n,e,r,i){var o=Nm(n,e),u=Nm(n,e=(e+i)/2),a=Nm(r,e),c=Nm(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],c[0],c[1])}function jm(){return Om(Rm)}function Um(){return Om(Dm)}function qm(){var t=Om(zm);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var Im={draw:function(t,n){var e=Math.sqrt(n/rm);t.moveTo(e,0),t.arc(0,0,e,0,om)}},Fm={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},Bm=Math.sqrt(1/3),Ym=2*Bm,Hm={draw:function(t,n){var e=Math.sqrt(n/Ym),r=e*Bm;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},Gm=Math.sin(rm/10)/Math.sin(7*rm/10),Xm=Math.sin(om/10)*Gm,Vm=-Math.cos(om/10)*Gm,Wm={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=Xm*e,i=Vm*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var u=om*o/5,a=Math.cos(u),c=Math.sin(u);t.lineTo(c*e,-a*e),t.lineTo(a*r-c*i,c*r+a*i)}t.closePath()}},$m={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},Zm=Math.sqrt(3),Qm={draw:function(t,n){var e=-Math.sqrt(n/(3*Zm));t.moveTo(0,2*e),t.lineTo(-Zm*e,-e),t.lineTo(Zm*e,-e),t.closePath()}},Jm=Math.sqrt(3)/2,Km=1/Math.sqrt(12),tx=3*(Km/2+1),nx={draw:function(t,n){var e=Math.sqrt(n/tx),r=e/2,i=e*Km,o=r,u=e*Km+e,a=-o,c=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,c),t.lineTo(-.5*r-Jm*i,Jm*r+-.5*i),t.lineTo(-.5*o-Jm*u,Jm*o+-.5*u),t.lineTo(-.5*a-Jm*c,Jm*a+-.5*c),t.lineTo(-.5*r+Jm*i,-.5*i-Jm*r),t.lineTo(-.5*o+Jm*u,-.5*u-Jm*o),t.lineTo(-.5*a+Jm*c,-.5*c-Jm*a),t.closePath()}},ex=[Im,Fm,Hm,$m,Wm,Qm,nx],rx=function(){var t=Wb(Im),n=Wb(64),e=null;function r(){var r;if(e||(e=r=Fo()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:Wb(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:Wb(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r},ix=function(){};function ox(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function ux(t){this._context=t}ux.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:ox(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:ox(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var ax=function(t){return new ux(t)};function cx(t){this._context=t}cx.prototype={areaStart:ix,areaEnd:ix,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:ox(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var fx=function(t){return new cx(t)};function sx(t){this._context=t}sx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:ox(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var lx=function(t){return new sx(t)};function hx(t,n){this._basis=new ux(t),this._beta=n}hx.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*u),this._beta*n[c]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var dx=function t(n){function e(t){return 1===n?new ux(t):new hx(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function px(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function vx(t,n){this._context=t,this._k=(1-n)/6}vx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:px(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:px(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var yx=function t(n){function e(t){return new vx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function gx(t,n){this._context=t,this._k=(1-n)/6}gx.prototype={areaStart:ix,areaEnd:ix,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:px(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var _x=function t(n){function e(t){return new gx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function bx(t,n){this._context=t,this._k=(1-n)/6}bx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:px(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var mx=function t(n){function e(t){return new bx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function xx(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>em){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>em){var f=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*f+t._x1*t._l23_2a-n*t._l12_2a)/s,u=(u*f+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function wx(t,n){this._context=t,this._alpha=n}wx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:xx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Mx=function t(n){function e(t){return n?new wx(t,n):new vx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Ex(t,n){this._context=t,this._alpha=n}Ex.prototype={areaStart:ix,areaEnd:ix,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:xx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Sx=function t(n){function e(t){return n?new Ex(t,n):new gx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Tx(t,n){this._context=t,this._alpha=n}Tx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:xx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Ax=function t(n){function e(t){return n?new Tx(t,n):new bx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function kx(t){this._context=t}kx.prototype={areaStart:ix,areaEnd:ix,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};var Nx=function(t){return new kx(t)};function Cx(t){return t<0?-1:1}function Px(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return(Cx(o)+Cx(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function Lx(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Ox(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function Rx(t){this._context=t}function Dx(t){this._context=new zx(t)}function zx(t){this._context=t}function jx(t){return new Rx(t)}function Ux(t){return new Dx(t)}function qx(t){this._context=t}function Ix(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}Rx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ox(this,this._t0,Lx(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Ox(this,Lx(this,e=Px(this,t,n)),e);break;default:Ox(this,this._t0,e=Px(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Dx.prototype=Object.create(Rx.prototype)).point=function(t,n){Rx.prototype.point.call(this,n,t)},zx.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},qx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Ix(t),i=Ix(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var Fx=function(t){return new qx(t)};function Bx(t,n){this._context=t,this._t=n}Bx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var Yx=function(t){return new Bx(t,.5)};function Hx(t){return new Bx(t,0)}function Gx(t){return new Bx(t,1)}var Xx=function(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],a=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<a;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},Vx=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e};function Wx(t,n){return t[n]}var $x=function(){var t=Wb([]),n=Vx,e=Xx,r=Wx;function i(i){var o,u,a=t.apply(this,arguments),c=i.length,f=a.length,s=new Array(f);for(o=0;o<f;++o){for(var l,h=a[o],d=s[o]=new Array(c),p=0;p<c;++p)d[p]=l=[0,+r(i[p],h,p,i)],l.data=i[p];d.key=h}for(o=0,u=n(s);o<f;++o)s[u[o]].index=o;return e(s,u),s}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:Wb(Cm.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:Wb(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?Vx:"function"==typeof t?t:Wb(Cm.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?Xx:t,i):e},i},Zx=function(t,n){if((r=t.length)>0){for(var e,r,i,o=0,u=t[0].length;o<u;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}Xx(t,n)}},Qx=function(t,n){if((a=t.length)>0)for(var e,r,i,o,u,a,c=0,f=t[n[0]].length;c<f;++c)for(o=u=0,e=0;e<a;++e)(i=(r=t[n[e]][c])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):r[0]=o},Jx=function(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<e;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}Xx(t,n)}},Kx=function(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,u=1;u<r;++u){for(var a=0,c=0,f=0;a<i;++a){for(var s=t[n[a]],l=s[u][1]||0,h=(l-(s[u-1][1]||0))/2,d=0;d<a;++d){var p=t[n[d]];h+=(p[u][1]||0)-(p[u-1][1]||0)}c+=l,f+=h*l}e[u-1][1]+=e[u-1][0]=o,c&&(o-=f/c)}e[u-1][1]+=e[u-1][0]=o,Xx(t,n)}},tw=function(t){var n=t.map(nw);return Vx(t).sort(function(t,e){return n[t]-n[e]})};function nw(t){for(var n,e=-1,r=0,i=t.length,o=-1/0;++e<i;)(n=+t[e][1])>o&&(o=n,r=e);return r}var ew=function(t){var n=t.map(rw);return Vx(t).sort(function(t,e){return n[t]-n[e]})};function rw(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}var iw=function(t){return ew(t).reverse()},ow=function(t){var n,e,r=t.length,i=t.map(rw),o=tw(t),u=0,a=0,c=[],f=[];for(n=0;n<r;++n)e=o[n],u<a?(u+=i[e],c.push(e)):(a+=i[e],f.push(e));return f.reverse().concat(c)},uw=function(t){return Vx(t).reverse()},aw=function(t){return function(){return t}};function cw(t){return t[0]}function fw(t){return t[1]}function sw(){this._=null}function lw(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function hw(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function dw(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function pw(t){for(;t.L;)t=t.L;return t}sw.prototype={constructor:sw,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=pw(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(hw(this,e),e=(t=e).U),e.C=!1,r.C=!0,dw(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(dw(this,e),e=(t=e).U),e.C=!1,r.C=!0,hw(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?pw(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,hw(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,dw(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,hw(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,dw(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,hw(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,dw(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var vw=sw;function yw(t,n,e,r){var i=[null,null],o=Iw.push(i)-1;return i.left=t,i.right=n,e&&_w(i,t,n,e),r&&_w(i,n,t,r),Uw[t.index].halfedges.push(o),Uw[n.index].halfedges.push(o),i}function gw(t,n,e){var r=[n,e];return r.left=t,r}function _w(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function bw(t,n,e,r,i){var o,u=t[0],a=t[1],c=u[0],f=u[1],s=0,l=1,h=a[0]-c,d=a[1]-f;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<s)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>s&&(s=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>s&&(s=o)}else if(h>0){if(o<s)return;o<l&&(l=o)}if(o=e-f,d||!(o>0)){if(o/=d,d<0){if(o<s)return;o<l&&(l=o)}else if(d>0){if(o>l)return;o>s&&(s=o)}if(o=i-f,d||!(o<0)){if(o/=d,d<0){if(o>l)return;o>s&&(s=o)}else if(d>0){if(o<s)return;o<l&&(l=o)}return!(s>0||l<1)||(s>0&&(t[0]=[c+s*h,f+s*d]),l<1&&(t[1]=[c+l*h,f+l*d]),!0)}}}}}function mw(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,c=t[0],f=t.left,s=t.right,l=f[0],h=f[1],d=s[0],p=s[1],v=(l+d)/2,y=(h+p)/2;if(p===h){if(v<n||v>=r)return;if(l>d){if(c){if(c[1]>=i)return}else c=[v,e];o=[v,i]}else{if(c){if(c[1]<e)return}else c=[v,i];o=[v,e]}}else if(a=y-(u=(l-d)/(p-h))*v,u<-1||u>1)if(l>d){if(c){if(c[1]>=i)return}else c=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<p){if(c){if(c[0]>=r)return}else c=[n,u*n+a];o=[r,u*r+a]}else{if(c){if(c[0]<n)return}else c=[r,u*r+a];o=[n,u*n+a]}return t[0]=c,t[1]=o,!0}function xw(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function ww(t,n){return n[+(n.left!==t.site)]}function Mw(t,n){return n[+(n.left===t.site)]}var Ew,Sw=[];function Tw(){lw(this),this.x=this.y=this.arc=this.site=this.cy=null}function Aw(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],c=r[0]-u,f=r[1]-a,s=o[0]-u,l=o[1]-a,h=2*(c*l-f*s);if(!(h>=-Bw)){var d=c*c+f*f,p=s*s+l*l,v=(l*d-f*p)/h,y=(c*p-s*d)/h,g=Sw.pop()||new Tw;g.arc=t,g.site=i,g.x=v+u,g.y=(g.cy=y+a)+Math.sqrt(v*v+y*y),t.circle=g;for(var _=null,b=qw._;b;)if(g.y<b.y||g.y===b.y&&g.x<=b.x){if(!b.L){_=b.P;break}b=b.L}else{if(!b.R){_=b;break}b=b.R}qw.insert(_,g),_||(Ew=g)}}}}function kw(t){var n=t.circle;n&&(n.P||(Ew=n.N),qw.remove(n),Sw.push(n),lw(n),t.circle=null)}var Nw=[];function Cw(){lw(this),this.edge=this.site=this.circle=null}function Pw(t){var n=Nw.pop()||new Cw;return n.site=t,n}function Lw(t){kw(t),jw.remove(t),Nw.push(t),lw(t)}function Ow(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];Lw(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<Fw&&Math.abs(r-c.circle.cy)<Fw;)o=c.P,a.unshift(c),Lw(c),c=o;a.unshift(c),kw(c);for(var f=u;f.circle&&Math.abs(e-f.circle.x)<Fw&&Math.abs(r-f.circle.cy)<Fw;)u=f.N,a.push(f),Lw(f),f=u;a.push(f),kw(f);var s,l=a.length;for(s=1;s<l;++s)f=a[s],c=a[s-1],_w(f.edge,c.site,f.site,i);c=a[0],(f=a[l-1]).edge=yw(c.site,f.site,null,i),Aw(c),Aw(f)}function Rw(t){for(var n,e,r,i,o=t[0],u=t[1],a=jw._;a;)if((r=Dw(a,u)-o)>Fw)a=a.L;else{if(!((i=o-zw(a,u))>Fw)){r>-Fw?(n=a.P,e=a):i>-Fw?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){Uw[t.index]={site:t,halfedges:[]}}(t);var c=Pw(t);if(jw.insert(n,c),n||e){if(n===e)return kw(n),e=Pw(n.site),jw.insert(c,e),c.edge=e.edge=yw(n.site,c.site),Aw(n),void Aw(e);if(e){kw(n),kw(e);var f=n.site,s=f[0],l=f[1],h=t[0]-s,d=t[1]-l,p=e.site,v=p[0]-s,y=p[1]-l,g=2*(h*y-d*v),_=h*h+d*d,b=v*v+y*y,m=[(y*_-d*b)/g+s,(h*b-v*_)/g+l];_w(e.edge,f,p,m),c.edge=yw(f,t,null,m),e.edge=yw(t,p,null,m),Aw(n),Aw(e)}else c.edge=yw(n.site,c.site)}}function Dw(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],c=e[1],f=c-n;if(!f)return a;var s=a-r,l=1/o-1/f,h=s/f;return l?(-h+Math.sqrt(h*h-2*l*(s*s/(-2*f)-c+f/2+i-o/2)))/l+r:(r+a)/2}function zw(t,n){var e=t.N;if(e)return Dw(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var jw,Uw,qw,Iw,Fw=1e-6,Bw=1e-12;function Yw(t,n){return n[1]-t[1]||n[0]-t[0]}function Hw(t,n){var e,r,i,o=t.sort(Yw).pop();for(Iw=[],Uw=new Array(t.length),jw=new vw,qw=new vw;;)if(i=Ew,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(Rw(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;Ow(i.arc)}if(function(){for(var t,n,e,r,i=0,o=Uw.length;i<o;++i)if((t=Uw[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=xw(t,Iw[n[e]]);for(u.sort(function(t,n){return a[n]-a[t]}),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],c=+n[1][0],f=+n[1][1];!function(t,n,e,r){for(var i,o=Iw.length;o--;)mw(i=Iw[o],t,n,e,r)&&bw(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Fw||Math.abs(i[0][1]-i[1][1])>Fw)||delete Iw[o]}(u,a,c,f),function(t,n,e,r){var i,o,u,a,c,f,s,l,h,d,p,v,y=Uw.length,g=!0;for(i=0;i<y;++i)if(o=Uw[i]){for(u=o.site,a=(c=o.halfedges).length;a--;)Iw[c[a]]||c.splice(a,1);for(a=0,f=c.length;a<f;)p=(d=Mw(o,Iw[c[a]]))[0],v=d[1],l=(s=ww(o,Iw[c[++a%f]]))[0],h=s[1],(Math.abs(p-l)>Fw||Math.abs(v-h)>Fw)&&(c.splice(a,0,Iw.push(gw(u,d,Math.abs(p-t)<Fw&&r-v>Fw?[t,Math.abs(l-t)<Fw?h:r]:Math.abs(v-r)<Fw&&e-p>Fw?[Math.abs(h-r)<Fw?l:e,r]:Math.abs(p-e)<Fw&&v-n>Fw?[e,Math.abs(l-e)<Fw?h:n]:Math.abs(v-n)<Fw&&p-t>Fw?[Math.abs(h-n)<Fw?l:t,n]:null))-1),++f);f&&(g=!1)}if(g){var _,b,m,x=1/0;for(i=0,g=null;i<y;++i)(o=Uw[i])&&(m=(_=(u=o.site)[0]-t)*_+(b=u[1]-n)*b)<x&&(x=m,g=o);if(g){var w=[t,n],M=[t,r],E=[e,r],S=[e,n];g.halfedges.push(Iw.push(gw(u=g.site,w,M))-1,Iw.push(gw(u,M,E))-1,Iw.push(gw(u,E,S))-1,Iw.push(gw(u,S,w))-1)}}for(i=0;i<y;++i)(o=Uw[i])&&(o.halfedges.length||delete Uw[i])}(u,a,c,f)}this.edges=Iw,this.cells=Uw,jw=qw=Iw=Uw=null}Hw.prototype={constructor:Hw,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return ww(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a,c,f,s=e.site,l=-1,h=n[i[o-1]],d=h.left===s?h.right:h.left;++l<o;)u=d,d=(h=n[i[l]]).left===s?h.right:h.left,u&&d&&r<u.index&&r<d.index&&(c=u,f=d,((a=s)[0]-f[0])*(c[1]-a[1])-(a[0]-c[0])*(f[1]-a[1])<0)&&t.push([s.data,u.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var c=t-i.site[0],f=n-i.site[1],s=c*c+f*f;do{i=o.cells[r=u],u=null,i.halfedges.forEach(function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],f=n-a[1],l=c*c+f*f;l<s&&(s=l,u=a.index)}})}while(null!==u);return o._found=r,null==e||s<=e*e?i.site:null}};var Gw=function(){var t=cw,n=fw,e=null;function r(r){return new Hw(r.map(function(e,i){var o=[Math.round(t(e,i,r)/Fw)*Fw,Math.round(n(e,i,r)/Fw)*Fw];return o.index=i,o.data=e,o}),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:aw(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:aw(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r},Xw=function(t){return function(){return t}};function Vw(t,n,e){this.target=t,this.type=n,this.transform=e}function Ww(t,n,e){this.k=t,this.x=n,this.y=e}Ww.prototype={constructor:Ww,scale:function(t){return 1===t?this:new Ww(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Ww(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var $w=new Ww(1,0,0);function Zw(t){return t.__zoom||$w}function Qw(){Ht.stopImmediatePropagation()}Zw.prototype=Ww.prototype;var Jw=function(){Ht.preventDefault(),Ht.stopImmediatePropagation()};function Kw(){return!Ht.button}function tM(){var t,n,e=this;return e instanceof SVGElement?(t=(e=e.ownerSVGElement||e).width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function nM(){return this.__zoom||$w}function eM(){return-Ht.deltaY*(Ht.deltaMode?120:1)/500}function rM(){return"ontouchstart"in this}function iM(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],u=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),u>o?(o+u)/2:Math.min(0,o)||Math.max(0,u))}var oM=function(){var t,n,e=Kw,r=tM,i=iM,o=eM,u=rM,a=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],f=250,s=ur,l=[],h=ht("start","zoom","end"),d=500,p=150,v=0;function y(t){t.property("__zoom",nM).on("wheel.zoom",M).on("mousedown.zoom",E).on("dblclick.zoom",S).filter(u).on("touchstart.zoom",T).on("touchmove.zoom",A).on("touchend.zoom touchcancel.zoom",k).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function g(t,n){return(n=Math.max(a[0],Math.min(a[1],n)))===t.k?t:new Ww(n,t.x,t.y)}function _(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new Ww(t.k,r,i)}function b(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function m(t,n,e){t.on("start.zoom",function(){x(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){x(this,arguments).end()}).tween("zoom",function(){var t=arguments,i=x(this,t),o=r.apply(this,t),u=e||b(o),a=Math.max(o[1][0]-o[0][0],o[1][1]-o[0][1]),c=this.__zoom,f="function"==typeof n?n.apply(this,t):n,l=s(c.invert(u).concat(a/c.k),f.invert(u).concat(a/f.k));return function(t){if(1===t)t=f;else{var n=l(t),e=a/n[2];t=new Ww(e,u[0]-n[0]*e,u[1]-n[1]*e)}i.zoom(null,t)}})}function x(t,n){for(var e,r=0,i=l.length;r<i;++r)if((e=l[r]).that===t)return e;return new w(t,n)}function w(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=r.apply(t,n)}function M(){if(e.apply(this,arguments)){var t=x(this,arguments),n=this.__zoom,r=Math.max(a[0],Math.min(a[1],n.k*Math.pow(2,o.apply(this,arguments)))),u=fn(this);if(t.wheel)t.mouse[0][0]===u[0]&&t.mouse[0][1]===u[1]||(t.mouse[1]=n.invert(t.mouse[0]=u)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[u,n.invert(u)],Kr(this),t.start()}Jw(),t.wheel=setTimeout(function(){t.wheel=null,t.end()},p),t.zoom("mouse",i(_(g(n,r),t.mouse[0],t.mouse[1]),t.extent,c))}}function E(){if(!n&&e.apply(this,arguments)){var t=x(this,arguments),r=nn(Ht.view).on("mousemove.zoom",function(){if(Jw(),!t.moved){var n=Ht.clientX-u,e=Ht.clientY-a;t.moved=n*n+e*e>v}t.zoom("mouse",i(_(t.that.__zoom,t.mouse[0]=fn(t.that),t.mouse[1]),t.extent,c))},!0).on("mouseup.zoom",function(){r.on("mousemove.zoom mouseup.zoom",null),yn(Ht.view,t.moved),Jw(),t.end()},!0),o=fn(this),u=Ht.clientX,a=Ht.clientY;vn(Ht.view),Qw(),t.mouse=[o,this.__zoom.invert(o)],Kr(this),t.start()}}function S(){if(e.apply(this,arguments)){var t=this.__zoom,n=fn(this),o=t.invert(n),u=t.k*(Ht.shiftKey?.5:2),a=i(_(g(t,u),n,o),r.apply(this,arguments),c);Jw(),f>0?nn(this).transition().duration(f).call(m,a,n):nn(this).call(y.transform,a)}}function T(){if(e.apply(this,arguments)){var n,r,i,o,u=x(this,arguments),a=Ht.changedTouches,c=a.length;for(Qw(),r=0;r<c;++r)i=a[r],o=[o=ln(this,a,i.identifier),this.__zoom.invert(o),i.identifier],u.touch0?u.touch1||(u.touch1=o):(u.touch0=o,n=!0);if(t&&(t=clearTimeout(t),!u.touch1))return u.end(),void((o=nn(this).on("dblclick.zoom"))&&o.apply(this,arguments));n&&(t=setTimeout(function(){t=null},d),Kr(this),u.start())}}function A(){var n,e,r,o,u=x(this,arguments),a=Ht.changedTouches,f=a.length;for(Jw(),t&&(t=clearTimeout(t)),n=0;n<f;++n)e=a[n],r=ln(this,a,e.identifier),u.touch0&&u.touch0[2]===e.identifier?u.touch0[0]=r:u.touch1&&u.touch1[2]===e.identifier&&(u.touch1[0]=r);if(e=u.that.__zoom,u.touch1){var s=u.touch0[0],l=u.touch0[1],h=u.touch1[0],d=u.touch1[1],p=(p=h[0]-s[0])*p+(p=h[1]-s[1])*p,v=(v=d[0]-l[0])*v+(v=d[1]-l[1])*v;e=g(e,Math.sqrt(p/v)),r=[(s[0]+h[0])/2,(s[1]+h[1])/2],o=[(l[0]+d[0])/2,(l[1]+d[1])/2]}else{if(!u.touch0)return;r=u.touch0[0],o=u.touch0[1]}u.zoom("touch",i(_(e,r,o),u.extent,c))}function k(){var t,e,r=x(this,arguments),i=Ht.changedTouches,o=i.length;for(Qw(),n&&clearTimeout(n),n=setTimeout(function(){n=null},d),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}return y.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",nM),t!==e?m(t,n):e.interrupt().each(function(){x(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()})},y.scaleBy=function(t,n){y.scaleTo(t,function(){return this.__zoom.k*("function"==typeof n?n.apply(this,arguments):n)})},y.scaleTo=function(t,n){y.transform(t,function(){var t=r.apply(this,arguments),e=this.__zoom,o=b(t),u=e.invert(o),a="function"==typeof n?n.apply(this,arguments):n;return i(_(g(e,a),o,u),t,c)})},y.translateBy=function(t,n,e){y.transform(t,function(){return i(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments),c)})},y.translateTo=function(t,n,e){y.transform(t,function(){var t=r.apply(this,arguments),o=this.__zoom,u=b(t);return i($w.translate(u[0],u[1]).scale(o.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,c)})},w.prototype={start:function(){return 1==++this.active&&(this.index=l.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(l.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){$t(new Vw(y,t,this.that.__zoom),h.apply,h,[t,this.that,this.args])}},y.wheelDelta=function(t){return arguments.length?(o="function"==typeof t?t:Xw(+t),y):o},y.filter=function(t){return arguments.length?(e="function"==typeof t?t:Xw(!!t),y):e},y.touchable=function(t){return arguments.length?(u="function"==typeof t?t:Xw(!!t),y):u},y.extent=function(t){return arguments.length?(r="function"==typeof t?t:Xw([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),y):r},y.scaleExtent=function(t){return arguments.length?(a[0]=+t[0],a[1]=+t[1],y):[a[0],a[1]]},y.translateExtent=function(t){return arguments.length?(c[0][0]=+t[0][0],c[1][0]=+t[1][0],c[0][1]=+t[0][1],c[1][1]=+t[1][1],y):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},y.constrain=function(t){return arguments.length?(i=t,y):i},y.duration=function(t){return arguments.length?(f=+t,y):f},y.interpolate=function(t){return arguments.length?(s=t,y):s},y.on=function(){var t=h.on.apply(h,arguments);return t===h?y:t},y.clickDistance=function(t){return arguments.length?(v=(t=+t)*t,y):Math.sqrt(v)},y};e.d(n,"version",function(){return"5.9.2"}),e.d(n,"bisect",function(){return c}),e.d(n,"bisectRight",function(){return u}),e.d(n,"bisectLeft",function(){return a}),e.d(n,"ascending",function(){return r}),e.d(n,"bisector",function(){return i}),e.d(n,"cross",function(){return l}),e.d(n,"descending",function(){return h}),e.d(n,"deviation",function(){return v}),e.d(n,"extent",function(){return y}),e.d(n,"histogram",function(){return C}),e.d(n,"thresholdFreedmanDiaconis",function(){return L}),e.d(n,"thresholdScott",function(){return O}),e.d(n,"thresholdSturges",function(){return N}),e.d(n,"max",function(){return R}),e.d(n,"mean",function(){return D}),e.d(n,"median",function(){return z}),e.d(n,"merge",function(){return j}),e.d(n,"min",function(){return U}),e.d(n,"pairs",function(){return f}),e.d(n,"permute",function(){return q}),e.d(n,"quantile",function(){return P}),e.d(n,"range",function(){return w}),e.d(n,"scan",function(){return I}),e.d(n,"shuffle",function(){return F}),e.d(n,"sum",function(){return B}),e.d(n,"ticks",function(){return T}),e.d(n,"tickIncrement",function(){return A}),e.d(n,"tickStep",function(){return k}),e.d(n,"transpose",function(){return Y}),e.d(n,"variance",function(){return p}),e.d(n,"zip",function(){return G}),e.d(n,"axisTop",function(){return rt}),e.d(n,"axisRight",function(){return it}),e.d(n,"axisBottom",function(){return ot}),e.d(n,"axisLeft",function(){return ut}),e.d(n,"brush",function(){return So}),e.d(n,"brushX",function(){return Mo}),e.d(n,"brushY",function(){return Eo}),e.d(n,"brushSelection",function(){return wo}),e.d(n,"chord",function(){return Oo}),e.d(n,"ribbon",function(){return Vo}),e.d(n,"nest",function(){return Qo}),e.d(n,"set",function(){return ou}),e.d(n,"map",function(){return Zo}),e.d(n,"keys",function(){return uu}),e.d(n,"values",function(){return au}),e.d(n,"entries",function(){return cu}),e.d(n,"color",function(){return qn}),e.d(n,"rgb",function(){return Yn}),e.d(n,"hsl",function(){return Vn}),e.d(n,"lab",function(){return ae}),e.d(n,"hcl",function(){return ve}),e.d(n,"lch",function(){return pe}),e.d(n,"gray",function(){return ue}),e.d(n,"cubehelix",function(){return Me}),e.d(n,"contours",function(){return _u}),e.d(n,"contourDensity",function(){return Eu}),e.d(n,"dispatch",function(){return ht}),e.d(n,"drag",function(){return Mn}),e.d(n,"dragDisable",function(){return vn}),e.d(n,"dragEnable",function(){return yn}),e.d(n,"dsvFormat",function(){return Ru}),e.d(n,"csvParse",function(){return zu}),e.d(n,"csvParseRows",function(){return ju}),e.d(n,"csvFormat",function(){return Uu}),e.d(n,"csvFormatBody",function(){return qu}),e.d(n,"csvFormatRows",function(){return Iu}),e.d(n,"tsvParse",function(){return Bu}),e.d(n,"tsvParseRows",function(){return Yu}),e.d(n,"tsvFormat",function(){return Hu}),e.d(n,"tsvFormatBody",function(){return Gu}),e.d(n,"tsvFormatRows",function(){return Xu}),e.d(n,"autoType",function(){return Vu}),e.d(n,"easeLinear",function(){return fi}),e.d(n,"easeQuad",function(){return hi}),e.d(n,"easeQuadIn",function(){return si}),e.d(n,"easeQuadOut",function(){return li}),e.d(n,"easeQuadInOut",function(){return hi}),e.d(n,"easeCubic",function(){return vi}),e.d(n,"easeCubicIn",function(){return di}),e.d(n,"easeCubicOut",function(){return pi}),e.d(n,"easeCubicInOut",function(){return vi}),e.d(n,"easePoly",function(){return _i}),e.d(n,"easePolyIn",function(){return yi}),e.d(n,"easePolyOut",function(){return gi}),e.d(n,"easePolyInOut",function(){return _i}),e.d(n,"easeSin",function(){return Mi}),e.d(n,"easeSinIn",function(){return xi}),e.d(n,"easeSinOut",function(){return wi}),e.d(n,"easeSinInOut",function(){return Mi}),e.d(n,"easeExp",function(){return Ti}),e.d(n,"easeExpIn",function(){return Ei}),e.d(n,"easeExpOut",function(){return Si}),e.d(n,"easeExpInOut",function(){return Ti}),e.d(n,"easeCircle",function(){return Ni}),e.d(n,"easeCircleIn",function(){return Ai}),e.d(n,"easeCircleOut",function(){return ki}),e.d(n,"easeCircleInOut",function(){return Ni}),e.d(n,"easeBounce",function(){return Fi}),e.d(n,"easeBounceIn",function(){return Ii}),e.d(n,"easeBounceOut",function(){return Fi}),e.d(n,"easeBounceInOut",function(){return Bi}),e.d(n,"easeBack",function(){return Gi}),e.d(n,"easeBackIn",function(){return Yi}),e.d(n,"easeBackOut",function(){return Hi}),e.d(n,"easeBackInOut",function(){return Gi}),e.d(n,"easeElastic",function(){return Wi}),e.d(n,"easeElasticIn",function(){return Vi}),e.d(n,"easeElasticOut",function(){return Wi}),e.d(n,"easeElasticInOut",function(){return $i}),e.d(n,"blob",function(){return $u}),e.d(n,"buffer",function(){return Qu}),e.d(n,"dsv",function(){return na}),e.d(n,"csv",function(){return ea}),e.d(n,"tsv",function(){return ra}),e.d(n,"image",function(){return ia}),e.d(n,"json",function(){return ua}),e.d(n,"text",function(){return Ku}),e.d(n,"xml",function(){return ca}),e.d(n,"html",function(){return fa}),e.d(n,"svg",function(){return sa}),e.d(n,"forceCenter",function(){return la}),e.d(n,"forceCollide",function(){return Ea}),e.d(n,"forceLink",function(){return Aa}),e.d(n,"forceManyBody",function(){return Oa}),e.d(n,"forceRadial",function(){return Ra}),e.d(n,"forceSimulation",function(){return La}),e.d(n,"forceX",function(){return Da}),e.d(n,"forceY",function(){return za}),e.d(n,"formatDefaultLocale",function(){return Ja}),e.d(n,"format",function(){return Ha}),e.d(n,"formatPrefix",function(){return Ga}),e.d(n,"formatLocale",function(){return Qa}),e.d(n,"formatSpecifier",function(){return Ia}),e.d(n,"precisionFixed",function(){return Ka}),e.d(n,"precisionPrefix",function(){return tc}),e.d(n,"precisionRound",function(){return nc}),e.d(n,"geoArea",function(){return Vc}),e.d(n,"geoBounds",function(){return If}),e.d(n,"geoCentroid",function(){return Jf}),e.d(n,"geoCircle",function(){return fs}),e.d(n,"geoClipAntimeridian",function(){return ms}),e.d(n,"geoClipCircle",function(){return xs}),e.d(n,"geoClipExtent",function(){return Ns}),e.d(n,"geoClipRectangle",function(){return Ss}),e.d(n,"geoContains",function(){return Vs}),e.d(n,"geoDistance",function(){return Us}),e.d(n,"geoGraticule",function(){return Zs}),e.d(n,"geoGraticule10",function(){return Qs}),e.d(n,"geoInterpolate",function(){return el}),e.d(n,"geoLength",function(){return Ds}),e.d(n,"geoPath",function(){return th}),e.d(n,"geoAlbers",function(){return bh}),e.d(n,"geoAlbersUsa",function(){return mh}),e.d(n,"geoAzimuthalEqualArea",function(){return Eh}),e.d(n,"geoAzimuthalEqualAreaRaw",function(){return Mh}),e.d(n,"geoAzimuthalEquidistant",function(){return Th}),e.d(n,"geoAzimuthalEquidistantRaw",function(){return Sh}),e.d(n,"geoConicConformal",function(){return Lh}),e.d(n,"geoConicConformalRaw",function(){return Ph}),e.d(n,"geoConicEqualArea",function(){return _h}),e.d(n,"geoConicEqualAreaRaw",function(){return gh}),e.d(n,"geoConicEquidistant",function(){return zh}),e.d(n,"geoConicEquidistantRaw",function(){return Dh}),e.d(n,"geoEqualEarth",function(){return Yh}),e.d(n,"geoEqualEarthRaw",function(){return Bh}),e.d(n,"geoEquirectangular",function(){return Rh}),e.d(n,"geoEquirectangularRaw",function(){return Oh}),e.d(n,"geoGnomonic",function(){return Gh}),e.d(n,"geoGnomonicRaw",function(){return Hh}),e.d(n,"geoIdentity",function(){return Vh}),e.d(n,"geoProjection",function(){return ph}),e.d(n,"geoProjectionMutator",function(){return vh}),e.d(n,"geoMercator",function(){return kh}),e.d(n,"geoMercatorRaw",function(){return Ah}),e.d(n,"geoNaturalEarth1",function(){return $h}),e.d(n,"geoNaturalEarth1Raw",function(){return Wh}),e.d(n,"geoOrthographic",function(){return Qh}),e.d(n,"geoOrthographicRaw",function(){return Zh}),e.d(n,"geoStereographic",function(){return Kh}),e.d(n,"geoStereographicRaw",function(){return Jh}),e.d(n,"geoTransverseMercator",function(){return nd}),e.d(n,"geoTransverseMercatorRaw",function(){return td}),e.d(n,"geoRotation",function(){return us}),e.d(n,"geoStream",function(){return qc}),e.d(n,"geoTransform",function(){return nh}),e.d(n,"cluster",function(){return od}),e.d(n,"hierarchy",function(){return ad}),e.d(n,"pack",function(){return Pd}),e.d(n,"packSiblings",function(){return Td}),e.d(n,"packEnclose",function(){return dd}),e.d(n,"partition",function(){return jd}),e.d(n,"stratify",function(){return Yd}),e.d(n,"tree",function(){return Zd}),e.d(n,"treemap",function(){return np}),e.d(n,"treemapBinary",function(){return ep}),e.d(n,"treemapDice",function(){return zd}),e.d(n,"treemapSlice",function(){return Qd}),e.d(n,"treemapSliceDice",function(){return rp}),e.d(n,"treemapSquarify",function(){return tp}),e.d(n,"treemapResquarify",function(){return ip}),e.d(n,"interpolate",function(){return We}),e.d(n,"interpolateArray",function(){return je}),e.d(n,"interpolateBasis",function(){return Te}),e.d(n,"interpolateBasisClosed",function(){return Ae}),e.d(n,"interpolateDate",function(){return Ue}),e.d(n,"interpolateDiscrete",function(){return $e}),e.d(n,"interpolateHue",function(){return Ze}),e.d(n,"interpolateNumber",function(){return qe}),e.d(n,"interpolateObject",function(){return Ie}),e.d(n,"interpolateRound",function(){return Qe}),e.d(n,"interpolateString",function(){return Ve}),e.d(n,"interpolateTransformCss",function(){return er}),e.d(n,"interpolateTransformSvg",function(){return rr}),e.d(n,"interpolateZoom",function(){return ur}),e.d(n,"interpolateRgb",function(){return Oe}),e.d(n,"interpolateRgbBasis",function(){return De}),e.d(n,"interpolateRgbBasisClosed",function(){return ze}),e.d(n,"interpolateHsl",function(){return cr}),e.d(n,"interpolateHslLong",function(){return fr}),e.d(n,"interpolateLab",function(){return sr}),e.d(n,"interpolateHcl",function(){return hr}),e.d(n,"interpolateHclLong",function(){return dr}),e.d(n,"interpolateCubehelix",function(){return vr}),e.d(n,"interpolateCubehelixLong",function(){return yr}),e.d(n,"piecewise",function(){return gr}),e.d(n,"quantize",function(){return mr}),e.d(n,"path",function(){return Fo}),e.d(n,"polygonArea",function(){return op}),e.d(n,"polygonCentroid",function(){return up}),e.d(n,"polygonHull",function(){return sp}),e.d(n,"polygonContains",function(){return lp}),e.d(n,"polygonLength",function(){return hp}),e.d(n,"quadtree",function(){return _a}),e.d(n,"randomUniform",function(){return pp}),e.d(n,"randomNormal",function(){return vp}),e.d(n,"randomLogNormal",function(){return yp}),e.d(n,"randomBates",function(){return _p}),e.d(n,"randomIrwinHall",function(){return gp}),e.d(n,"randomExponential",function(){return bp}),e.d(n,"scaleBand",function(){return Ap}),e.d(n,"scalePoint",function(){return kp}),e.d(n,"scaleIdentity",function(){return Yp}),e.d(n,"scaleLinear",function(){return Bp}),e.d(n,"scaleLog",function(){return Jp}),e.d(n,"scaleSymlog",function(){return ev}),e.d(n,"scaleOrdinal",function(){return Tp}),e.d(n,"scaleImplicit",function(){return Sp}),e.d(n,"scalePow",function(){return av}),e.d(n,"scaleSqrt",function(){return cv}),e.d(n,"scaleQuantile",function(){return fv}),e.d(n,"scaleQuantize",function(){return sv}),e.d(n,"scaleThreshold",function(){return lv}),e.d(n,"scaleTime",function(){return a_}),e.d(n,"scaleUtc",function(){return c_}),e.d(n,"scaleSequential",function(){return l_}),e.d(n,"scaleSequentialLog",function(){return h_}),e.d(n,"scaleSequentialPow",function(){return p_}),e.d(n,"scaleSequentialSqrt",function(){return v_}),e.d(n,"scaleSequentialSymlog",function(){return d_}),e.d(n,"scaleSequentialQuantile",function(){return y_}),e.d(n,"scaleDiverging",function(){return __}),e.d(n,"scaleDivergingLog",function(){return b_}),e.d(n,"scaleDivergingPow",function(){return x_}),e.d(n,"scaleDivergingSqrt",function(){return w_}),e.d(n,"scaleDivergingSymlog",function(){return m_}),e.d(n,"tickFormat",function(){return Ip}),e.d(n,"schemeCategory10",function(){return E_}),e.d(n,"schemeAccent",function(){return S_}),e.d(n,"schemeDark2",function(){return T_}),e.d(n,"schemePaired",function(){return A_}),e.d(n,"schemePastel1",function(){return k_}),e.d(n,"schemePastel2",function(){return N_}),e.d(n,"schemeSet1",function(){return C_}),e.d(n,"schemeSet2",function(){return P_}),e.d(n,"schemeSet3",function(){return L_}),e.d(n,"interpolateBrBG",function(){return D_}),e.d(n,"schemeBrBG",function(){return R_}),e.d(n,"interpolatePRGn",function(){return j_}),e.d(n,"schemePRGn",function(){return z_}),e.d(n,"interpolatePiYG",function(){return q_}),e.d(n,"schemePiYG",function(){return U_}),e.d(n,"interpolatePuOr",function(){return F_}),e.d(n,"schemePuOr",function(){return I_}),e.d(n,"interpolateRdBu",function(){return Y_}),e.d(n,"schemeRdBu",function(){return B_}),e.d(n,"interpolateRdGy",function(){return G_}),e.d(n,"schemeRdGy",function(){return H_}),e.d(n,"interpolateRdYlBu",function(){return V_}),e.d(n,"schemeRdYlBu",function(){return X_}),e.d(n,"interpolateRdYlGn",function(){return $_}),e.d(n,"schemeRdYlGn",function(){return W_}),e.d(n,"interpolateSpectral",function(){return Q_}),e.d(n,"schemeSpectral",function(){return Z_}),e.d(n,"interpolateBuGn",function(){return K_}),e.d(n,"schemeBuGn",function(){return J_}),e.d(n,"interpolateBuPu",function(){return nb}),e.d(n,"schemeBuPu",function(){return tb}),e.d(n,"interpolateGnBu",function(){return rb}),e.d(n,"schemeGnBu",function(){return eb}),e.d(n,"interpolateOrRd",function(){return ob}),e.d(n,"schemeOrRd",function(){return ib}),e.d(n,"interpolatePuBuGn",function(){return ab}),e.d(n,"schemePuBuGn",function(){return ub}),e.d(n,"interpolatePuBu",function(){return fb}),e.d(n,"schemePuBu",function(){return cb}),e.d(n,"interpolatePuRd",function(){return lb}),e.d(n,"schemePuRd",function(){return sb}),e.d(n,"interpolateRdPu",function(){return db}),e.d(n,"schemeRdPu",function(){return hb}),e.d(n,"interpolateYlGnBu",function(){return vb}),e.d(n,"schemeYlGnBu",function(){return pb}),e.d(n,"interpolateYlGn",function(){return gb}),e.d(n,"schemeYlGn",function(){return yb}),e.d(n,"interpolateYlOrBr",function(){return bb}),e.d(n,"schemeYlOrBr",function(){return _b}),e.d(n,"interpolateYlOrRd",function(){return xb}),e.d(n,"schemeYlOrRd",function(){return mb}),e.d(n,"interpolateBlues",function(){return Mb}),e.d(n,"schemeBlues",function(){return wb}),e.d(n,"interpolateGreens",function(){return Sb}),e.d(n,"schemeGreens",function(){return Eb}),e.d(n,"interpolateGreys",function(){return Ab}),e.d(n,"schemeGreys",function(){return Tb}),e.d(n,"interpolatePurples",function(){return Nb}),e.d(n,"schemePurples",function(){return kb}),e.d(n,"interpolateReds",function(){return Pb}),e.d(n,"schemeReds",function(){return Cb}),e.d(n,"interpolateOranges",function(){return Ob}),e.d(n,"schemeOranges",function(){return Lb}),e.d(n,"interpolateCubehelixDefault",function(){return Rb}),e.d(n,"interpolateRainbow",function(){return Ub}),e.d(n,"interpolateWarm",function(){return Db}),e.d(n,"interpolateCool",function(){return zb}),e.d(n,"interpolateSinebow",function(){return Bb}),e.d(n,"interpolateViridis",function(){return Hb}),e.d(n,"interpolateMagma",function(){return Gb}),e.d(n,"interpolateInferno",function(){return Xb}),e.d(n,"interpolatePlasma",function(){return Vb}),e.d(n,"create",function(){return en}),e.d(n,"creator",function(){return yt}),e.d(n,"local",function(){return on}),e.d(n,"matcher",function(){return xt}),e.d(n,"mouse",function(){return fn}),e.d(n,"namespace",function(){return vt}),e.d(n,"namespaces",function(){return pt}),e.d(n,"clientPoint",function(){return cn}),e.d(n,"select",function(){return nn}),e.d(n,"selectAll",function(){return sn}),e.d(n,"selection",function(){return tn}),e.d(n,"selector",function(){return _t}),e.d(n,"selectorAll",function(){return mt}),e.d(n,"style",function(){return Nt}),e.d(n,"touch",function(){return ln}),e.d(n,"touches",function(){return hn}),e.d(n,"window",function(){return kt}),e.d(n,"event",function(){return Ht}),e.d(n,"customEvent",function(){return $t}),e.d(n,"arc",function(){return dm}),e.d(n,"area",function(){return bm}),e.d(n,"line",function(){return _m}),e.d(n,"pie",function(){return wm}),e.d(n,"areaRadial",function(){return km}),e.d(n,"radialArea",function(){return km}),e.d(n,"lineRadial",function(){return Am}),e.d(n,"radialLine",function(){return Am}),e.d(n,"pointRadial",function(){return Nm}),e.d(n,"linkHorizontal",function(){return jm}),e.d(n,"linkVertical",function(){return Um}),e.d(n,"linkRadial",function(){return qm}),e.d(n,"symbol",function(){return rx}),e.d(n,"symbols",function(){return ex}),e.d(n,"symbolCircle",function(){return Im}),e.d(n,"symbolCross",function(){return Fm}),e.d(n,"symbolDiamond",function(){return Hm}),e.d(n,"symbolSquare",function(){return $m}),e.d(n,"symbolStar",function(){return Wm}),e.d(n,"symbolTriangle",function(){return Qm}),e.d(n,"symbolWye",function(){return nx}),e.d(n,"curveBasisClosed",function(){return fx}),e.d(n,"curveBasisOpen",function(){return lx}),e.d(n,"curveBasis",function(){return ax}),e.d(n,"curveBundle",function(){return dx}),e.d(n,"curveCardinalClosed",function(){return _x}),e.d(n,"curveCardinalOpen",function(){return mx}),e.d(n,"curveCardinal",function(){return yx}),e.d(n,"curveCatmullRomClosed",function(){return Sx}),e.d(n,"curveCatmullRomOpen",function(){return Ax}),e.d(n,"curveCatmullRom",function(){return Mx}),e.d(n,"curveLinearClosed",function(){return Nx}),e.d(n,"curveLinear",function(){return vm}),e.d(n,"curveMonotoneX",function(){return jx}),e.d(n,"curveMonotoneY",function(){return Ux}),e.d(n,"curveNatural",function(){return Fx}),e.d(n,"curveStep",function(){return Yx}),e.d(n,"curveStepAfter",function(){return Gx}),e.d(n,"curveStepBefore",function(){return Hx}),e.d(n,"stack",function(){return $x}),e.d(n,"stackOffsetExpand",function(){return Zx}),e.d(n,"stackOffsetDiverging",function(){return Qx}),e.d(n,"stackOffsetNone",function(){return Xx}),e.d(n,"stackOffsetSilhouette",function(){return Jx}),e.d(n,"stackOffsetWiggle",function(){return Kx}),e.d(n,"stackOrderAppearance",function(){return tw}),e.d(n,"stackOrderAscending",function(){return ew}),e.d(n,"stackOrderDescending",function(){return iw}),e.d(n,"stackOrderInsideOut",function(){return ow}),e.d(n,"stackOrderNone",function(){return Vx}),e.d(n,"stackOrderReverse",function(){return uw}),e.d(n,"timeInterval",function(){return pv}),e.d(n,"timeMillisecond",function(){return yv}),e.d(n,"timeMilliseconds",function(){return gv}),e.d(n,"utcMillisecond",function(){return yv}),e.d(n,"utcMilliseconds",function(){return gv}),e.d(n,"timeSecond",function(){return xv}),e.d(n,"timeSeconds",function(){return wv}),e.d(n,"utcSecond",function(){return xv}),e.d(n,"utcSeconds",function(){return wv}),e.d(n,"timeMinute",function(){return Ev}),e.d(n,"timeMinutes",function(){return Sv}),e.d(n,"timeHour",function(){return Av}),e.d(n,"timeHours",function(){return kv}),e.d(n,"timeDay",function(){return Cv}),e.d(n,"timeDays",function(){return Pv}),e.d(n,"timeWeek",function(){return Ov}),e.d(n,"timeWeeks",function(){return Iv}),e.d(n,"timeSunday",function(){return Ov}),e.d(n,"timeSundays",function(){return Iv}),e.d(n,"timeMonday",function(){return Rv}),e.d(n,"timeMondays",function(){return Fv}),e.d(n,"timeTuesday",function(){return Dv}),e.d(n,"timeTuesdays",function(){return Bv}),e.d(n,"timeWednesday",function(){return zv}),e.d(n,"timeWednesdays",function(){return Yv}),e.d(n,"timeThursday",function(){return jv}),e.d(n,"timeThursdays",function(){return Hv}),e.d(n,"timeFriday",function(){return Uv}),e.d(n,"timeFridays",function(){return Gv}),e.d(n,"timeSaturday",function(){return qv}),e.d(n,"timeSaturdays",function(){return Xv}),e.d(n,"timeMonth",function(){return Wv}),e.d(n,"timeMonths",function(){return $v}),e.d(n,"timeYear",function(){return Qv}),e.d(n,"timeYears",function(){return Jv}),e.d(n,"utcMinute",function(){return ty}),e.d(n,"utcMinutes",function(){return ny}),e.d(n,"utcHour",function(){return ry}),e.d(n,"utcHours",function(){return iy}),e.d(n,"utcDay",function(){return uy}),e.d(n,"utcDays",function(){return ay}),e.d(n,"utcWeek",function(){return fy}),e.d(n,"utcWeeks",function(){return yy}),e.d(n,"utcSunday",function(){return fy}),e.d(n,"utcSundays",function(){return yy}),e.d(n,"utcMonday",function(){return sy}),e.d(n,"utcMondays",function(){return gy}),e.d(n,"utcTuesday",function(){return ly}),e.d(n,"utcTuesdays",function(){return _y}),e.d(n,"utcWednesday",function(){return hy}),e.d(n,"utcWednesdays",function(){return by}),e.d(n,"utcThursday",function(){return dy}),e.d(n,"utcThursdays",function(){return my}),e.d(n,"utcFriday",function(){return py}),e.d(n,"utcFridays",function(){return xy}),e.d(n,"utcSaturday",function(){return vy}),e.d(n,"utcSaturdays",function(){return wy}),e.d(n,"utcMonth",function(){return Ey}),e.d(n,"utcMonths",function(){return Sy}),e.d(n,"utcYear",function(){return Ay}),e.d(n,"utcYears",function(){return ky}),e.d(n,"timeFormatDefaultLocale",function(){return Wg}),e.d(n,"timeFormat",function(){return Ry}),e.d(n,"timeParse",function(){return Dy}),e.d(n,"utcFormat",function(){return zy}),e.d(n,"utcParse",function(){return jy}),e.d(n,"timeFormatLocale",function(){return Ly}),e.d(n,"isoFormat",function(){return $g}),e.d(n,"isoParse",function(){return Zg}),e.d(n,"now",function(){return Cr}),e.d(n,"timer",function(){return Or}),e.d(n,"timerFlush",function(){return Rr}),e.d(n,"timeout",function(){return Ur}),e.d(n,"interval",function(){return qr}),e.d(n,"transition",function(){return ui}),e.d(n,"active",function(){return Ki}),e.d(n,"interrupt",function(){return Kr}),e.d(n,"voronoi",function(){return Gw}),e.d(n,"zoom",function(){return oM}),e.d(n,"zoomTransform",function(){return Zw}),e.d(n,"zoomIdentity",function(){return $w})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,